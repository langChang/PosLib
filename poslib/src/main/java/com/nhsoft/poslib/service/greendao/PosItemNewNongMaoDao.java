package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.new_nong_mao.PosItemNewNongMao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS_ITEM_NEW_NONG_MAO".
*/
public class PosItemNewNongMaoDao extends AbstractDao<PosItemNewNongMao, Long> {

    public static final String TABLENAME = "POS_ITEM_NEW_NONG_MAO";

    /**
     * Properties of entity PosItemNewNongMao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Item_num = new Property(0, Long.class, "item_num", true, "ITEM_NUM");
        public final static Property Branch_num = new Property(1, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Item_barcode = new Property(2, String.class, "item_barcode", false, "ITEM_BARCODE");
        public final static Property Item_category = new Property(3, String.class, "item_category", false, "ITEM_CATEGORY");
        public final static Property Item_code = new Property(4, String.class, "item_code", false, "ITEM_CODE");
        public final static Property Item_create_time = new Property(5, String.class, "item_create_time", false, "ITEM_CREATE_TIME");
        public final static Property Item_creator = new Property(6, String.class, "item_creator", false, "ITEM_CREATOR");
        public final static Property Item_del_tag = new Property(7, boolean.class, "item_del_tag", false, "ITEM_DEL_TAG");
        public final static Property Item_id = new Property(8, long.class, "item_id", false, "ITEM_ID");
        public final static Property Item_last_edit_time = new Property(9, String.class, "item_last_edit_time", false, "ITEM_LAST_EDIT_TIME");
        public final static Property Item_member_price = new Property(10, float.class, "item_member_price", false, "ITEM_MEMBER_PRICE");
        public final static Property Item_name = new Property(11, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Item_pinyin = new Property(12, String.class, "item_pinyin", false, "ITEM_PINYIN");
        public final static Property Item_regular_price = new Property(13, float.class, "item_regular_price", false, "ITEM_REGULAR_PRICE");
        public final static Property Item_unit = new Property(14, String.class, "item_unit", false, "ITEM_UNIT");
        public final static Property Item_weight_flag = new Property(15, boolean.class, "item_weight_flag", false, "ITEM_WEIGHT_FLAG");
        public final static Property Merchant_num = new Property(16, int.class, "merchant_num", false, "MERCHANT_NUM");
        public final static Property Pos_images_json = new Property(17, String.class, "pos_images_json", false, "POS_IMAGES_JSON");
    }


    public PosItemNewNongMaoDao(DaoConfig config) {
        super(config);
    }
    
    public PosItemNewNongMaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS_ITEM_NEW_NONG_MAO\" (" + //
                "\"ITEM_NUM\" INTEGER PRIMARY KEY ," + // 0: item_num
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 1: branch_num
                "\"ITEM_BARCODE\" TEXT," + // 2: item_barcode
                "\"ITEM_CATEGORY\" TEXT," + // 3: item_category
                "\"ITEM_CODE\" TEXT," + // 4: item_code
                "\"ITEM_CREATE_TIME\" TEXT," + // 5: item_create_time
                "\"ITEM_CREATOR\" TEXT," + // 6: item_creator
                "\"ITEM_DEL_TAG\" INTEGER NOT NULL ," + // 7: item_del_tag
                "\"ITEM_ID\" INTEGER NOT NULL ," + // 8: item_id
                "\"ITEM_LAST_EDIT_TIME\" TEXT," + // 9: item_last_edit_time
                "\"ITEM_MEMBER_PRICE\" REAL NOT NULL ," + // 10: item_member_price
                "\"ITEM_NAME\" TEXT," + // 11: item_name
                "\"ITEM_PINYIN\" TEXT," + // 12: item_pinyin
                "\"ITEM_REGULAR_PRICE\" REAL NOT NULL ," + // 13: item_regular_price
                "\"ITEM_UNIT\" TEXT," + // 14: item_unit
                "\"ITEM_WEIGHT_FLAG\" INTEGER NOT NULL ," + // 15: item_weight_flag
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 16: merchant_num
                "\"POS_IMAGES_JSON\" TEXT);"); // 17: pos_images_json
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS_ITEM_NEW_NONG_MAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PosItemNewNongMao entity) {
        stmt.clearBindings();
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(1, item_num);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String item_barcode = entity.getItem_barcode();
        if (item_barcode != null) {
            stmt.bindString(3, item_barcode);
        }
 
        String item_category = entity.getItem_category();
        if (item_category != null) {
            stmt.bindString(4, item_category);
        }
 
        String item_code = entity.getItem_code();
        if (item_code != null) {
            stmt.bindString(5, item_code);
        }
 
        String item_create_time = entity.getItem_create_time();
        if (item_create_time != null) {
            stmt.bindString(6, item_create_time);
        }
 
        String item_creator = entity.getItem_creator();
        if (item_creator != null) {
            stmt.bindString(7, item_creator);
        }
        stmt.bindLong(8, entity.getItem_del_tag() ? 1L: 0L);
        stmt.bindLong(9, entity.getItem_id());
 
        String item_last_edit_time = entity.getItem_last_edit_time();
        if (item_last_edit_time != null) {
            stmt.bindString(10, item_last_edit_time);
        }
        stmt.bindDouble(11, entity.getItem_member_price());
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(12, item_name);
        }
 
        String item_pinyin = entity.getItem_pinyin();
        if (item_pinyin != null) {
            stmt.bindString(13, item_pinyin);
        }
        stmt.bindDouble(14, entity.getItem_regular_price());
 
        String item_unit = entity.getItem_unit();
        if (item_unit != null) {
            stmt.bindString(15, item_unit);
        }
        stmt.bindLong(16, entity.getItem_weight_flag() ? 1L: 0L);
        stmt.bindLong(17, entity.getMerchant_num());
 
        String pos_images_json = entity.getPos_images_json();
        if (pos_images_json != null) {
            stmt.bindString(18, pos_images_json);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PosItemNewNongMao entity) {
        stmt.clearBindings();
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(1, item_num);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String item_barcode = entity.getItem_barcode();
        if (item_barcode != null) {
            stmt.bindString(3, item_barcode);
        }
 
        String item_category = entity.getItem_category();
        if (item_category != null) {
            stmt.bindString(4, item_category);
        }
 
        String item_code = entity.getItem_code();
        if (item_code != null) {
            stmt.bindString(5, item_code);
        }
 
        String item_create_time = entity.getItem_create_time();
        if (item_create_time != null) {
            stmt.bindString(6, item_create_time);
        }
 
        String item_creator = entity.getItem_creator();
        if (item_creator != null) {
            stmt.bindString(7, item_creator);
        }
        stmt.bindLong(8, entity.getItem_del_tag() ? 1L: 0L);
        stmt.bindLong(9, entity.getItem_id());
 
        String item_last_edit_time = entity.getItem_last_edit_time();
        if (item_last_edit_time != null) {
            stmt.bindString(10, item_last_edit_time);
        }
        stmt.bindDouble(11, entity.getItem_member_price());
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(12, item_name);
        }
 
        String item_pinyin = entity.getItem_pinyin();
        if (item_pinyin != null) {
            stmt.bindString(13, item_pinyin);
        }
        stmt.bindDouble(14, entity.getItem_regular_price());
 
        String item_unit = entity.getItem_unit();
        if (item_unit != null) {
            stmt.bindString(15, item_unit);
        }
        stmt.bindLong(16, entity.getItem_weight_flag() ? 1L: 0L);
        stmt.bindLong(17, entity.getMerchant_num());
 
        String pos_images_json = entity.getPos_images_json();
        if (pos_images_json != null) {
            stmt.bindString(18, pos_images_json);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PosItemNewNongMao readEntity(Cursor cursor, int offset) {
        PosItemNewNongMao entity = new PosItemNewNongMao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // item_num
            cursor.getInt(offset + 1), // branch_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // item_barcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // item_category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // item_code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // item_create_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // item_creator
            cursor.getShort(offset + 7) != 0, // item_del_tag
            cursor.getLong(offset + 8), // item_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // item_last_edit_time
            cursor.getFloat(offset + 10), // item_member_price
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // item_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // item_pinyin
            cursor.getFloat(offset + 13), // item_regular_price
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // item_unit
            cursor.getShort(offset + 15) != 0, // item_weight_flag
            cursor.getInt(offset + 16), // merchant_num
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // pos_images_json
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PosItemNewNongMao entity, int offset) {
        entity.setItem_num(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBranch_num(cursor.getInt(offset + 1));
        entity.setItem_barcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItem_category(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItem_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItem_create_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItem_creator(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setItem_del_tag(cursor.getShort(offset + 7) != 0);
        entity.setItem_id(cursor.getLong(offset + 8));
        entity.setItem_last_edit_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setItem_member_price(cursor.getFloat(offset + 10));
        entity.setItem_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setItem_pinyin(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setItem_regular_price(cursor.getFloat(offset + 13));
        entity.setItem_unit(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setItem_weight_flag(cursor.getShort(offset + 15) != 0);
        entity.setMerchant_num(cursor.getInt(offset + 16));
        entity.setPos_images_json(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PosItemNewNongMao entity, long rowId) {
        entity.setItem_num(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PosItemNewNongMao entity) {
        if(entity != null) {
            return entity.getItem_num();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PosItemNewNongMao entity) {
        return entity.getItem_num() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
