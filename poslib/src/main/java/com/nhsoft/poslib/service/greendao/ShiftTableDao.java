package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.shift.ShiftTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHIFT_TABLE".
*/
public class ShiftTableDao extends AbstractDao<ShiftTable, Long> {

    public static final String TABLENAME = "SHIFT_TABLE";

    /**
     * Properties of entity ShiftTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Merchant_num = new Property(1, int.class, "merchant_num", false, "MERCHANT_NUM");
        public final static Property Stall_num = new Property(2, int.class, "stall_num", false, "STALL_NUM");
        public final static Property Shift_table_biz_date = new Property(3, java.util.Date.class, "shift_table_biz_date", false, "SHIFT_TABLE_BIZ_DATE");
        public final static Property Shift_table_start = new Property(4, java.util.Date.class, "shift_table_start", false, "SHIFT_TABLE_START");
        public final static Property Shift_table_end = new Property(5, java.util.Date.class, "shift_table_end", false, "SHIFT_TABLE_END");
        public final static Property Shift_table_user_num = new Property(6, int.class, "shift_table_user_num", false, "SHIFT_TABLE_USER_NUM");
        public final static Property Shift_table_user_code = new Property(7, String.class, "shift_table_user_code", false, "SHIFT_TABLE_USER_CODE");
        public final static Property Shift_table_user_name = new Property(8, String.class, "shift_table_user_name", false, "SHIFT_TABLE_USER_NAME");
        public final static Property Shift_table_closed = new Property(9, boolean.class, "shift_table_closed", false, "SHIFT_TABLE_CLOSED");
        public final static Property Shift_table_synchronized = new Property(10, boolean.class, "shift_table_synchronized", false, "SHIFT_TABLE_SYNCHRONIZED");
        public final static Property Shift_table_need_carry = new Property(11, boolean.class, "shift_table_need_carry", false, "SHIFT_TABLE_NEED_CARRY");
        public final static Property Shift_table_carried = new Property(12, boolean.class, "shift_table_carried", false, "SHIFT_TABLE_CARRIED");
        public final static Property Shift_table_terminal_id = new Property(13, String.class, "shift_table_terminal_id", false, "SHIFT_TABLE_TERMINAL_ID");
        public final static Property Shift_table_dpc_synchronized = new Property(14, Boolean.class, "shift_table_dpc_synchronized", false, "SHIFT_TABLE_DPC_SYNCHRONIZED");
        public final static Property Shift_table_actual_money = new Property(15, float.class, "shift_table_actual_money", false, "SHIFT_TABLE_ACTUAL_MONEY");
        public final static Property Shift_table_actual_bank_money = new Property(16, float.class, "shift_table_actual_bank_money", false, "SHIFT_TABLE_ACTUAL_BANK_MONEY");
        public final static Property Shift_table_status = new Property(17, int.class, "shift_table_status", false, "SHIFT_TABLE_STATUS");
        public final static Property Shift_table_memo = new Property(18, String.class, "shift_table_memo", false, "SHIFT_TABLE_MEMO");
        public final static Property Shift_table_last_edit_time = new Property(19, java.util.Date.class, "shift_table_last_edit_time", false, "SHIFT_TABLE_LAST_EDIT_TIME");
        public final static Property System_book_code = new Property(20, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Branch_num = new Property(21, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Shift_table_num = new Property(22, int.class, "shift_table_num", false, "SHIFT_TABLE_NUM");
        public final static Property Shift_table_bizday = new Property(23, String.class, "shift_table_bizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property Shift_table_upload_times = new Property(24, int.class, "shift_table_upload_times", false, "SHIFT_TABLE_UPLOAD_TIMES");
        public final static Property Shift_input_cash = new Property(25, Float.class, "shift_input_cash", false, "SHIFT_INPUT_CASH");
    }


    public ShiftTableDao(DaoConfig config) {
        super(config);
    }
    
    public ShiftTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHIFT_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 1: merchant_num
                "\"STALL_NUM\" INTEGER NOT NULL ," + // 2: stall_num
                "\"SHIFT_TABLE_BIZ_DATE\" INTEGER," + // 3: shift_table_biz_date
                "\"SHIFT_TABLE_START\" INTEGER," + // 4: shift_table_start
                "\"SHIFT_TABLE_END\" INTEGER," + // 5: shift_table_end
                "\"SHIFT_TABLE_USER_NUM\" INTEGER NOT NULL ," + // 6: shift_table_user_num
                "\"SHIFT_TABLE_USER_CODE\" TEXT," + // 7: shift_table_user_code
                "\"SHIFT_TABLE_USER_NAME\" TEXT," + // 8: shift_table_user_name
                "\"SHIFT_TABLE_CLOSED\" INTEGER NOT NULL ," + // 9: shift_table_closed
                "\"SHIFT_TABLE_SYNCHRONIZED\" INTEGER NOT NULL ," + // 10: shift_table_synchronized
                "\"SHIFT_TABLE_NEED_CARRY\" INTEGER NOT NULL ," + // 11: shift_table_need_carry
                "\"SHIFT_TABLE_CARRIED\" INTEGER NOT NULL ," + // 12: shift_table_carried
                "\"SHIFT_TABLE_TERMINAL_ID\" TEXT," + // 13: shift_table_terminal_id
                "\"SHIFT_TABLE_DPC_SYNCHRONIZED\" INTEGER," + // 14: shift_table_dpc_synchronized
                "\"SHIFT_TABLE_ACTUAL_MONEY\" REAL NOT NULL ," + // 15: shift_table_actual_money
                "\"SHIFT_TABLE_ACTUAL_BANK_MONEY\" REAL NOT NULL ," + // 16: shift_table_actual_bank_money
                "\"SHIFT_TABLE_STATUS\" INTEGER NOT NULL ," + // 17: shift_table_status
                "\"SHIFT_TABLE_MEMO\" TEXT," + // 18: shift_table_memo
                "\"SHIFT_TABLE_LAST_EDIT_TIME\" INTEGER," + // 19: shift_table_last_edit_time
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 20: system_book_code
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 21: branch_num
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 22: shift_table_num
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 23: shift_table_bizday
                "\"SHIFT_TABLE_UPLOAD_TIMES\" INTEGER NOT NULL ," + // 24: shift_table_upload_times
                "\"SHIFT_INPUT_CASH\" REAL);"); // 25: shift_input_cash
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHIFT_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShiftTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMerchant_num());
        stmt.bindLong(3, entity.getStall_num());
 
        java.util.Date shift_table_biz_date = entity.getShift_table_biz_date();
        if (shift_table_biz_date != null) {
            stmt.bindLong(4, shift_table_biz_date.getTime());
        }
 
        java.util.Date shift_table_start = entity.getShift_table_start();
        if (shift_table_start != null) {
            stmt.bindLong(5, shift_table_start.getTime());
        }
 
        java.util.Date shift_table_end = entity.getShift_table_end();
        if (shift_table_end != null) {
            stmt.bindLong(6, shift_table_end.getTime());
        }
        stmt.bindLong(7, entity.getShift_table_user_num());
 
        String shift_table_user_code = entity.getShift_table_user_code();
        if (shift_table_user_code != null) {
            stmt.bindString(8, shift_table_user_code);
        }
 
        String shift_table_user_name = entity.getShift_table_user_name();
        if (shift_table_user_name != null) {
            stmt.bindString(9, shift_table_user_name);
        }
        stmt.bindLong(10, entity.getShift_table_closed() ? 1L: 0L);
        stmt.bindLong(11, entity.getShift_table_synchronized() ? 1L: 0L);
        stmt.bindLong(12, entity.getShift_table_need_carry() ? 1L: 0L);
        stmt.bindLong(13, entity.getShift_table_carried() ? 1L: 0L);
 
        String shift_table_terminal_id = entity.getShift_table_terminal_id();
        if (shift_table_terminal_id != null) {
            stmt.bindString(14, shift_table_terminal_id);
        }
 
        Boolean shift_table_dpc_synchronized = entity.getShift_table_dpc_synchronized();
        if (shift_table_dpc_synchronized != null) {
            stmt.bindLong(15, shift_table_dpc_synchronized ? 1L: 0L);
        }
        stmt.bindDouble(16, entity.getShift_table_actual_money());
        stmt.bindDouble(17, entity.getShift_table_actual_bank_money());
        stmt.bindLong(18, entity.getShift_table_status());
 
        String shift_table_memo = entity.getShift_table_memo();
        if (shift_table_memo != null) {
            stmt.bindString(19, shift_table_memo);
        }
 
        java.util.Date shift_table_last_edit_time = entity.getShift_table_last_edit_time();
        if (shift_table_last_edit_time != null) {
            stmt.bindLong(20, shift_table_last_edit_time.getTime());
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(21, system_book_code);
        }
        stmt.bindLong(22, entity.getBranch_num());
        stmt.bindLong(23, entity.getShift_table_num());
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(24, shift_table_bizday);
        }
        stmt.bindLong(25, entity.getShift_table_upload_times());
 
        Float shift_input_cash = entity.getShift_input_cash();
        if (shift_input_cash != null) {
            stmt.bindDouble(26, shift_input_cash);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShiftTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMerchant_num());
        stmt.bindLong(3, entity.getStall_num());
 
        java.util.Date shift_table_biz_date = entity.getShift_table_biz_date();
        if (shift_table_biz_date != null) {
            stmt.bindLong(4, shift_table_biz_date.getTime());
        }
 
        java.util.Date shift_table_start = entity.getShift_table_start();
        if (shift_table_start != null) {
            stmt.bindLong(5, shift_table_start.getTime());
        }
 
        java.util.Date shift_table_end = entity.getShift_table_end();
        if (shift_table_end != null) {
            stmt.bindLong(6, shift_table_end.getTime());
        }
        stmt.bindLong(7, entity.getShift_table_user_num());
 
        String shift_table_user_code = entity.getShift_table_user_code();
        if (shift_table_user_code != null) {
            stmt.bindString(8, shift_table_user_code);
        }
 
        String shift_table_user_name = entity.getShift_table_user_name();
        if (shift_table_user_name != null) {
            stmt.bindString(9, shift_table_user_name);
        }
        stmt.bindLong(10, entity.getShift_table_closed() ? 1L: 0L);
        stmt.bindLong(11, entity.getShift_table_synchronized() ? 1L: 0L);
        stmt.bindLong(12, entity.getShift_table_need_carry() ? 1L: 0L);
        stmt.bindLong(13, entity.getShift_table_carried() ? 1L: 0L);
 
        String shift_table_terminal_id = entity.getShift_table_terminal_id();
        if (shift_table_terminal_id != null) {
            stmt.bindString(14, shift_table_terminal_id);
        }
 
        Boolean shift_table_dpc_synchronized = entity.getShift_table_dpc_synchronized();
        if (shift_table_dpc_synchronized != null) {
            stmt.bindLong(15, shift_table_dpc_synchronized ? 1L: 0L);
        }
        stmt.bindDouble(16, entity.getShift_table_actual_money());
        stmt.bindDouble(17, entity.getShift_table_actual_bank_money());
        stmt.bindLong(18, entity.getShift_table_status());
 
        String shift_table_memo = entity.getShift_table_memo();
        if (shift_table_memo != null) {
            stmt.bindString(19, shift_table_memo);
        }
 
        java.util.Date shift_table_last_edit_time = entity.getShift_table_last_edit_time();
        if (shift_table_last_edit_time != null) {
            stmt.bindLong(20, shift_table_last_edit_time.getTime());
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(21, system_book_code);
        }
        stmt.bindLong(22, entity.getBranch_num());
        stmt.bindLong(23, entity.getShift_table_num());
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(24, shift_table_bizday);
        }
        stmt.bindLong(25, entity.getShift_table_upload_times());
 
        Float shift_input_cash = entity.getShift_input_cash();
        if (shift_input_cash != null) {
            stmt.bindDouble(26, shift_input_cash);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShiftTable readEntity(Cursor cursor, int offset) {
        ShiftTable entity = new ShiftTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // merchant_num
            cursor.getInt(offset + 2), // stall_num
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // shift_table_biz_date
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // shift_table_start
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // shift_table_end
            cursor.getInt(offset + 6), // shift_table_user_num
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shift_table_user_code
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shift_table_user_name
            cursor.getShort(offset + 9) != 0, // shift_table_closed
            cursor.getShort(offset + 10) != 0, // shift_table_synchronized
            cursor.getShort(offset + 11) != 0, // shift_table_need_carry
            cursor.getShort(offset + 12) != 0, // shift_table_carried
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // shift_table_terminal_id
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // shift_table_dpc_synchronized
            cursor.getFloat(offset + 15), // shift_table_actual_money
            cursor.getFloat(offset + 16), // shift_table_actual_bank_money
            cursor.getInt(offset + 17), // shift_table_status
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // shift_table_memo
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // shift_table_last_edit_time
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // system_book_code
            cursor.getInt(offset + 21), // branch_num
            cursor.getInt(offset + 22), // shift_table_num
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // shift_table_bizday
            cursor.getInt(offset + 24), // shift_table_upload_times
            cursor.isNull(offset + 25) ? null : cursor.getFloat(offset + 25) // shift_input_cash
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShiftTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMerchant_num(cursor.getInt(offset + 1));
        entity.setStall_num(cursor.getInt(offset + 2));
        entity.setShift_table_biz_date(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setShift_table_start(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setShift_table_end(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setShift_table_user_num(cursor.getInt(offset + 6));
        entity.setShift_table_user_code(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShift_table_user_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShift_table_closed(cursor.getShort(offset + 9) != 0);
        entity.setShift_table_synchronized(cursor.getShort(offset + 10) != 0);
        entity.setShift_table_need_carry(cursor.getShort(offset + 11) != 0);
        entity.setShift_table_carried(cursor.getShort(offset + 12) != 0);
        entity.setShift_table_terminal_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setShift_table_dpc_synchronized(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setShift_table_actual_money(cursor.getFloat(offset + 15));
        entity.setShift_table_actual_bank_money(cursor.getFloat(offset + 16));
        entity.setShift_table_status(cursor.getInt(offset + 17));
        entity.setShift_table_memo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setShift_table_last_edit_time(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setSystem_book_code(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBranch_num(cursor.getInt(offset + 21));
        entity.setShift_table_num(cursor.getInt(offset + 22));
        entity.setShift_table_bizday(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setShift_table_upload_times(cursor.getInt(offset + 24));
        entity.setShift_input_cash(cursor.isNull(offset + 25) ? null : cursor.getFloat(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShiftTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShiftTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShiftTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
