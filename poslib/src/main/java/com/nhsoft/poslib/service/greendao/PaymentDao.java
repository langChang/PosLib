package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.order.Payment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAYMENT".
*/
public class PaymentDao extends AbstractDao<Payment, String> {

    public static final String TABLENAME = "PAYMENT";

    /**
     * Properties of entity Payment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PaymentNo = new Property(0, String.class, "paymentNo", true, "PAYMENT_NO");
        public final static Property OrderNo = new Property(1, String.class, "orderNo", false, "ORDER_NO");
        public final static Property ClientFid = new Property(2, String.class, "clientFid", false, "CLIENT_FID");
        public final static Property SystemBookCode = new Property(3, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(4, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property ShiftTableNum = new Property(5, int.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property ShiftTableBizday = new Property(6, String.class, "shiftTableBizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property PaymentTime = new Property(7, String.class, "paymentTime", false, "PAYMENT_TIME");
        public final static Property PaymentPayBy = new Property(8, String.class, "paymentPayBy", false, "PAYMENT_PAY_BY");
        public final static Property PaymentRound = new Property(9, float.class, "paymentRound", false, "PAYMENT_ROUND");
        public final static Property PaymentReceive = new Property(10, float.class, "paymentReceive", false, "PAYMENT_RECEIVE");
        public final static Property PaymentMoney = new Property(11, float.class, "paymentMoney", false, "PAYMENT_MONEY");
        public final static Property PaymentChange = new Property(12, float.class, "paymentChange", false, "PAYMENT_CHANGE");
        public final static Property PaymentPaid = new Property(13, float.class, "paymentPaid", false, "PAYMENT_PAID");
        public final static Property PaymentBalance = new Property(14, float.class, "paymentBalance", false, "PAYMENT_BALANCE");
        public final static Property PaymentBillNo = new Property(15, String.class, "paymentBillNo", false, "PAYMENT_BILL_NO");
        public final static Property PaymentMemo = new Property(16, String.class, "paymentMemo", false, "PAYMENT_MEMO");
        public final static Property PaymentAcctNo = new Property(17, String.class, "paymentAcctNo", false, "PAYMENT_ACCT_NO");
        public final static Property PaymentAuditor = new Property(18, String.class, "paymentAuditor", false, "PAYMENT_AUDITOR");
        public final static Property PaymentMachine = new Property(19, String.class, "paymentMachine", false, "PAYMENT_MACHINE");
        public final static Property PaymentCustNum = new Property(20, int.class, "paymentCustNum", false, "PAYMENT_CUST_NUM");
        public final static Property PaymentCardBalance = new Property(21, float.class, "paymentCardBalance", false, "PAYMENT_CARD_BALANCE");
        public final static Property PaymentConsumeCount = new Property(22, int.class, "paymentConsumeCount", false, "PAYMENT_CONSUME_COUNT");
        public final static Property PaymentFlag = new Property(23, Boolean.class, "paymentFlag", false, "PAYMENT_FLAG");
        public final static Property PaymentDate = new Property(24, String.class, "paymentDate", false, "PAYMENT_DATE");
        public final static Property PaymentLastestDate = new Property(25, String.class, "paymentLastestDate", false, "PAYMENT_LASTEST_DATE");
        public final static Property AccountBankNum = new Property(26, int.class, "accountBankNum", false, "ACCOUNT_BANK_NUM");
        public final static Property PaymentPoint = new Property(27, float.class, "paymentPoint", false, "PAYMENT_POINT");
        public final static Property ConsumeRevokeFlag = new Property(28, Boolean.class, "consumeRevokeFlag", false, "CONSUME_REVOKE_FLAG");
        public final static Property WechatOpenId = new Property(29, String.class, "wechatOpenId", false, "WECHAT_OPEN_ID");
        public final static Property PaymentCardPrintNum = new Property(30, String.class, "paymentCardPrintNum", false, "PAYMENT_CARD_PRINT_NUM");
        public final static Property PaymentOnlineUnDiscount = new Property(31, float.class, "paymentOnlineUnDiscount", false, "PAYMENT_ONLINE_UNDISCOUNT");
        public final static Property PaymentBuyerMoney = new Property(32, float.class, "paymentBuyerMoney", false, "PAYMENT_BUYER_MONEY");
        public final static Property PaymentReceiptMoney = new Property(33, float.class, "paymentReceiptMoney", false, "PAYMENT_RECEIPT_MONEY");
        public final static Property MerchantNum = new Property(34, int.class, "merchantNum", false, "MERCHANT_NUM");
        public final static Property StallNum = new Property(35, int.class, "stallNum", false, "STALL_NUM");
        public final static Property VipInfoJson = new Property(36, String.class, "vipInfoJson", false, "VIP_INFO_JSON");
    }

    private Query<Payment> posOrder_PaymentsQuery;

    public PaymentDao(DaoConfig config) {
        super(config);
    }
    
    public PaymentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAYMENT\" (" + //
                "\"PAYMENT_NO\" TEXT PRIMARY KEY NOT NULL ," + // 0: paymentNo
                "\"ORDER_NO\" TEXT," + // 1: orderNo
                "\"CLIENT_FID\" TEXT," + // 2: clientFid
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 3: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 4: branchNum
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 5: shiftTableNum
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 6: shiftTableBizday
                "\"PAYMENT_TIME\" TEXT," + // 7: paymentTime
                "\"PAYMENT_PAY_BY\" TEXT," + // 8: paymentPayBy
                "\"PAYMENT_ROUND\" REAL NOT NULL ," + // 9: paymentRound
                "\"PAYMENT_RECEIVE\" REAL NOT NULL ," + // 10: paymentReceive
                "\"PAYMENT_MONEY\" REAL NOT NULL ," + // 11: paymentMoney
                "\"PAYMENT_CHANGE\" REAL NOT NULL ," + // 12: paymentChange
                "\"PAYMENT_PAID\" REAL NOT NULL ," + // 13: paymentPaid
                "\"PAYMENT_BALANCE\" REAL NOT NULL ," + // 14: paymentBalance
                "\"PAYMENT_BILL_NO\" TEXT," + // 15: paymentBillNo
                "\"PAYMENT_MEMO\" TEXT," + // 16: paymentMemo
                "\"PAYMENT_ACCT_NO\" TEXT," + // 17: paymentAcctNo
                "\"PAYMENT_AUDITOR\" TEXT," + // 18: paymentAuditor
                "\"PAYMENT_MACHINE\" TEXT," + // 19: paymentMachine
                "\"PAYMENT_CUST_NUM\" INTEGER NOT NULL ," + // 20: paymentCustNum
                "\"PAYMENT_CARD_BALANCE\" REAL NOT NULL ," + // 21: paymentCardBalance
                "\"PAYMENT_CONSUME_COUNT\" INTEGER NOT NULL ," + // 22: paymentConsumeCount
                "\"PAYMENT_FLAG\" INTEGER," + // 23: paymentFlag
                "\"PAYMENT_DATE\" TEXT," + // 24: paymentDate
                "\"PAYMENT_LASTEST_DATE\" TEXT," + // 25: paymentLastestDate
                "\"ACCOUNT_BANK_NUM\" INTEGER NOT NULL ," + // 26: accountBankNum
                "\"PAYMENT_POINT\" REAL NOT NULL ," + // 27: paymentPoint
                "\"CONSUME_REVOKE_FLAG\" INTEGER," + // 28: consumeRevokeFlag
                "\"WECHAT_OPEN_ID\" TEXT," + // 29: wechatOpenId
                "\"PAYMENT_CARD_PRINT_NUM\" TEXT," + // 30: paymentCardPrintNum
                "\"PAYMENT_ONLINE_UNDISCOUNT\" REAL NOT NULL ," + // 31: paymentOnlineUnDiscount
                "\"PAYMENT_BUYER_MONEY\" REAL NOT NULL ," + // 32: paymentBuyerMoney
                "\"PAYMENT_RECEIPT_MONEY\" REAL NOT NULL ," + // 33: paymentReceiptMoney
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 34: merchantNum
                "\"STALL_NUM\" INTEGER NOT NULL ," + // 35: stallNum
                "\"VIP_INFO_JSON\" TEXT);"); // 36: vipInfoJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAYMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Payment entity) {
        stmt.clearBindings();
 
        String paymentNo = entity.getPaymentNo();
        if (paymentNo != null) {
            stmt.bindString(1, paymentNo);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
 
        String clientFid = entity.getClientFid();
        if (clientFid != null) {
            stmt.bindString(3, clientFid);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(4, systemBookCode);
        }
        stmt.bindLong(5, entity.getBranchNum());
        stmt.bindLong(6, entity.getShiftTableNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(7, shiftTableBizday);
        }
 
        String paymentTime = entity.getPaymentTime();
        if (paymentTime != null) {
            stmt.bindString(8, paymentTime);
        }
 
        String paymentPayBy = entity.getPaymentPayBy();
        if (paymentPayBy != null) {
            stmt.bindString(9, paymentPayBy);
        }
        stmt.bindDouble(10, entity.getPaymentRound());
        stmt.bindDouble(11, entity.getPaymentReceive());
        stmt.bindDouble(12, entity.getPaymentMoney());
        stmt.bindDouble(13, entity.getPaymentChange());
        stmt.bindDouble(14, entity.getPaymentPaid());
        stmt.bindDouble(15, entity.getPaymentBalance());
 
        String paymentBillNo = entity.getPaymentBillNo();
        if (paymentBillNo != null) {
            stmt.bindString(16, paymentBillNo);
        }
 
        String paymentMemo = entity.getPaymentMemo();
        if (paymentMemo != null) {
            stmt.bindString(17, paymentMemo);
        }
 
        String paymentAcctNo = entity.getPaymentAcctNo();
        if (paymentAcctNo != null) {
            stmt.bindString(18, paymentAcctNo);
        }
 
        String paymentAuditor = entity.getPaymentAuditor();
        if (paymentAuditor != null) {
            stmt.bindString(19, paymentAuditor);
        }
 
        String paymentMachine = entity.getPaymentMachine();
        if (paymentMachine != null) {
            stmt.bindString(20, paymentMachine);
        }
        stmt.bindLong(21, entity.getPaymentCustNum());
        stmt.bindDouble(22, entity.getPaymentCardBalance());
        stmt.bindLong(23, entity.getPaymentConsumeCount());
 
        Boolean paymentFlag = entity.getPaymentFlag();
        if (paymentFlag != null) {
            stmt.bindLong(24, paymentFlag ? 1L: 0L);
        }
 
        String paymentDate = entity.getPaymentDate();
        if (paymentDate != null) {
            stmt.bindString(25, paymentDate);
        }
 
        String paymentLastestDate = entity.getPaymentLastestDate();
        if (paymentLastestDate != null) {
            stmt.bindString(26, paymentLastestDate);
        }
        stmt.bindLong(27, entity.getAccountBankNum());
        stmt.bindDouble(28, entity.getPaymentPoint());
 
        Boolean consumeRevokeFlag = entity.getConsumeRevokeFlag();
        if (consumeRevokeFlag != null) {
            stmt.bindLong(29, consumeRevokeFlag ? 1L: 0L);
        }
 
        String wechatOpenId = entity.getWechatOpenId();
        if (wechatOpenId != null) {
            stmt.bindString(30, wechatOpenId);
        }
 
        String paymentCardPrintNum = entity.getPaymentCardPrintNum();
        if (paymentCardPrintNum != null) {
            stmt.bindString(31, paymentCardPrintNum);
        }
        stmt.bindDouble(32, entity.getPaymentOnlineUnDiscount());
        stmt.bindDouble(33, entity.getPaymentBuyerMoney());
        stmt.bindDouble(34, entity.getPaymentReceiptMoney());
        stmt.bindLong(35, entity.getMerchantNum());
        stmt.bindLong(36, entity.getStallNum());
 
        String vipInfoJson = entity.getVipInfoJson();
        if (vipInfoJson != null) {
            stmt.bindString(37, vipInfoJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Payment entity) {
        stmt.clearBindings();
 
        String paymentNo = entity.getPaymentNo();
        if (paymentNo != null) {
            stmt.bindString(1, paymentNo);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
 
        String clientFid = entity.getClientFid();
        if (clientFid != null) {
            stmt.bindString(3, clientFid);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(4, systemBookCode);
        }
        stmt.bindLong(5, entity.getBranchNum());
        stmt.bindLong(6, entity.getShiftTableNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(7, shiftTableBizday);
        }
 
        String paymentTime = entity.getPaymentTime();
        if (paymentTime != null) {
            stmt.bindString(8, paymentTime);
        }
 
        String paymentPayBy = entity.getPaymentPayBy();
        if (paymentPayBy != null) {
            stmt.bindString(9, paymentPayBy);
        }
        stmt.bindDouble(10, entity.getPaymentRound());
        stmt.bindDouble(11, entity.getPaymentReceive());
        stmt.bindDouble(12, entity.getPaymentMoney());
        stmt.bindDouble(13, entity.getPaymentChange());
        stmt.bindDouble(14, entity.getPaymentPaid());
        stmt.bindDouble(15, entity.getPaymentBalance());
 
        String paymentBillNo = entity.getPaymentBillNo();
        if (paymentBillNo != null) {
            stmt.bindString(16, paymentBillNo);
        }
 
        String paymentMemo = entity.getPaymentMemo();
        if (paymentMemo != null) {
            stmt.bindString(17, paymentMemo);
        }
 
        String paymentAcctNo = entity.getPaymentAcctNo();
        if (paymentAcctNo != null) {
            stmt.bindString(18, paymentAcctNo);
        }
 
        String paymentAuditor = entity.getPaymentAuditor();
        if (paymentAuditor != null) {
            stmt.bindString(19, paymentAuditor);
        }
 
        String paymentMachine = entity.getPaymentMachine();
        if (paymentMachine != null) {
            stmt.bindString(20, paymentMachine);
        }
        stmt.bindLong(21, entity.getPaymentCustNum());
        stmt.bindDouble(22, entity.getPaymentCardBalance());
        stmt.bindLong(23, entity.getPaymentConsumeCount());
 
        Boolean paymentFlag = entity.getPaymentFlag();
        if (paymentFlag != null) {
            stmt.bindLong(24, paymentFlag ? 1L: 0L);
        }
 
        String paymentDate = entity.getPaymentDate();
        if (paymentDate != null) {
            stmt.bindString(25, paymentDate);
        }
 
        String paymentLastestDate = entity.getPaymentLastestDate();
        if (paymentLastestDate != null) {
            stmt.bindString(26, paymentLastestDate);
        }
        stmt.bindLong(27, entity.getAccountBankNum());
        stmt.bindDouble(28, entity.getPaymentPoint());
 
        Boolean consumeRevokeFlag = entity.getConsumeRevokeFlag();
        if (consumeRevokeFlag != null) {
            stmt.bindLong(29, consumeRevokeFlag ? 1L: 0L);
        }
 
        String wechatOpenId = entity.getWechatOpenId();
        if (wechatOpenId != null) {
            stmt.bindString(30, wechatOpenId);
        }
 
        String paymentCardPrintNum = entity.getPaymentCardPrintNum();
        if (paymentCardPrintNum != null) {
            stmt.bindString(31, paymentCardPrintNum);
        }
        stmt.bindDouble(32, entity.getPaymentOnlineUnDiscount());
        stmt.bindDouble(33, entity.getPaymentBuyerMoney());
        stmt.bindDouble(34, entity.getPaymentReceiptMoney());
        stmt.bindLong(35, entity.getMerchantNum());
        stmt.bindLong(36, entity.getStallNum());
 
        String vipInfoJson = entity.getVipInfoJson();
        if (vipInfoJson != null) {
            stmt.bindString(37, vipInfoJson);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Payment readEntity(Cursor cursor, int offset) {
        Payment entity = new Payment( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // paymentNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // clientFid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // systemBookCode
            cursor.getInt(offset + 4), // branchNum
            cursor.getInt(offset + 5), // shiftTableNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shiftTableBizday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // paymentTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // paymentPayBy
            cursor.getFloat(offset + 9), // paymentRound
            cursor.getFloat(offset + 10), // paymentReceive
            cursor.getFloat(offset + 11), // paymentMoney
            cursor.getFloat(offset + 12), // paymentChange
            cursor.getFloat(offset + 13), // paymentPaid
            cursor.getFloat(offset + 14), // paymentBalance
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // paymentBillNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // paymentMemo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // paymentAcctNo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // paymentAuditor
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // paymentMachine
            cursor.getInt(offset + 20), // paymentCustNum
            cursor.getFloat(offset + 21), // paymentCardBalance
            cursor.getInt(offset + 22), // paymentConsumeCount
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // paymentFlag
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // paymentDate
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // paymentLastestDate
            cursor.getInt(offset + 26), // accountBankNum
            cursor.getFloat(offset + 27), // paymentPoint
            cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0, // consumeRevokeFlag
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // wechatOpenId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // paymentCardPrintNum
            cursor.getFloat(offset + 31), // paymentOnlineUnDiscount
            cursor.getFloat(offset + 32), // paymentBuyerMoney
            cursor.getFloat(offset + 33), // paymentReceiptMoney
            cursor.getInt(offset + 34), // merchantNum
            cursor.getInt(offset + 35), // stallNum
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36) // vipInfoJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Payment entity, int offset) {
        entity.setPaymentNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClientFid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSystemBookCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranchNum(cursor.getInt(offset + 4));
        entity.setShiftTableNum(cursor.getInt(offset + 5));
        entity.setShiftTableBizday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPaymentTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPaymentPayBy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPaymentRound(cursor.getFloat(offset + 9));
        entity.setPaymentReceive(cursor.getFloat(offset + 10));
        entity.setPaymentMoney(cursor.getFloat(offset + 11));
        entity.setPaymentChange(cursor.getFloat(offset + 12));
        entity.setPaymentPaid(cursor.getFloat(offset + 13));
        entity.setPaymentBalance(cursor.getFloat(offset + 14));
        entity.setPaymentBillNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPaymentMemo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPaymentAcctNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPaymentAuditor(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPaymentMachine(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPaymentCustNum(cursor.getInt(offset + 20));
        entity.setPaymentCardBalance(cursor.getFloat(offset + 21));
        entity.setPaymentConsumeCount(cursor.getInt(offset + 22));
        entity.setPaymentFlag(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setPaymentDate(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPaymentLastestDate(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setAccountBankNum(cursor.getInt(offset + 26));
        entity.setPaymentPoint(cursor.getFloat(offset + 27));
        entity.setConsumeRevokeFlag(cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0);
        entity.setWechatOpenId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setPaymentCardPrintNum(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setPaymentOnlineUnDiscount(cursor.getFloat(offset + 31));
        entity.setPaymentBuyerMoney(cursor.getFloat(offset + 32));
        entity.setPaymentReceiptMoney(cursor.getFloat(offset + 33));
        entity.setMerchantNum(cursor.getInt(offset + 34));
        entity.setStallNum(cursor.getInt(offset + 35));
        entity.setVipInfoJson(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Payment entity, long rowId) {
        return entity.getPaymentNo();
    }
    
    @Override
    public String getKey(Payment entity) {
        if(entity != null) {
            return entity.getPaymentNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Payment entity) {
        return entity.getPaymentNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "payments" to-many relationship of PosOrder. */
    public List<Payment> _queryPosOrder_Payments(String orderNo) {
        synchronized (this) {
            if (posOrder_PaymentsQuery == null) {
                QueryBuilder<Payment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderNo.eq(null));
                posOrder_PaymentsQuery = queryBuilder.build();
            }
        }
        Query<Payment> query = posOrder_PaymentsQuery.forCurrentThread();
        query.setParameter(0, orderNo);
        return query.list();
    }

}
