package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.ItemCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM_CATEGORY".
*/
public class ItemCategoryDao extends AbstractDao<ItemCategory, String> {

    public static final String TABLENAME = "ITEM_CATEGORY";

    /**
     * Properties of entity ItemCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Category_code = new Property(0, String.class, "category_code", true, "CATEGORY_CODE");
        public final static Property Category_name = new Property(1, String.class, "category_name", false, "CATEGORY_NAME");
        public final static Property Parent_category_code = new Property(2, String.class, "parent_category_code", false, "PARENT_CATEGORY_CODE");
        public final static Property Can_not_sale_no_store_item = new Property(3, Boolean.class, "can_not_sale_no_store_item", false, "CAN_NOT_SALE_NO_STORE_ITEM");
        public final static Property Pos_item_type_sn = new Property(4, Integer.class, "pos_item_type_sn", false, "POS_ITEM_TYPE_SN");
        public final static Property Hierarchy = new Property(5, Integer.class, "hierarchy", false, "HIERARCHY");
        public final static Property Second_category_code = new Property(6, String.class, "second_category_code", false, "SECOND_CATEGORY_CODE");
    }


    public ItemCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public ItemCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM_CATEGORY\" (" + //
                "\"CATEGORY_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: category_code
                "\"CATEGORY_NAME\" TEXT," + // 1: category_name
                "\"PARENT_CATEGORY_CODE\" TEXT," + // 2: parent_category_code
                "\"CAN_NOT_SALE_NO_STORE_ITEM\" INTEGER," + // 3: can_not_sale_no_store_item
                "\"POS_ITEM_TYPE_SN\" INTEGER," + // 4: pos_item_type_sn
                "\"HIERARCHY\" INTEGER," + // 5: hierarchy
                "\"SECOND_CATEGORY_CODE\" TEXT);"); // 6: second_category_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM_CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemCategory entity) {
        stmt.clearBindings();
 
        String category_code = entity.getCategory_code();
        if (category_code != null) {
            stmt.bindString(1, category_code);
        }
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(2, category_name);
        }
 
        String parent_category_code = entity.getParent_category_code();
        if (parent_category_code != null) {
            stmt.bindString(3, parent_category_code);
        }
 
        Boolean can_not_sale_no_store_item = entity.getCan_not_sale_no_store_item();
        if (can_not_sale_no_store_item != null) {
            stmt.bindLong(4, can_not_sale_no_store_item ? 1L: 0L);
        }
 
        Integer pos_item_type_sn = entity.getPos_item_type_sn();
        if (pos_item_type_sn != null) {
            stmt.bindLong(5, pos_item_type_sn);
        }
 
        Integer hierarchy = entity.getHierarchy();
        if (hierarchy != null) {
            stmt.bindLong(6, hierarchy);
        }
 
        String second_category_code = entity.getSecond_category_code();
        if (second_category_code != null) {
            stmt.bindString(7, second_category_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemCategory entity) {
        stmt.clearBindings();
 
        String category_code = entity.getCategory_code();
        if (category_code != null) {
            stmt.bindString(1, category_code);
        }
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(2, category_name);
        }
 
        String parent_category_code = entity.getParent_category_code();
        if (parent_category_code != null) {
            stmt.bindString(3, parent_category_code);
        }
 
        Boolean can_not_sale_no_store_item = entity.getCan_not_sale_no_store_item();
        if (can_not_sale_no_store_item != null) {
            stmt.bindLong(4, can_not_sale_no_store_item ? 1L: 0L);
        }
 
        Integer pos_item_type_sn = entity.getPos_item_type_sn();
        if (pos_item_type_sn != null) {
            stmt.bindLong(5, pos_item_type_sn);
        }
 
        Integer hierarchy = entity.getHierarchy();
        if (hierarchy != null) {
            stmt.bindLong(6, hierarchy);
        }
 
        String second_category_code = entity.getSecond_category_code();
        if (second_category_code != null) {
            stmt.bindString(7, second_category_code);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ItemCategory readEntity(Cursor cursor, int offset) {
        ItemCategory entity = new ItemCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // category_code
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parent_category_code
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // can_not_sale_no_store_item
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // pos_item_type_sn
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // hierarchy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // second_category_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemCategory entity, int offset) {
        entity.setCategory_code(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCategory_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent_category_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCan_not_sale_no_store_item(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setPos_item_type_sn(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHierarchy(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSecond_category_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ItemCategory entity, long rowId) {
        return entity.getCategory_code();
    }
    
    @Override
    public String getKey(ItemCategory entity) {
        if(entity != null) {
            return entity.getCategory_code();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemCategory entity) {
        return entity.getCategory_code() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
