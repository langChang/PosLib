package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.ItemBar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM_BAR".
*/
public class ItemBarDao extends AbstractDao<ItemBar, Long> {

    public static final String TABLENAME = "ITEM_BAR";

    /**
     * Properties of entity ItemBar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Item_num = new Property(1, Long.class, "item_num", false, "ITEM_NUM");
        public final static Property Item_bar_num = new Property(2, int.class, "item_bar_num", false, "ITEM_BAR_NUM");
        public final static Property Item_bar_code = new Property(3, String.class, "item_bar_code", false, "ITEM_BAR_CODE");
        public final static Property Item_bar_rate = new Property(4, Float.class, "item_bar_rate", false, "ITEM_BAR_RATE");
    }

    private Query<ItemBar> posItem_Item_bar_listQuery;

    public ItemBarDao(DaoConfig config) {
        super(config);
    }
    
    public ItemBarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM_BAR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM_NUM\" INTEGER," + // 1: item_num
                "\"ITEM_BAR_NUM\" INTEGER NOT NULL ," + // 2: item_bar_num
                "\"ITEM_BAR_CODE\" TEXT," + // 3: item_bar_code
                "\"ITEM_BAR_RATE\" REAL);"); // 4: item_bar_rate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM_BAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemBar entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(2, item_num);
        }
        stmt.bindLong(3, entity.getItem_bar_num());
 
        String item_bar_code = entity.getItem_bar_code();
        if (item_bar_code != null) {
            stmt.bindString(4, item_bar_code);
        }
 
        Float item_bar_rate = entity.getItem_bar_rate();
        if (item_bar_rate != null) {
            stmt.bindDouble(5, item_bar_rate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemBar entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(2, item_num);
        }
        stmt.bindLong(3, entity.getItem_bar_num());
 
        String item_bar_code = entity.getItem_bar_code();
        if (item_bar_code != null) {
            stmt.bindString(4, item_bar_code);
        }
 
        Float item_bar_rate = entity.getItem_bar_rate();
        if (item_bar_rate != null) {
            stmt.bindDouble(5, item_bar_rate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ItemBar readEntity(Cursor cursor, int offset) {
        ItemBar entity = new ItemBar( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // item_num
            cursor.getInt(offset + 2), // item_bar_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // item_bar_code
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4) // item_bar_rate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemBar entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_num(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setItem_bar_num(cursor.getInt(offset + 2));
        entity.setItem_bar_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItem_bar_rate(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ItemBar entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ItemBar entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemBar entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "item_bar_list" to-many relationship of PosItem. */
    public List<ItemBar> _queryPosItem_Item_bar_list(Long item_num) {
        synchronized (this) {
            if (posItem_Item_bar_listQuery == null) {
                QueryBuilder<ItemBar> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Item_num.eq(null));
                posItem_Item_bar_listQuery = queryBuilder.build();
            }
        }
        Query<ItemBar> query = posItem_Item_bar_listQuery.forCurrentThread();
        query.setParameter(0, item_num);
        return query.list();
    }

}
