package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.PointOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT_ORDER".
*/
public class PointOrderDao extends AbstractDao<PointOrder, String> {

    public static final String TABLENAME = "POINT_ORDER";

    /**
     * Properties of entity PointOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Point_order_fid = new Property(0, String.class, "point_order_fid", true, "point_order_fid");
        public final static Property System_book_code = new Property(1, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Branch_num = new Property(2, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Point_order_name = new Property(3, String.class, "point_order_name", false, "POINT_ORDER_NAME");
        public final static Property Point_order_start = new Property(4, String.class, "point_order_start", false, "POINT_ORDER_START");
        public final static Property Point_order_end = new Property(5, String.class, "point_order_end", false, "POINT_ORDER_END");
        public final static Property Point_order_applied_branch = new Property(6, String.class, "point_order_applied_branch", false, "POINT_ORDER_APPLIED_BRANCH");
        public final static Property Point_order_creat_or = new Property(7, String.class, "point_order_creat_or", false, "POINT_ORDER_CREAT_OR");
        public final static Property Point_order_createTime = new Property(8, String.class, "point_order_createTime", false, "POINT_ORDER_CREATE_TIME");
        public final static Property Point_order_audit_or = new Property(9, String.class, "point_order_audit_or", false, "POINT_ORDER_AUDIT_OR");
        public final static Property Point_order_audit_time = new Property(10, String.class, "point_order_audit_time", false, "POINT_ORDER_AUDIT_TIME");
        public final static Property Point_order_cancel_operator = new Property(11, String.class, "point_order_cancel_operator", false, "POINT_ORDER_CANCEL_OPERATOR");
        public final static Property Poin_order_cancel_time = new Property(12, String.class, "poin_order_cancel_time", false, "POIN_ORDER_CANCEL_TIME");
        public final static Property Point_state_name = new Property(13, String.class, "point_state_name", false, "POINT_STATE_NAME");
        public final static Property Point_state_code = new Property(14, int.class, "point_state_code", false, "POINT_STATE_CODE");
        public final static Property Point_order_memo = new Property(15, String.class, "point_order_memo", false, "POINT_ORDER_MEMO");
    }

    private DaoSession daoSession;


    public PointOrderDao(DaoConfig config) {
        super(config);
    }
    
    public PointOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT_ORDER\" (" + //
                "\"point_order_fid\" TEXT PRIMARY KEY NOT NULL ," + // 0: point_order_fid
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: system_book_code
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 2: branch_num
                "\"POINT_ORDER_NAME\" TEXT," + // 3: point_order_name
                "\"POINT_ORDER_START\" TEXT," + // 4: point_order_start
                "\"POINT_ORDER_END\" TEXT," + // 5: point_order_end
                "\"POINT_ORDER_APPLIED_BRANCH\" TEXT," + // 6: point_order_applied_branch
                "\"POINT_ORDER_CREAT_OR\" TEXT," + // 7: point_order_creat_or
                "\"POINT_ORDER_CREATE_TIME\" TEXT," + // 8: point_order_createTime
                "\"POINT_ORDER_AUDIT_OR\" TEXT," + // 9: point_order_audit_or
                "\"POINT_ORDER_AUDIT_TIME\" TEXT," + // 10: point_order_audit_time
                "\"POINT_ORDER_CANCEL_OPERATOR\" TEXT," + // 11: point_order_cancel_operator
                "\"POIN_ORDER_CANCEL_TIME\" TEXT," + // 12: poin_order_cancel_time
                "\"POINT_STATE_NAME\" TEXT," + // 13: point_state_name
                "\"POINT_STATE_CODE\" INTEGER NOT NULL ," + // 14: point_state_code
                "\"POINT_ORDER_MEMO\" TEXT);"); // 15: point_order_memo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PointOrder entity) {
        stmt.clearBindings();
 
        String point_order_fid = entity.getPoint_order_fid();
        if (point_order_fid != null) {
            stmt.bindString(1, point_order_fid);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
        stmt.bindLong(3, entity.getBranch_num());
 
        String point_order_name = entity.getPoint_order_name();
        if (point_order_name != null) {
            stmt.bindString(4, point_order_name);
        }
 
        String point_order_start = entity.getPoint_order_start();
        if (point_order_start != null) {
            stmt.bindString(5, point_order_start);
        }
 
        String point_order_end = entity.getPoint_order_end();
        if (point_order_end != null) {
            stmt.bindString(6, point_order_end);
        }
 
        String point_order_applied_branch = entity.getPoint_order_applied_branch();
        if (point_order_applied_branch != null) {
            stmt.bindString(7, point_order_applied_branch);
        }
 
        String point_order_creat_or = entity.getPoint_order_creat_or();
        if (point_order_creat_or != null) {
            stmt.bindString(8, point_order_creat_or);
        }
 
        String point_order_createTime = entity.getPoint_order_createTime();
        if (point_order_createTime != null) {
            stmt.bindString(9, point_order_createTime);
        }
 
        String point_order_audit_or = entity.getPoint_order_audit_or();
        if (point_order_audit_or != null) {
            stmt.bindString(10, point_order_audit_or);
        }
 
        String point_order_audit_time = entity.getPoint_order_audit_time();
        if (point_order_audit_time != null) {
            stmt.bindString(11, point_order_audit_time);
        }
 
        String point_order_cancel_operator = entity.getPoint_order_cancel_operator();
        if (point_order_cancel_operator != null) {
            stmt.bindString(12, point_order_cancel_operator);
        }
 
        String poin_order_cancel_time = entity.getPoin_order_cancel_time();
        if (poin_order_cancel_time != null) {
            stmt.bindString(13, poin_order_cancel_time);
        }
 
        String point_state_name = entity.getPoint_state_name();
        if (point_state_name != null) {
            stmt.bindString(14, point_state_name);
        }
        stmt.bindLong(15, entity.getPoint_state_code());
 
        String point_order_memo = entity.getPoint_order_memo();
        if (point_order_memo != null) {
            stmt.bindString(16, point_order_memo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PointOrder entity) {
        stmt.clearBindings();
 
        String point_order_fid = entity.getPoint_order_fid();
        if (point_order_fid != null) {
            stmt.bindString(1, point_order_fid);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
        stmt.bindLong(3, entity.getBranch_num());
 
        String point_order_name = entity.getPoint_order_name();
        if (point_order_name != null) {
            stmt.bindString(4, point_order_name);
        }
 
        String point_order_start = entity.getPoint_order_start();
        if (point_order_start != null) {
            stmt.bindString(5, point_order_start);
        }
 
        String point_order_end = entity.getPoint_order_end();
        if (point_order_end != null) {
            stmt.bindString(6, point_order_end);
        }
 
        String point_order_applied_branch = entity.getPoint_order_applied_branch();
        if (point_order_applied_branch != null) {
            stmt.bindString(7, point_order_applied_branch);
        }
 
        String point_order_creat_or = entity.getPoint_order_creat_or();
        if (point_order_creat_or != null) {
            stmt.bindString(8, point_order_creat_or);
        }
 
        String point_order_createTime = entity.getPoint_order_createTime();
        if (point_order_createTime != null) {
            stmt.bindString(9, point_order_createTime);
        }
 
        String point_order_audit_or = entity.getPoint_order_audit_or();
        if (point_order_audit_or != null) {
            stmt.bindString(10, point_order_audit_or);
        }
 
        String point_order_audit_time = entity.getPoint_order_audit_time();
        if (point_order_audit_time != null) {
            stmt.bindString(11, point_order_audit_time);
        }
 
        String point_order_cancel_operator = entity.getPoint_order_cancel_operator();
        if (point_order_cancel_operator != null) {
            stmt.bindString(12, point_order_cancel_operator);
        }
 
        String poin_order_cancel_time = entity.getPoin_order_cancel_time();
        if (poin_order_cancel_time != null) {
            stmt.bindString(13, poin_order_cancel_time);
        }
 
        String point_state_name = entity.getPoint_state_name();
        if (point_state_name != null) {
            stmt.bindString(14, point_state_name);
        }
        stmt.bindLong(15, entity.getPoint_state_code());
 
        String point_order_memo = entity.getPoint_order_memo();
        if (point_order_memo != null) {
            stmt.bindString(16, point_order_memo);
        }
    }

    @Override
    protected final void attachEntity(PointOrder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PointOrder readEntity(Cursor cursor, int offset) {
        PointOrder entity = new PointOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // point_order_fid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // system_book_code
            cursor.getInt(offset + 2), // branch_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // point_order_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // point_order_start
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // point_order_end
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // point_order_applied_branch
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // point_order_creat_or
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // point_order_createTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // point_order_audit_or
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // point_order_audit_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // point_order_cancel_operator
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // poin_order_cancel_time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // point_state_name
            cursor.getInt(offset + 14), // point_state_code
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // point_order_memo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PointOrder entity, int offset) {
        entity.setPoint_order_fid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSystem_book_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranch_num(cursor.getInt(offset + 2));
        entity.setPoint_order_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPoint_order_start(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPoint_order_end(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPoint_order_applied_branch(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPoint_order_creat_or(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPoint_order_createTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPoint_order_audit_or(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPoint_order_audit_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPoint_order_cancel_operator(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPoin_order_cancel_time(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPoint_state_name(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPoint_state_code(cursor.getInt(offset + 14));
        entity.setPoint_order_memo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PointOrder entity, long rowId) {
        return entity.getPoint_order_fid();
    }
    
    @Override
    public String getKey(PointOrder entity) {
        if(entity != null) {
            return entity.getPoint_order_fid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PointOrder entity) {
        return entity.getPoint_order_fid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
