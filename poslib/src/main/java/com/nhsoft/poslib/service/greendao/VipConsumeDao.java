package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.VipConsume;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIP_CONSUME".
*/
public class VipConsumeDao extends AbstractDao<VipConsume, Long> {

    public static final String TABLENAME = "VIP_CONSUME";

    /**
     * Properties of entity VipConsume.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property ConsumeMoney = new Property(2, String.class, "consumeMoney", false, "CONSUME_MONEY");
        public final static Property PayType = new Property(3, String.class, "payType", false, "PAY_TYPE");
        public final static Property PayTypeCode = new Property(4, String.class, "payTypeCode", false, "PAY_TYPE_CODE");
        public final static Property BranchNum = new Property(5, String.class, "branchNum", false, "BRANCH_NUM");
        public final static Property ShiftTableNum = new Property(6, String.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property Operator = new Property(7, String.class, "operator", false, "OPERATOR");
        public final static Property SystemBookCode = new Property(8, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
    }


    public VipConsumeDao(DaoConfig config) {
        super(config);
    }
    
    public VipConsumeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIP_CONSUME\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"CONSUME_MONEY\" TEXT," + // 2: consumeMoney
                "\"PAY_TYPE\" TEXT," + // 3: payType
                "\"PAY_TYPE_CODE\" TEXT," + // 4: payTypeCode
                "\"BRANCH_NUM\" TEXT," + // 5: branchNum
                "\"SHIFT_TABLE_NUM\" TEXT," + // 6: shiftTableNum
                "\"OPERATOR\" TEXT," + // 7: operator
                "\"SYSTEM_BOOK_CODE\" TEXT);"); // 8: systemBookCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIP_CONSUME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VipConsume entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String consumeMoney = entity.getConsumeMoney();
        if (consumeMoney != null) {
            stmt.bindString(3, consumeMoney);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(4, payType);
        }
 
        String payTypeCode = entity.getPayTypeCode();
        if (payTypeCode != null) {
            stmt.bindString(5, payTypeCode);
        }
 
        String branchNum = entity.getBranchNum();
        if (branchNum != null) {
            stmt.bindString(6, branchNum);
        }
 
        String shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindString(7, shiftTableNum);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(8, operator);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(9, systemBookCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VipConsume entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String consumeMoney = entity.getConsumeMoney();
        if (consumeMoney != null) {
            stmt.bindString(3, consumeMoney);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(4, payType);
        }
 
        String payTypeCode = entity.getPayTypeCode();
        if (payTypeCode != null) {
            stmt.bindString(5, payTypeCode);
        }
 
        String branchNum = entity.getBranchNum();
        if (branchNum != null) {
            stmt.bindString(6, branchNum);
        }
 
        String shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindString(7, shiftTableNum);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(8, operator);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(9, systemBookCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VipConsume readEntity(Cursor cursor, int offset) {
        VipConsume entity = new VipConsume( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // consumeMoney
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // payType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // payTypeCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // branchNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shiftTableNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // operator
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // systemBookCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VipConsume entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setConsumeMoney(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPayType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPayTypeCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBranchNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShiftTableNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOperator(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSystemBookCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VipConsume entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VipConsume entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VipConsume entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
