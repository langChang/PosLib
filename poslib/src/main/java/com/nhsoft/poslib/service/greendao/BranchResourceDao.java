package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.BranchResource;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRANCH_RESOURCE".
*/
public class BranchResourceDao extends AbstractDao<BranchResource, Long> {

    public static final String TABLENAME = "BRANCH_RESOURCE";

    /**
     * Properties of entity BranchResource.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property SystemBookCode = new Property(1, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(2, String.class, "branchNum", false, "BRANCH_NUM");
        public final static Property BranchResourceName = new Property(3, String.class, "branchResourceName", false, "BRANCH_RESOURCE_NAME");
        public final static Property BranchResourceParam = new Property(4, String.class, "branchResourceParam", false, "BRANCH_RESOURCE_PARAM");
    }


    public BranchResourceDao(DaoConfig config) {
        super(config);
    }
    
    public BranchResourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRANCH_RESOURCE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: systemBookCode
                "\"BRANCH_NUM\" TEXT," + // 2: branchNum
                "\"BRANCH_RESOURCE_NAME\" TEXT," + // 3: branchResourceName
                "\"BRANCH_RESOURCE_PARAM\" TEXT);"); // 4: branchResourceParam
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRANCH_RESOURCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BranchResource entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(2, systemBookCode);
        }
 
        String branchNum = entity.getBranchNum();
        if (branchNum != null) {
            stmt.bindString(3, branchNum);
        }
 
        String branchResourceName = entity.getBranchResourceName();
        if (branchResourceName != null) {
            stmt.bindString(4, branchResourceName);
        }
 
        String branchResourceParam = entity.getBranchResourceParam();
        if (branchResourceParam != null) {
            stmt.bindString(5, branchResourceParam);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BranchResource entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(2, systemBookCode);
        }
 
        String branchNum = entity.getBranchNum();
        if (branchNum != null) {
            stmt.bindString(3, branchNum);
        }
 
        String branchResourceName = entity.getBranchResourceName();
        if (branchResourceName != null) {
            stmt.bindString(4, branchResourceName);
        }
 
        String branchResourceParam = entity.getBranchResourceParam();
        if (branchResourceParam != null) {
            stmt.bindString(5, branchResourceParam);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BranchResource readEntity(Cursor cursor, int offset) {
        BranchResource entity = new BranchResource( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // systemBookCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // branchNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // branchResourceName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // branchResourceParam
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BranchResource entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystemBookCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranchNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBranchResourceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranchResourceParam(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BranchResource entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BranchResource entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BranchResource entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
