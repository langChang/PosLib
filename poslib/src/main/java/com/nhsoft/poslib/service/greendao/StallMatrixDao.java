package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.nongmao.StallMatrix;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STALL_MATRIX".
*/
public class StallMatrixDao extends AbstractDao<StallMatrix, Long> {

    public static final String TABLENAME = "STALL_MATRIX";

    /**
     * Properties of entity StallMatrix.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Branch_num = new Property(1, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Item_grade_num = new Property(2, int.class, "item_grade_num", false, "ITEM_GRADE_NUM");
        public final static Property Item_num = new Property(3, int.class, "item_num", false, "ITEM_NUM");
        public final static Property Merchant_num = new Property(4, int.class, "merchant_num", false, "MERCHANT_NUM");
        public final static Property Stall_matrix_level2_price = new Property(5, float.class, "stall_matrix_level2_price", false, "STALL_MATRIX_LEVEL2_PRICE");
        public final static Property Stall_matrix_num = new Property(6, int.class, "stall_matrix_num", false, "STALL_MATRIX_NUM");
        public final static Property Stall_matrix_regular_price = new Property(7, float.class, "stall_matrix_regular_price", false, "STALL_MATRIX_REGULAR_PRICE");
        public final static Property Stall_num = new Property(8, int.class, "stall_num", false, "STALL_NUM");
        public final static Property System_book_code = new Property(9, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
    }


    public StallMatrixDao(DaoConfig config) {
        super(config);
    }
    
    public StallMatrixDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STALL_MATRIX\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 1: branch_num
                "\"ITEM_GRADE_NUM\" INTEGER NOT NULL ," + // 2: item_grade_num
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 3: item_num
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 4: merchant_num
                "\"STALL_MATRIX_LEVEL2_PRICE\" REAL NOT NULL ," + // 5: stall_matrix_level2_price
                "\"STALL_MATRIX_NUM\" INTEGER NOT NULL ," + // 6: stall_matrix_num
                "\"STALL_MATRIX_REGULAR_PRICE\" REAL NOT NULL ," + // 7: stall_matrix_regular_price
                "\"STALL_NUM\" INTEGER NOT NULL ," + // 8: stall_num
                "\"SYSTEM_BOOK_CODE\" TEXT);"); // 9: system_book_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STALL_MATRIX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StallMatrix entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBranch_num());
        stmt.bindLong(3, entity.getItem_grade_num());
        stmt.bindLong(4, entity.getItem_num());
        stmt.bindLong(5, entity.getMerchant_num());
        stmt.bindDouble(6, entity.getStall_matrix_level2_price());
        stmt.bindLong(7, entity.getStall_matrix_num());
        stmt.bindDouble(8, entity.getStall_matrix_regular_price());
        stmt.bindLong(9, entity.getStall_num());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(10, system_book_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StallMatrix entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBranch_num());
        stmt.bindLong(3, entity.getItem_grade_num());
        stmt.bindLong(4, entity.getItem_num());
        stmt.bindLong(5, entity.getMerchant_num());
        stmt.bindDouble(6, entity.getStall_matrix_level2_price());
        stmt.bindLong(7, entity.getStall_matrix_num());
        stmt.bindDouble(8, entity.getStall_matrix_regular_price());
        stmt.bindLong(9, entity.getStall_num());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(10, system_book_code);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StallMatrix readEntity(Cursor cursor, int offset) {
        StallMatrix entity = new StallMatrix( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // branch_num
            cursor.getInt(offset + 2), // item_grade_num
            cursor.getInt(offset + 3), // item_num
            cursor.getInt(offset + 4), // merchant_num
            cursor.getFloat(offset + 5), // stall_matrix_level2_price
            cursor.getInt(offset + 6), // stall_matrix_num
            cursor.getFloat(offset + 7), // stall_matrix_regular_price
            cursor.getInt(offset + 8), // stall_num
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // system_book_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StallMatrix entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBranch_num(cursor.getInt(offset + 1));
        entity.setItem_grade_num(cursor.getInt(offset + 2));
        entity.setItem_num(cursor.getInt(offset + 3));
        entity.setMerchant_num(cursor.getInt(offset + 4));
        entity.setStall_matrix_level2_price(cursor.getFloat(offset + 5));
        entity.setStall_matrix_num(cursor.getInt(offset + 6));
        entity.setStall_matrix_regular_price(cursor.getFloat(offset + 7));
        entity.setStall_num(cursor.getInt(offset + 8));
        entity.setSystem_book_code(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StallMatrix entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StallMatrix entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StallMatrix entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
