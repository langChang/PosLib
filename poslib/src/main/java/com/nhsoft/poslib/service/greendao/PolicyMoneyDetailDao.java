package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.PolicyMoneyDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POLICY_MONEY_DETAIL".
*/
public class PolicyMoneyDetailDao extends AbstractDao<PolicyMoneyDetail, Long> {

    public static final String TABLENAME = "POLICY_MONEY_DETAIL";

    /**
     * Properties of entity PolicyMoneyDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Promotion_money_no = new Property(1, String.class, "promotion_money_no", false, "PROMOTION_MONEY_NO");
        public final static Property Promotion_money_detail_num = new Property(2, int.class, "promotion_money_detail_num", false, "PROMOTION_MONEY_DETAIL_NUM");
        public final static Property Item_num = new Property(3, int.class, "item_num", false, "ITEM_NUM");
        public final static Property Promotion_money_detail_special_price = new Property(4, float.class, "promotion_money_detail_special_price", false, "PROMOTION_MONEY_DETAIL_SPECIAL_PRICE");
        public final static Property Promotion_money_detail_amount_limit = new Property(5, float.class, "promotion_money_detail_amount_limit", false, "PROMOTION_MONEY_DETAIL_AMOUNT_LIMIT");
        public final static Property System_book_code = new Property(6, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Branch_num = new Property(7, int.class, "branch_num", false, "BRANCH_NUM");
    }

    private Query<PolicyMoneyDetail> policyMoney_Policy_promotion_money_detailsQuery;

    public PolicyMoneyDetailDao(DaoConfig config) {
        super(config);
    }
    
    public PolicyMoneyDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POLICY_MONEY_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROMOTION_MONEY_NO\" TEXT," + // 1: promotion_money_no
                "\"PROMOTION_MONEY_DETAIL_NUM\" INTEGER NOT NULL ," + // 2: promotion_money_detail_num
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 3: item_num
                "\"PROMOTION_MONEY_DETAIL_SPECIAL_PRICE\" REAL NOT NULL ," + // 4: promotion_money_detail_special_price
                "\"PROMOTION_MONEY_DETAIL_AMOUNT_LIMIT\" REAL NOT NULL ," + // 5: promotion_money_detail_amount_limit
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 6: system_book_code
                "\"BRANCH_NUM\" INTEGER NOT NULL );"); // 7: branch_num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POLICY_MONEY_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PolicyMoneyDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String promotion_money_no = entity.getPromotion_money_no();
        if (promotion_money_no != null) {
            stmt.bindString(2, promotion_money_no);
        }
        stmt.bindLong(3, entity.getPromotion_money_detail_num());
        stmt.bindLong(4, entity.getItem_num());
        stmt.bindDouble(5, entity.getPromotion_money_detail_special_price());
        stmt.bindDouble(6, entity.getPromotion_money_detail_amount_limit());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(7, system_book_code);
        }
        stmt.bindLong(8, entity.getBranch_num());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PolicyMoneyDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String promotion_money_no = entity.getPromotion_money_no();
        if (promotion_money_no != null) {
            stmt.bindString(2, promotion_money_no);
        }
        stmt.bindLong(3, entity.getPromotion_money_detail_num());
        stmt.bindLong(4, entity.getItem_num());
        stmt.bindDouble(5, entity.getPromotion_money_detail_special_price());
        stmt.bindDouble(6, entity.getPromotion_money_detail_amount_limit());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(7, system_book_code);
        }
        stmt.bindLong(8, entity.getBranch_num());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PolicyMoneyDetail readEntity(Cursor cursor, int offset) {
        PolicyMoneyDetail entity = new PolicyMoneyDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // promotion_money_no
            cursor.getInt(offset + 2), // promotion_money_detail_num
            cursor.getInt(offset + 3), // item_num
            cursor.getFloat(offset + 4), // promotion_money_detail_special_price
            cursor.getFloat(offset + 5), // promotion_money_detail_amount_limit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // system_book_code
            cursor.getInt(offset + 7) // branch_num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PolicyMoneyDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPromotion_money_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPromotion_money_detail_num(cursor.getInt(offset + 2));
        entity.setItem_num(cursor.getInt(offset + 3));
        entity.setPromotion_money_detail_special_price(cursor.getFloat(offset + 4));
        entity.setPromotion_money_detail_amount_limit(cursor.getFloat(offset + 5));
        entity.setSystem_book_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBranch_num(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PolicyMoneyDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PolicyMoneyDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PolicyMoneyDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "policy_promotion_money_details" to-many relationship of PolicyMoney. */
    public List<PolicyMoneyDetail> _queryPolicyMoney_Policy_promotion_money_details(String promotion_money_no) {
        synchronized (this) {
            if (policyMoney_Policy_promotion_money_detailsQuery == null) {
                QueryBuilder<PolicyMoneyDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Promotion_money_no.eq(null));
                policyMoney_Policy_promotion_money_detailsQuery = queryBuilder.build();
            }
        }
        Query<PolicyMoneyDetail> query = policyMoney_Policy_promotion_money_detailsQuery.forCurrentThread();
        query.setParameter(0, promotion_money_no);
        return query.list();
    }

}
