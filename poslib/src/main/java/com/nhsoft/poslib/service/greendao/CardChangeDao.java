package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.CardChange;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_CHANGE".
*/
public class CardChangeDao extends AbstractDao<CardChange, String> {

    public static final String TABLENAME = "CARD_CHANGE";

    /**
     * Properties of entity CardChange.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Card_change_fid = new Property(0, String.class, "card_change_fid", true, "CARD_CHANGE_FID");
        public final static Property Card_user_num = new Property(1, int.class, "card_user_num", false, "CARD_USER_NUM");
        public final static Property System_book_code = new Property(2, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Branch_num = new Property(3, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Shift_table_num = new Property(4, int.class, "shift_table_num", false, "SHIFT_TABLE_NUM");
        public final static Property Shift_table_bizday = new Property(5, String.class, "shift_table_bizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property Card_change_date = new Property(6, String.class, "card_change_date", false, "CARD_CHANGE_DATE");
        public final static Property Card_change_type = new Property(7, String.class, "card_change_type", false, "CARD_CHANGE_TYPE");
        public final static Property Card_change_money = new Property(8, float.class, "card_change_money", false, "CARD_CHANGE_MONEY");
        public final static Property Card_change_balance = new Property(9, float.class, "card_change_balance", false, "CARD_CHANGE_BALANCE");
        public final static Property Card_change_memo = new Property(10, String.class, "card_change_memo", false, "CARD_CHANGE_MEMO");
        public final static Property Card_change_operator = new Property(11, String.class, "card_change_operator", false, "CARD_CHANGE_OPERATOR");
        public final static Property Card_change_machine = new Property(12, String.class, "card_change_machine", false, "CARD_CHANGE_MACHINE");
        public final static Property Card_change_synch_flag = new Property(13, boolean.class, "card_change_synch_flag", false, "CARD_CHANGE_SYNCH_FLAG");
    }


    public CardChangeDao(DaoConfig config) {
        super(config);
    }
    
    public CardChangeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_CHANGE\" (" + //
                "\"CARD_CHANGE_FID\" TEXT PRIMARY KEY NOT NULL ," + // 0: card_change_fid
                "\"CARD_USER_NUM\" INTEGER NOT NULL ," + // 1: card_user_num
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 2: system_book_code
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 3: branch_num
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 4: shift_table_num
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 5: shift_table_bizday
                "\"CARD_CHANGE_DATE\" TEXT," + // 6: card_change_date
                "\"CARD_CHANGE_TYPE\" TEXT," + // 7: card_change_type
                "\"CARD_CHANGE_MONEY\" REAL NOT NULL ," + // 8: card_change_money
                "\"CARD_CHANGE_BALANCE\" REAL NOT NULL ," + // 9: card_change_balance
                "\"CARD_CHANGE_MEMO\" TEXT," + // 10: card_change_memo
                "\"CARD_CHANGE_OPERATOR\" TEXT," + // 11: card_change_operator
                "\"CARD_CHANGE_MACHINE\" TEXT," + // 12: card_change_machine
                "\"CARD_CHANGE_SYNCH_FLAG\" INTEGER NOT NULL );"); // 13: card_change_synch_flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_CHANGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardChange entity) {
        stmt.clearBindings();
 
        String card_change_fid = entity.getCard_change_fid();
        if (card_change_fid != null) {
            stmt.bindString(1, card_change_fid);
        }
        stmt.bindLong(2, entity.getCard_user_num());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(3, system_book_code);
        }
        stmt.bindLong(4, entity.getBranch_num());
        stmt.bindLong(5, entity.getShift_table_num());
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(6, shift_table_bizday);
        }
 
        String card_change_date = entity.getCard_change_date();
        if (card_change_date != null) {
            stmt.bindString(7, card_change_date);
        }
 
        String card_change_type = entity.getCard_change_type();
        if (card_change_type != null) {
            stmt.bindString(8, card_change_type);
        }
        stmt.bindDouble(9, entity.getCard_change_money());
        stmt.bindDouble(10, entity.getCard_change_balance());
 
        String card_change_memo = entity.getCard_change_memo();
        if (card_change_memo != null) {
            stmt.bindString(11, card_change_memo);
        }
 
        String card_change_operator = entity.getCard_change_operator();
        if (card_change_operator != null) {
            stmt.bindString(12, card_change_operator);
        }
 
        String card_change_machine = entity.getCard_change_machine();
        if (card_change_machine != null) {
            stmt.bindString(13, card_change_machine);
        }
        stmt.bindLong(14, entity.getCard_change_synch_flag() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardChange entity) {
        stmt.clearBindings();
 
        String card_change_fid = entity.getCard_change_fid();
        if (card_change_fid != null) {
            stmt.bindString(1, card_change_fid);
        }
        stmt.bindLong(2, entity.getCard_user_num());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(3, system_book_code);
        }
        stmt.bindLong(4, entity.getBranch_num());
        stmt.bindLong(5, entity.getShift_table_num());
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(6, shift_table_bizday);
        }
 
        String card_change_date = entity.getCard_change_date();
        if (card_change_date != null) {
            stmt.bindString(7, card_change_date);
        }
 
        String card_change_type = entity.getCard_change_type();
        if (card_change_type != null) {
            stmt.bindString(8, card_change_type);
        }
        stmt.bindDouble(9, entity.getCard_change_money());
        stmt.bindDouble(10, entity.getCard_change_balance());
 
        String card_change_memo = entity.getCard_change_memo();
        if (card_change_memo != null) {
            stmt.bindString(11, card_change_memo);
        }
 
        String card_change_operator = entity.getCard_change_operator();
        if (card_change_operator != null) {
            stmt.bindString(12, card_change_operator);
        }
 
        String card_change_machine = entity.getCard_change_machine();
        if (card_change_machine != null) {
            stmt.bindString(13, card_change_machine);
        }
        stmt.bindLong(14, entity.getCard_change_synch_flag() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CardChange readEntity(Cursor cursor, int offset) {
        CardChange entity = new CardChange( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // card_change_fid
            cursor.getInt(offset + 1), // card_user_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // system_book_code
            cursor.getInt(offset + 3), // branch_num
            cursor.getInt(offset + 4), // shift_table_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shift_table_bizday
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // card_change_date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // card_change_type
            cursor.getFloat(offset + 8), // card_change_money
            cursor.getFloat(offset + 9), // card_change_balance
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // card_change_memo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // card_change_operator
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // card_change_machine
            cursor.getShort(offset + 13) != 0 // card_change_synch_flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardChange entity, int offset) {
        entity.setCard_change_fid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCard_user_num(cursor.getInt(offset + 1));
        entity.setSystem_book_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBranch_num(cursor.getInt(offset + 3));
        entity.setShift_table_num(cursor.getInt(offset + 4));
        entity.setShift_table_bizday(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCard_change_date(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCard_change_type(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCard_change_money(cursor.getFloat(offset + 8));
        entity.setCard_change_balance(cursor.getFloat(offset + 9));
        entity.setCard_change_memo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCard_change_operator(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCard_change_machine(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCard_change_synch_flag(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(CardChange entity, long rowId) {
        return entity.getCard_change_fid();
    }
    
    @Override
    public String getKey(CardChange entity) {
        if(entity != null) {
            return entity.getCard_change_fid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CardChange entity) {
        return entity.getCard_change_fid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
