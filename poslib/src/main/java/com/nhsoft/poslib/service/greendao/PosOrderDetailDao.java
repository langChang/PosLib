package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.order.PosOrderDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS_ORDER_DETAIL".
*/
public class PosOrderDetailDao extends AbstractDao<PosOrderDetail, Long> {

    public static final String TABLENAME = "POS_ORDER_DETAIL";

    /**
     * Properties of entity PosOrderDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNo = new Property(1, String.class, "orderNo", false, "ORDER_NO");
        public final static Property OrderDetailNum = new Property(2, int.class, "orderDetailNum", false, "ORDER_DETAIL_NUM");
        public final static Property ItemNum = new Property(3, int.class, "itemNum", false, "ITEM_NUM");
        public final static Property OrderDetailType = new Property(4, String.class, "orderDetailType", false, "ORDER_DETAIL_TYPE");
        public final static Property OrderDetailItem = new Property(5, String.class, "orderDetailItem", false, "ORDER_DETAIL_ITEM");
        public final static Property OrderDetailItemDepartment = new Property(6, String.class, "orderDetailItemDepartment", false, "ORDER_DETAIL_ITEM_DEPARTMENT");
        public final static Property OrderDetailStdPrice = new Property(7, float.class, "orderDetailStdPrice", false, "ORDER_DETAIL_STD_PRICE");
        public final static Property OrderDetailPrice = new Property(8, float.class, "orderDetailPrice", false, "ORDER_DETAIL_PRICE");
        public final static Property OrderDetailAmount = new Property(9, float.class, "orderDetailAmount", false, "ORDER_DETAIL_AMOUNT");
        public final static Property OrderDetailMoney = new Property(10, float.class, "orderDetailMoney", false, "ORDER_DETAIL_MONEY");
        public final static Property OrderDetailAppendMoney = new Property(11, float.class, "orderDetailAppendMoney", false, "ORDER_DETAIL_APPEND_MONEY");
        public final static Property OrderDetailDiscount = new Property(12, float.class, "orderDetailDiscount", false, "ORDER_DETAIL_DISCOUNT");
        public final static Property OrderDetailTax = new Property(13, float.class, "orderDetailTax", false, "ORDER_DETAIL_TAX");
        public final static Property OrderDetailPaymentMoney = new Property(14, float.class, "orderDetailPaymentMoney", false, "ORDER_DETAIL_PAYMENT_MONEY");
        public final static Property OrderDetailStateCode = new Property(15, int.class, "orderDetailStateCode", false, "ORDER_DETAIL_STATE_CODE");
        public final static Property OrderDetailStateName = new Property(16, String.class, "orderDetailStateName", false, "ORDER_DETAIL_STATE_NAME");
        public final static Property OrderDetailAuditor = new Property(17, String.class, "orderDetailAuditor", false, "ORDER_DETAIL_AUDITOR");
        public final static Property OrderDetailMemo = new Property(18, String.class, "orderDetailMemo", false, "ORDER_DETAIL_MEMO");
        public final static Property OrderDetailItemMatrixNum = new Property(19, int.class, "orderDetailItemMatrixNum", false, "ORDER_DETAIL_ITEM_MATRIX_NUM");
        public final static Property OrderDetailItemSerialNumber = new Property(20, String.class, "orderDetailItemSerialNumber", false, "ORDER_DETAIL_ITEM_SERIAL_NUMBER");
        public final static Property OrderDetailCommission = new Property(21, float.class, "orderDetailCommission", false, "ORDER_DETAIL_COMMISSION");
        public final static Property OrderDetailPolicyPromotionFlag = new Property(22, boolean.class, "orderDetailPolicyPromotionFlag", false, "ORDER_DETAIL_POLICY_PROMOTION_FLAG");
        public final static Property OrderDetailPolicyPromotionQuantityFlag = new Property(23, boolean.class, "orderDetailPolicyPromotionQuantityFlag", false, "ORDER_DETAIL_POLICY_PROMOTION_QUANTITY_FLAG");
        public final static Property OrderDetailPolicyPromotionMoneyFlag = new Property(24, boolean.class, "orderDetailPolicyPromotionMoneyFlag", false, "ORDER_DETAIL_POLICY_PROMOTION_MONEY_FLAG");
        public final static Property OrderDetailPolicyPresentFlag = new Property(25, boolean.class, "orderDetailPolicyPresentFlag", false, "ORDER_DETAIL_POLICY_PRESENT_FLAG");
        public final static Property OrderDetailPolicyDiscountFlag = new Property(26, boolean.class, "orderDetailPolicyDiscountFlag", false, "ORDER_DETAIL_POLICY_DISCOUNT_FLAG");
        public final static Property OrderDetailPolicyFid = new Property(27, String.class, "orderDetailPolicyFid", false, "ORDER_DETAIL_POLICY_FID");
        public final static Property OrderDetailPolicyDetailNum = new Property(28, int.class, "orderDetailPolicyDetailNum", false, "ORDER_DETAIL_POLICY_DETAIL_NUM");
        public final static Property OrderDetailCost = new Property(29, float.class, "orderDetailCost", false, "ORDER_DETAIL_COST");
        public final static Property OrderDetailGrossProfit = new Property(30, float.class, "orderDetailGrossProfit", false, "ORDER_DETAIL_GROSS_PROFIT");
        public final static Property OrderDetailProducingDate = new Property(31, java.util.Date.class, "orderDetailProducingDate", false, "ORDER_DETAIL_PRODUCING_DATE");
        public final static Property OrderDetailLotNumber = new Property(32, String.class, "orderDetailLotNumber", false, "ORDER_DETAIL_LOT_NUMBER");
        public final static Property OrderDetailTicketUuid = new Property(33, String.class, "orderDetailTicketUuid", false, "ORDER_DETAIL_TICKET_UUID");
        public final static Property OrderDetailAssistAmount = new Property(34, float.class, "orderDetailAssistAmount", false, "ORDER_DETAIL_ASSIST_AMOUNT");
        public final static Property OrderDetailPromotionType = new Property(35, Integer.class, "orderDetailPromotionType", false, "ORDER_DETAIL_PROMOTION_TYPE");
        public final static Property OrderDetailTicketActionId = new Property(36, String.class, "orderDetailTicketActionId", false, "ORDER_DETAIL_TICKET_ACTION_ID");
        public final static Property ItemGradeNum = new Property(37, int.class, "itemGradeNum", false, "ITEM_GRADE_NUM");
        public final static Property OrderDetailOnlineUnit = new Property(38, String.class, "orderDetailOnlineUnit", false, "ORDER_DETAIL_ONLINE_UNIT");
        public final static Property OrderDetailOnlineQty = new Property(39, float.class, "orderDetailOnlineQty", false, "ORDER_DETAIL_ONLINE_QTY");
        public final static Property OrderDetailOnlinePrice = new Property(40, float.class, "orderDetailOnlinePrice", false, "ORDER_DETAIL_ONLINE_PRICE");
        public final static Property OrderDetailHasKit = new Property(41, Boolean.class, "orderDetailHasKit", false, "ORDER_DETAIL_HAS_KIT");
        public final static Property SystemBookCode = new Property(42, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(43, Integer.class, "branchNum", false, "BRANCH_NUM");
        public final static Property PaymentBalance = new Property(44, float.class, "paymentBalance", false, "PAYMENT_BALANCE");
        public final static Property OrderDetailRound = new Property(45, Float.class, "orderDetailRound", false, "ORDER_DETAIL_ROUND");
        public final static Property Stall_num = new Property(46, Integer.class, "stall_num", false, "STALL_NUM");
        public final static Property OrderDetailShareDiscount = new Property(47, Float.class, "orderDetailShareDiscount", false, "ORDER_DETAIL_SHARE_DISCOUNT");
        public final static Property KitAmountStr = new Property(48, String.class, "kitAmountStr", false, "KIT_AMOUNT_STR");
        public final static Property Order_detail_merchat_rate = new Property(49, Float.class, "order_detail_merchat_rate", false, "ORDER_DETAIL_MERCHAT_RATE");
    }

    private Query<PosOrderDetail> posOrder_PosOrderDetailsQuery;

    public PosOrderDetailDao(DaoConfig config) {
        super(config);
    }
    
    public PosOrderDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS_ORDER_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_NO\" TEXT," + // 1: orderNo
                "\"ORDER_DETAIL_NUM\" INTEGER NOT NULL ," + // 2: orderDetailNum
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 3: itemNum
                "\"ORDER_DETAIL_TYPE\" TEXT," + // 4: orderDetailType
                "\"ORDER_DETAIL_ITEM\" TEXT," + // 5: orderDetailItem
                "\"ORDER_DETAIL_ITEM_DEPARTMENT\" TEXT," + // 6: orderDetailItemDepartment
                "\"ORDER_DETAIL_STD_PRICE\" REAL NOT NULL ," + // 7: orderDetailStdPrice
                "\"ORDER_DETAIL_PRICE\" REAL NOT NULL ," + // 8: orderDetailPrice
                "\"ORDER_DETAIL_AMOUNT\" REAL NOT NULL ," + // 9: orderDetailAmount
                "\"ORDER_DETAIL_MONEY\" REAL NOT NULL ," + // 10: orderDetailMoney
                "\"ORDER_DETAIL_APPEND_MONEY\" REAL NOT NULL ," + // 11: orderDetailAppendMoney
                "\"ORDER_DETAIL_DISCOUNT\" REAL NOT NULL ," + // 12: orderDetailDiscount
                "\"ORDER_DETAIL_TAX\" REAL NOT NULL ," + // 13: orderDetailTax
                "\"ORDER_DETAIL_PAYMENT_MONEY\" REAL NOT NULL ," + // 14: orderDetailPaymentMoney
                "\"ORDER_DETAIL_STATE_CODE\" INTEGER NOT NULL ," + // 15: orderDetailStateCode
                "\"ORDER_DETAIL_STATE_NAME\" TEXT," + // 16: orderDetailStateName
                "\"ORDER_DETAIL_AUDITOR\" TEXT," + // 17: orderDetailAuditor
                "\"ORDER_DETAIL_MEMO\" TEXT," + // 18: orderDetailMemo
                "\"ORDER_DETAIL_ITEM_MATRIX_NUM\" INTEGER NOT NULL ," + // 19: orderDetailItemMatrixNum
                "\"ORDER_DETAIL_ITEM_SERIAL_NUMBER\" TEXT," + // 20: orderDetailItemSerialNumber
                "\"ORDER_DETAIL_COMMISSION\" REAL NOT NULL ," + // 21: orderDetailCommission
                "\"ORDER_DETAIL_POLICY_PROMOTION_FLAG\" INTEGER NOT NULL ," + // 22: orderDetailPolicyPromotionFlag
                "\"ORDER_DETAIL_POLICY_PROMOTION_QUANTITY_FLAG\" INTEGER NOT NULL ," + // 23: orderDetailPolicyPromotionQuantityFlag
                "\"ORDER_DETAIL_POLICY_PROMOTION_MONEY_FLAG\" INTEGER NOT NULL ," + // 24: orderDetailPolicyPromotionMoneyFlag
                "\"ORDER_DETAIL_POLICY_PRESENT_FLAG\" INTEGER NOT NULL ," + // 25: orderDetailPolicyPresentFlag
                "\"ORDER_DETAIL_POLICY_DISCOUNT_FLAG\" INTEGER NOT NULL ," + // 26: orderDetailPolicyDiscountFlag
                "\"ORDER_DETAIL_POLICY_FID\" TEXT," + // 27: orderDetailPolicyFid
                "\"ORDER_DETAIL_POLICY_DETAIL_NUM\" INTEGER NOT NULL ," + // 28: orderDetailPolicyDetailNum
                "\"ORDER_DETAIL_COST\" REAL NOT NULL ," + // 29: orderDetailCost
                "\"ORDER_DETAIL_GROSS_PROFIT\" REAL NOT NULL ," + // 30: orderDetailGrossProfit
                "\"ORDER_DETAIL_PRODUCING_DATE\" INTEGER," + // 31: orderDetailProducingDate
                "\"ORDER_DETAIL_LOT_NUMBER\" TEXT," + // 32: orderDetailLotNumber
                "\"ORDER_DETAIL_TICKET_UUID\" TEXT," + // 33: orderDetailTicketUuid
                "\"ORDER_DETAIL_ASSIST_AMOUNT\" REAL NOT NULL ," + // 34: orderDetailAssistAmount
                "\"ORDER_DETAIL_PROMOTION_TYPE\" INTEGER," + // 35: orderDetailPromotionType
                "\"ORDER_DETAIL_TICKET_ACTION_ID\" TEXT," + // 36: orderDetailTicketActionId
                "\"ITEM_GRADE_NUM\" INTEGER NOT NULL ," + // 37: itemGradeNum
                "\"ORDER_DETAIL_ONLINE_UNIT\" TEXT," + // 38: orderDetailOnlineUnit
                "\"ORDER_DETAIL_ONLINE_QTY\" REAL NOT NULL ," + // 39: orderDetailOnlineQty
                "\"ORDER_DETAIL_ONLINE_PRICE\" REAL NOT NULL ," + // 40: orderDetailOnlinePrice
                "\"ORDER_DETAIL_HAS_KIT\" INTEGER," + // 41: orderDetailHasKit
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 42: systemBookCode
                "\"BRANCH_NUM\" INTEGER," + // 43: branchNum
                "\"PAYMENT_BALANCE\" REAL NOT NULL ," + // 44: paymentBalance
                "\"ORDER_DETAIL_ROUND\" REAL," + // 45: orderDetailRound
                "\"STALL_NUM\" INTEGER," + // 46: stall_num
                "\"ORDER_DETAIL_SHARE_DISCOUNT\" REAL," + // 47: orderDetailShareDiscount
                "\"KIT_AMOUNT_STR\" TEXT," + // 48: kitAmountStr
                "\"ORDER_DETAIL_MERCHAT_RATE\" REAL);"); // 49: order_detail_merchat_rate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS_ORDER_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PosOrderDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
        stmt.bindLong(3, entity.getOrderDetailNum());
        stmt.bindLong(4, entity.getItemNum());
 
        String orderDetailType = entity.getOrderDetailType();
        if (orderDetailType != null) {
            stmt.bindString(5, orderDetailType);
        }
 
        String orderDetailItem = entity.getOrderDetailItem();
        if (orderDetailItem != null) {
            stmt.bindString(6, orderDetailItem);
        }
 
        String orderDetailItemDepartment = entity.getOrderDetailItemDepartment();
        if (orderDetailItemDepartment != null) {
            stmt.bindString(7, orderDetailItemDepartment);
        }
        stmt.bindDouble(8, entity.getOrderDetailStdPrice());
        stmt.bindDouble(9, entity.getOrderDetailPrice());
        stmt.bindDouble(10, entity.getOrderDetailAmount());
        stmt.bindDouble(11, entity.getOrderDetailMoney());
        stmt.bindDouble(12, entity.getOrderDetailAppendMoney());
        stmt.bindDouble(13, entity.getOrderDetailDiscount());
        stmt.bindDouble(14, entity.getOrderDetailTax());
        stmt.bindDouble(15, entity.getOrderDetailPaymentMoney());
        stmt.bindLong(16, entity.getOrderDetailStateCode());
 
        String orderDetailStateName = entity.getOrderDetailStateName();
        if (orderDetailStateName != null) {
            stmt.bindString(17, orderDetailStateName);
        }
 
        String orderDetailAuditor = entity.getOrderDetailAuditor();
        if (orderDetailAuditor != null) {
            stmt.bindString(18, orderDetailAuditor);
        }
 
        String orderDetailMemo = entity.getOrderDetailMemo();
        if (orderDetailMemo != null) {
            stmt.bindString(19, orderDetailMemo);
        }
        stmt.bindLong(20, entity.getOrderDetailItemMatrixNum());
 
        String orderDetailItemSerialNumber = entity.getOrderDetailItemSerialNumber();
        if (orderDetailItemSerialNumber != null) {
            stmt.bindString(21, orderDetailItemSerialNumber);
        }
        stmt.bindDouble(22, entity.getOrderDetailCommission());
        stmt.bindLong(23, entity.getOrderDetailPolicyPromotionFlag() ? 1L: 0L);
        stmt.bindLong(24, entity.getOrderDetailPolicyPromotionQuantityFlag() ? 1L: 0L);
        stmt.bindLong(25, entity.getOrderDetailPolicyPromotionMoneyFlag() ? 1L: 0L);
        stmt.bindLong(26, entity.getOrderDetailPolicyPresentFlag() ? 1L: 0L);
        stmt.bindLong(27, entity.getOrderDetailPolicyDiscountFlag() ? 1L: 0L);
 
        String orderDetailPolicyFid = entity.getOrderDetailPolicyFid();
        if (orderDetailPolicyFid != null) {
            stmt.bindString(28, orderDetailPolicyFid);
        }
        stmt.bindLong(29, entity.getOrderDetailPolicyDetailNum());
        stmt.bindDouble(30, entity.getOrderDetailCost());
        stmt.bindDouble(31, entity.getOrderDetailGrossProfit());
 
        java.util.Date orderDetailProducingDate = entity.getOrderDetailProducingDate();
        if (orderDetailProducingDate != null) {
            stmt.bindLong(32, orderDetailProducingDate.getTime());
        }
 
        String orderDetailLotNumber = entity.getOrderDetailLotNumber();
        if (orderDetailLotNumber != null) {
            stmt.bindString(33, orderDetailLotNumber);
        }
 
        String orderDetailTicketUuid = entity.getOrderDetailTicketUuid();
        if (orderDetailTicketUuid != null) {
            stmt.bindString(34, orderDetailTicketUuid);
        }
        stmt.bindDouble(35, entity.getOrderDetailAssistAmount());
 
        Integer orderDetailPromotionType = entity.getOrderDetailPromotionType();
        if (orderDetailPromotionType != null) {
            stmt.bindLong(36, orderDetailPromotionType);
        }
 
        String orderDetailTicketActionId = entity.getOrderDetailTicketActionId();
        if (orderDetailTicketActionId != null) {
            stmt.bindString(37, orderDetailTicketActionId);
        }
        stmt.bindLong(38, entity.getItemGradeNum());
 
        String orderDetailOnlineUnit = entity.getOrderDetailOnlineUnit();
        if (orderDetailOnlineUnit != null) {
            stmt.bindString(39, orderDetailOnlineUnit);
        }
        stmt.bindDouble(40, entity.getOrderDetailOnlineQty());
        stmt.bindDouble(41, entity.getOrderDetailOnlinePrice());
 
        Boolean orderDetailHasKit = entity.getOrderDetailHasKit();
        if (orderDetailHasKit != null) {
            stmt.bindLong(42, orderDetailHasKit ? 1L: 0L);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(43, systemBookCode);
        }
 
        Integer branchNum = entity.getBranchNum();
        if (branchNum != null) {
            stmt.bindLong(44, branchNum);
        }
        stmt.bindDouble(45, entity.getPaymentBalance());
 
        Float orderDetailRound = entity.getOrderDetailRound();
        if (orderDetailRound != null) {
            stmt.bindDouble(46, orderDetailRound);
        }
 
        Integer stall_num = entity.getStall_num();
        if (stall_num != null) {
            stmt.bindLong(47, stall_num);
        }
 
        Float orderDetailShareDiscount = entity.getOrderDetailShareDiscount();
        if (orderDetailShareDiscount != null) {
            stmt.bindDouble(48, orderDetailShareDiscount);
        }
 
        String kitAmountStr = entity.getKitAmountStr();
        if (kitAmountStr != null) {
            stmt.bindString(49, kitAmountStr);
        }
 
        Float order_detail_merchat_rate = entity.getOrder_detail_merchat_rate();
        if (order_detail_merchat_rate != null) {
            stmt.bindDouble(50, order_detail_merchat_rate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PosOrderDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
        stmt.bindLong(3, entity.getOrderDetailNum());
        stmt.bindLong(4, entity.getItemNum());
 
        String orderDetailType = entity.getOrderDetailType();
        if (orderDetailType != null) {
            stmt.bindString(5, orderDetailType);
        }
 
        String orderDetailItem = entity.getOrderDetailItem();
        if (orderDetailItem != null) {
            stmt.bindString(6, orderDetailItem);
        }
 
        String orderDetailItemDepartment = entity.getOrderDetailItemDepartment();
        if (orderDetailItemDepartment != null) {
            stmt.bindString(7, orderDetailItemDepartment);
        }
        stmt.bindDouble(8, entity.getOrderDetailStdPrice());
        stmt.bindDouble(9, entity.getOrderDetailPrice());
        stmt.bindDouble(10, entity.getOrderDetailAmount());
        stmt.bindDouble(11, entity.getOrderDetailMoney());
        stmt.bindDouble(12, entity.getOrderDetailAppendMoney());
        stmt.bindDouble(13, entity.getOrderDetailDiscount());
        stmt.bindDouble(14, entity.getOrderDetailTax());
        stmt.bindDouble(15, entity.getOrderDetailPaymentMoney());
        stmt.bindLong(16, entity.getOrderDetailStateCode());
 
        String orderDetailStateName = entity.getOrderDetailStateName();
        if (orderDetailStateName != null) {
            stmt.bindString(17, orderDetailStateName);
        }
 
        String orderDetailAuditor = entity.getOrderDetailAuditor();
        if (orderDetailAuditor != null) {
            stmt.bindString(18, orderDetailAuditor);
        }
 
        String orderDetailMemo = entity.getOrderDetailMemo();
        if (orderDetailMemo != null) {
            stmt.bindString(19, orderDetailMemo);
        }
        stmt.bindLong(20, entity.getOrderDetailItemMatrixNum());
 
        String orderDetailItemSerialNumber = entity.getOrderDetailItemSerialNumber();
        if (orderDetailItemSerialNumber != null) {
            stmt.bindString(21, orderDetailItemSerialNumber);
        }
        stmt.bindDouble(22, entity.getOrderDetailCommission());
        stmt.bindLong(23, entity.getOrderDetailPolicyPromotionFlag() ? 1L: 0L);
        stmt.bindLong(24, entity.getOrderDetailPolicyPromotionQuantityFlag() ? 1L: 0L);
        stmt.bindLong(25, entity.getOrderDetailPolicyPromotionMoneyFlag() ? 1L: 0L);
        stmt.bindLong(26, entity.getOrderDetailPolicyPresentFlag() ? 1L: 0L);
        stmt.bindLong(27, entity.getOrderDetailPolicyDiscountFlag() ? 1L: 0L);
 
        String orderDetailPolicyFid = entity.getOrderDetailPolicyFid();
        if (orderDetailPolicyFid != null) {
            stmt.bindString(28, orderDetailPolicyFid);
        }
        stmt.bindLong(29, entity.getOrderDetailPolicyDetailNum());
        stmt.bindDouble(30, entity.getOrderDetailCost());
        stmt.bindDouble(31, entity.getOrderDetailGrossProfit());
 
        java.util.Date orderDetailProducingDate = entity.getOrderDetailProducingDate();
        if (orderDetailProducingDate != null) {
            stmt.bindLong(32, orderDetailProducingDate.getTime());
        }
 
        String orderDetailLotNumber = entity.getOrderDetailLotNumber();
        if (orderDetailLotNumber != null) {
            stmt.bindString(33, orderDetailLotNumber);
        }
 
        String orderDetailTicketUuid = entity.getOrderDetailTicketUuid();
        if (orderDetailTicketUuid != null) {
            stmt.bindString(34, orderDetailTicketUuid);
        }
        stmt.bindDouble(35, entity.getOrderDetailAssistAmount());
 
        Integer orderDetailPromotionType = entity.getOrderDetailPromotionType();
        if (orderDetailPromotionType != null) {
            stmt.bindLong(36, orderDetailPromotionType);
        }
 
        String orderDetailTicketActionId = entity.getOrderDetailTicketActionId();
        if (orderDetailTicketActionId != null) {
            stmt.bindString(37, orderDetailTicketActionId);
        }
        stmt.bindLong(38, entity.getItemGradeNum());
 
        String orderDetailOnlineUnit = entity.getOrderDetailOnlineUnit();
        if (orderDetailOnlineUnit != null) {
            stmt.bindString(39, orderDetailOnlineUnit);
        }
        stmt.bindDouble(40, entity.getOrderDetailOnlineQty());
        stmt.bindDouble(41, entity.getOrderDetailOnlinePrice());
 
        Boolean orderDetailHasKit = entity.getOrderDetailHasKit();
        if (orderDetailHasKit != null) {
            stmt.bindLong(42, orderDetailHasKit ? 1L: 0L);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(43, systemBookCode);
        }
 
        Integer branchNum = entity.getBranchNum();
        if (branchNum != null) {
            stmt.bindLong(44, branchNum);
        }
        stmt.bindDouble(45, entity.getPaymentBalance());
 
        Float orderDetailRound = entity.getOrderDetailRound();
        if (orderDetailRound != null) {
            stmt.bindDouble(46, orderDetailRound);
        }
 
        Integer stall_num = entity.getStall_num();
        if (stall_num != null) {
            stmt.bindLong(47, stall_num);
        }
 
        Float orderDetailShareDiscount = entity.getOrderDetailShareDiscount();
        if (orderDetailShareDiscount != null) {
            stmt.bindDouble(48, orderDetailShareDiscount);
        }
 
        String kitAmountStr = entity.getKitAmountStr();
        if (kitAmountStr != null) {
            stmt.bindString(49, kitAmountStr);
        }
 
        Float order_detail_merchat_rate = entity.getOrder_detail_merchat_rate();
        if (order_detail_merchat_rate != null) {
            stmt.bindDouble(50, order_detail_merchat_rate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PosOrderDetail readEntity(Cursor cursor, int offset) {
        PosOrderDetail entity = new PosOrderDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNo
            cursor.getInt(offset + 2), // orderDetailNum
            cursor.getInt(offset + 3), // itemNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orderDetailType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orderDetailItem
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderDetailItemDepartment
            cursor.getFloat(offset + 7), // orderDetailStdPrice
            cursor.getFloat(offset + 8), // orderDetailPrice
            cursor.getFloat(offset + 9), // orderDetailAmount
            cursor.getFloat(offset + 10), // orderDetailMoney
            cursor.getFloat(offset + 11), // orderDetailAppendMoney
            cursor.getFloat(offset + 12), // orderDetailDiscount
            cursor.getFloat(offset + 13), // orderDetailTax
            cursor.getFloat(offset + 14), // orderDetailPaymentMoney
            cursor.getInt(offset + 15), // orderDetailStateCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // orderDetailStateName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // orderDetailAuditor
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // orderDetailMemo
            cursor.getInt(offset + 19), // orderDetailItemMatrixNum
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // orderDetailItemSerialNumber
            cursor.getFloat(offset + 21), // orderDetailCommission
            cursor.getShort(offset + 22) != 0, // orderDetailPolicyPromotionFlag
            cursor.getShort(offset + 23) != 0, // orderDetailPolicyPromotionQuantityFlag
            cursor.getShort(offset + 24) != 0, // orderDetailPolicyPromotionMoneyFlag
            cursor.getShort(offset + 25) != 0, // orderDetailPolicyPresentFlag
            cursor.getShort(offset + 26) != 0, // orderDetailPolicyDiscountFlag
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // orderDetailPolicyFid
            cursor.getInt(offset + 28), // orderDetailPolicyDetailNum
            cursor.getFloat(offset + 29), // orderDetailCost
            cursor.getFloat(offset + 30), // orderDetailGrossProfit
            cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)), // orderDetailProducingDate
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // orderDetailLotNumber
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // orderDetailTicketUuid
            cursor.getFloat(offset + 34), // orderDetailAssistAmount
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // orderDetailPromotionType
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // orderDetailTicketActionId
            cursor.getInt(offset + 37), // itemGradeNum
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // orderDetailOnlineUnit
            cursor.getFloat(offset + 39), // orderDetailOnlineQty
            cursor.getFloat(offset + 40), // orderDetailOnlinePrice
            cursor.isNull(offset + 41) ? null : cursor.getShort(offset + 41) != 0, // orderDetailHasKit
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // systemBookCode
            cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43), // branchNum
            cursor.getFloat(offset + 44), // paymentBalance
            cursor.isNull(offset + 45) ? null : cursor.getFloat(offset + 45), // orderDetailRound
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46), // stall_num
            cursor.isNull(offset + 47) ? null : cursor.getFloat(offset + 47), // orderDetailShareDiscount
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // kitAmountStr
            cursor.isNull(offset + 49) ? null : cursor.getFloat(offset + 49) // order_detail_merchat_rate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PosOrderDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderDetailNum(cursor.getInt(offset + 2));
        entity.setItemNum(cursor.getInt(offset + 3));
        entity.setOrderDetailType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderDetailItem(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderDetailItemDepartment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderDetailStdPrice(cursor.getFloat(offset + 7));
        entity.setOrderDetailPrice(cursor.getFloat(offset + 8));
        entity.setOrderDetailAmount(cursor.getFloat(offset + 9));
        entity.setOrderDetailMoney(cursor.getFloat(offset + 10));
        entity.setOrderDetailAppendMoney(cursor.getFloat(offset + 11));
        entity.setOrderDetailDiscount(cursor.getFloat(offset + 12));
        entity.setOrderDetailTax(cursor.getFloat(offset + 13));
        entity.setOrderDetailPaymentMoney(cursor.getFloat(offset + 14));
        entity.setOrderDetailStateCode(cursor.getInt(offset + 15));
        entity.setOrderDetailStateName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOrderDetailAuditor(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrderDetailMemo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOrderDetailItemMatrixNum(cursor.getInt(offset + 19));
        entity.setOrderDetailItemSerialNumber(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setOrderDetailCommission(cursor.getFloat(offset + 21));
        entity.setOrderDetailPolicyPromotionFlag(cursor.getShort(offset + 22) != 0);
        entity.setOrderDetailPolicyPromotionQuantityFlag(cursor.getShort(offset + 23) != 0);
        entity.setOrderDetailPolicyPromotionMoneyFlag(cursor.getShort(offset + 24) != 0);
        entity.setOrderDetailPolicyPresentFlag(cursor.getShort(offset + 25) != 0);
        entity.setOrderDetailPolicyDiscountFlag(cursor.getShort(offset + 26) != 0);
        entity.setOrderDetailPolicyFid(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOrderDetailPolicyDetailNum(cursor.getInt(offset + 28));
        entity.setOrderDetailCost(cursor.getFloat(offset + 29));
        entity.setOrderDetailGrossProfit(cursor.getFloat(offset + 30));
        entity.setOrderDetailProducingDate(cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)));
        entity.setOrderDetailLotNumber(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setOrderDetailTicketUuid(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setOrderDetailAssistAmount(cursor.getFloat(offset + 34));
        entity.setOrderDetailPromotionType(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setOrderDetailTicketActionId(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setItemGradeNum(cursor.getInt(offset + 37));
        entity.setOrderDetailOnlineUnit(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setOrderDetailOnlineQty(cursor.getFloat(offset + 39));
        entity.setOrderDetailOnlinePrice(cursor.getFloat(offset + 40));
        entity.setOrderDetailHasKit(cursor.isNull(offset + 41) ? null : cursor.getShort(offset + 41) != 0);
        entity.setSystemBookCode(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setBranchNum(cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43));
        entity.setPaymentBalance(cursor.getFloat(offset + 44));
        entity.setOrderDetailRound(cursor.isNull(offset + 45) ? null : cursor.getFloat(offset + 45));
        entity.setStall_num(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
        entity.setOrderDetailShareDiscount(cursor.isNull(offset + 47) ? null : cursor.getFloat(offset + 47));
        entity.setKitAmountStr(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setOrder_detail_merchat_rate(cursor.isNull(offset + 49) ? null : cursor.getFloat(offset + 49));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PosOrderDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PosOrderDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PosOrderDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "posOrderDetails" to-many relationship of PosOrder. */
    public List<PosOrderDetail> _queryPosOrder_PosOrderDetails(String orderNo) {
        synchronized (this) {
            if (posOrder_PosOrderDetailsQuery == null) {
                QueryBuilder<PosOrderDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderNo.eq(null));
                posOrder_PosOrderDetailsQuery = queryBuilder.build();
            }
        }
        Query<PosOrderDetail> query = posOrder_PosOrderDetailsQuery.forCurrentThread();
        query.setParameter(0, orderNo);
        return query.list();
    }

}
