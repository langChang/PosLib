package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.VipLevelPointRule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIP_LEVEL_POINT_RULE".
*/
public class VipLevelPointRuleDao extends AbstractDao<VipLevelPointRule, Long> {

    public static final String TABLENAME = "VIP_LEVEL_POINT_RULE";

    /**
     * Properties of entity VipLevelPointRule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Rule_id = new Property(1, long.class, "rule_id", false, "RULE_ID");
        public final static Property Rule_name = new Property(2, String.class, "rule_name", false, "RULE_NAME");
        public final static Property Rule_creator = new Property(3, String.class, "rule_creator", false, "RULE_CREATOR");
        public final static Property Rule_create_time = new Property(4, String.class, "rule_create_time", false, "RULE_CREATE_TIME");
        public final static Property Rule_type = new Property(5, String.class, "rule_type", false, "RULE_TYPE");
        public final static Property Rule_money = new Property(6, float.class, "rule_money", false, "RULE_MONEY");
        public final static Property Rule_value = new Property(7, int.class, "rule_value", false, "RULE_VALUE");
        public final static Property Discount_item_no_point = new Property(8, boolean.class, "discount_item_no_point", false, "DISCOUNT_ITEM_NO_POINT");
    }


    public VipLevelPointRuleDao(DaoConfig config) {
        super(config);
    }
    
    public VipLevelPointRuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIP_LEVEL_POINT_RULE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RULE_ID\" INTEGER NOT NULL ," + // 1: rule_id
                "\"RULE_NAME\" TEXT," + // 2: rule_name
                "\"RULE_CREATOR\" TEXT," + // 3: rule_creator
                "\"RULE_CREATE_TIME\" TEXT," + // 4: rule_create_time
                "\"RULE_TYPE\" TEXT," + // 5: rule_type
                "\"RULE_MONEY\" REAL NOT NULL ," + // 6: rule_money
                "\"RULE_VALUE\" INTEGER NOT NULL ," + // 7: rule_value
                "\"DISCOUNT_ITEM_NO_POINT\" INTEGER NOT NULL );"); // 8: discount_item_no_point
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIP_LEVEL_POINT_RULE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VipLevelPointRule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRule_id());
 
        String rule_name = entity.getRule_name();
        if (rule_name != null) {
            stmt.bindString(3, rule_name);
        }
 
        String rule_creator = entity.getRule_creator();
        if (rule_creator != null) {
            stmt.bindString(4, rule_creator);
        }
 
        String rule_create_time = entity.getRule_create_time();
        if (rule_create_time != null) {
            stmt.bindString(5, rule_create_time);
        }
 
        String rule_type = entity.getRule_type();
        if (rule_type != null) {
            stmt.bindString(6, rule_type);
        }
        stmt.bindDouble(7, entity.getRule_money());
        stmt.bindLong(8, entity.getRule_value());
        stmt.bindLong(9, entity.getDiscount_item_no_point() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VipLevelPointRule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRule_id());
 
        String rule_name = entity.getRule_name();
        if (rule_name != null) {
            stmt.bindString(3, rule_name);
        }
 
        String rule_creator = entity.getRule_creator();
        if (rule_creator != null) {
            stmt.bindString(4, rule_creator);
        }
 
        String rule_create_time = entity.getRule_create_time();
        if (rule_create_time != null) {
            stmt.bindString(5, rule_create_time);
        }
 
        String rule_type = entity.getRule_type();
        if (rule_type != null) {
            stmt.bindString(6, rule_type);
        }
        stmt.bindDouble(7, entity.getRule_money());
        stmt.bindLong(8, entity.getRule_value());
        stmt.bindLong(9, entity.getDiscount_item_no_point() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VipLevelPointRule readEntity(Cursor cursor, int offset) {
        VipLevelPointRule entity = new VipLevelPointRule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // rule_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rule_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rule_creator
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rule_create_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rule_type
            cursor.getFloat(offset + 6), // rule_money
            cursor.getInt(offset + 7), // rule_value
            cursor.getShort(offset + 8) != 0 // discount_item_no_point
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VipLevelPointRule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRule_id(cursor.getLong(offset + 1));
        entity.setRule_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRule_creator(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRule_create_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRule_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRule_money(cursor.getFloat(offset + 6));
        entity.setRule_value(cursor.getInt(offset + 7));
        entity.setDiscount_item_no_point(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VipLevelPointRule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VipLevelPointRule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VipLevelPointRule entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
