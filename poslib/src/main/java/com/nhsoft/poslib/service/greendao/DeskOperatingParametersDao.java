package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.DeskOperatingParameters;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DESK_OPERATING_PARAMETERS".
*/
public class DeskOperatingParametersDao extends AbstractDao<DeskOperatingParameters, String> {

    public static final String TABLENAME = "DESK_OPERATING_PARAMETERS";

    /**
     * Properties of entity DeskOperatingParameters.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Can_sale_zero_price_item = new Property(1, boolean.class, "can_sale_zero_price_item", false, "CAN_SALE_ZERO_PRICE_ITEM");
        public final static Property Can_change_amount_for_weight_item = new Property(2, boolean.class, "can_change_amount_for_weight_item", false, "CAN_CHANGE_AMOUNT_FOR_WEIGHT_ITEM");
        public final static Property Integer_only_for_normal_item = new Property(3, boolean.class, "integer_only_for_normal_item", false, "INTEGER_ONLY_FOR_NORMAL_ITEM");
        public final static Property Enable_cash_round = new Property(4, boolean.class, "enable_cash_round", false, "ENABLE_CASH_ROUND");
        public final static Property Enable_weigh_item_round = new Property(5, boolean.class, "enable_weigh_item_round", false, "ENABLE_WEIGH_ITEM_ROUND");
        public final static Property Enable_card_pay_discount = new Property(6, boolean.class, "enable_card_pay_discount", false, "ENABLE_CARD_PAY_DISCOUNT");
        public final static Property Disable_cancel_deposit_with_coupon = new Property(7, boolean.class, "disable_cancel_deposit_with_coupon", false, "DISABLE_CANCEL_DEPOSIT_WITH_COUPON");
        public final static Property Hide_center_four_phone_num = new Property(8, boolean.class, "hide_center_four_phone_num", false, "HIDE_CENTER_FOUR_PHONE_NUM");
        public final static Property Hide_center_three_card_num = new Property(9, boolean.class, "hide_center_three_card_num", false, "HIDE_CENTER_THREE_CARD_NUM");
        public final static Property Hide_fame = new Property(10, boolean.class, "hide_fame", false, "HIDE_FAME");
        public final static Property Prefix_of_weight_item = new Property(11, String.class, "prefix_of_weight_item", false, "PREFIX_OF_WEIGHT_ITEM");
        public final static Property Precision_of_weight = new Property(12, int.class, "precision_of_weight", false, "PRECISION_OF_WEIGHT");
        public final static Property Precision_of_money = new Property(13, int.class, "precision_of_money", false, "PRECISION_OF_MONEY");
        public final static Property Length_of_weight = new Property(14, int.class, "length_of_weight", false, "LENGTH_OF_WEIGHT");
        public final static Property Choose_bar_type = new Property(15, int.class, "choose_bar_type", false, "CHOOSE_BAR_TYPE");
        public final static Property Round_type = new Property(16, String.class, "round_type", false, "ROUND_TYPE");
        public final static Property Round_to = new Property(17, String.class, "round_to", false, "ROUND_TO");
    }


    public DeskOperatingParametersDao(DaoConfig config) {
        super(config);
    }
    
    public DeskOperatingParametersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DESK_OPERATING_PARAMETERS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CAN_SALE_ZERO_PRICE_ITEM\" INTEGER NOT NULL ," + // 1: can_sale_zero_price_item
                "\"CAN_CHANGE_AMOUNT_FOR_WEIGHT_ITEM\" INTEGER NOT NULL ," + // 2: can_change_amount_for_weight_item
                "\"INTEGER_ONLY_FOR_NORMAL_ITEM\" INTEGER NOT NULL ," + // 3: integer_only_for_normal_item
                "\"ENABLE_CASH_ROUND\" INTEGER NOT NULL ," + // 4: enable_cash_round
                "\"ENABLE_WEIGH_ITEM_ROUND\" INTEGER NOT NULL ," + // 5: enable_weigh_item_round
                "\"ENABLE_CARD_PAY_DISCOUNT\" INTEGER NOT NULL ," + // 6: enable_card_pay_discount
                "\"DISABLE_CANCEL_DEPOSIT_WITH_COUPON\" INTEGER NOT NULL ," + // 7: disable_cancel_deposit_with_coupon
                "\"HIDE_CENTER_FOUR_PHONE_NUM\" INTEGER NOT NULL ," + // 8: hide_center_four_phone_num
                "\"HIDE_CENTER_THREE_CARD_NUM\" INTEGER NOT NULL ," + // 9: hide_center_three_card_num
                "\"HIDE_FAME\" INTEGER NOT NULL ," + // 10: hide_fame
                "\"PREFIX_OF_WEIGHT_ITEM\" TEXT," + // 11: prefix_of_weight_item
                "\"PRECISION_OF_WEIGHT\" INTEGER NOT NULL ," + // 12: precision_of_weight
                "\"PRECISION_OF_MONEY\" INTEGER NOT NULL ," + // 13: precision_of_money
                "\"LENGTH_OF_WEIGHT\" INTEGER NOT NULL ," + // 14: length_of_weight
                "\"CHOOSE_BAR_TYPE\" INTEGER NOT NULL ," + // 15: choose_bar_type
                "\"ROUND_TYPE\" TEXT," + // 16: round_type
                "\"ROUND_TO\" TEXT);"); // 17: round_to
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DESK_OPERATING_PARAMETERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeskOperatingParameters entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCan_sale_zero_price_item() ? 1L: 0L);
        stmt.bindLong(3, entity.getCan_change_amount_for_weight_item() ? 1L: 0L);
        stmt.bindLong(4, entity.getInteger_only_for_normal_item() ? 1L: 0L);
        stmt.bindLong(5, entity.getEnable_cash_round() ? 1L: 0L);
        stmt.bindLong(6, entity.getEnable_weigh_item_round() ? 1L: 0L);
        stmt.bindLong(7, entity.getEnable_card_pay_discount() ? 1L: 0L);
        stmt.bindLong(8, entity.getDisable_cancel_deposit_with_coupon() ? 1L: 0L);
        stmt.bindLong(9, entity.getHide_center_four_phone_num() ? 1L: 0L);
        stmt.bindLong(10, entity.getHide_center_three_card_num() ? 1L: 0L);
        stmt.bindLong(11, entity.getHide_fame() ? 1L: 0L);
 
        String prefix_of_weight_item = entity.getPrefix_of_weight_item();
        if (prefix_of_weight_item != null) {
            stmt.bindString(12, prefix_of_weight_item);
        }
        stmt.bindLong(13, entity.getPrecision_of_weight());
        stmt.bindLong(14, entity.getPrecision_of_money());
        stmt.bindLong(15, entity.getLength_of_weight());
        stmt.bindLong(16, entity.getChoose_bar_type());
 
        String round_type = entity.getRound_type();
        if (round_type != null) {
            stmt.bindString(17, round_type);
        }
 
        String round_to = entity.getRound_to();
        if (round_to != null) {
            stmt.bindString(18, round_to);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeskOperatingParameters entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCan_sale_zero_price_item() ? 1L: 0L);
        stmt.bindLong(3, entity.getCan_change_amount_for_weight_item() ? 1L: 0L);
        stmt.bindLong(4, entity.getInteger_only_for_normal_item() ? 1L: 0L);
        stmt.bindLong(5, entity.getEnable_cash_round() ? 1L: 0L);
        stmt.bindLong(6, entity.getEnable_weigh_item_round() ? 1L: 0L);
        stmt.bindLong(7, entity.getEnable_card_pay_discount() ? 1L: 0L);
        stmt.bindLong(8, entity.getDisable_cancel_deposit_with_coupon() ? 1L: 0L);
        stmt.bindLong(9, entity.getHide_center_four_phone_num() ? 1L: 0L);
        stmt.bindLong(10, entity.getHide_center_three_card_num() ? 1L: 0L);
        stmt.bindLong(11, entity.getHide_fame() ? 1L: 0L);
 
        String prefix_of_weight_item = entity.getPrefix_of_weight_item();
        if (prefix_of_weight_item != null) {
            stmt.bindString(12, prefix_of_weight_item);
        }
        stmt.bindLong(13, entity.getPrecision_of_weight());
        stmt.bindLong(14, entity.getPrecision_of_money());
        stmt.bindLong(15, entity.getLength_of_weight());
        stmt.bindLong(16, entity.getChoose_bar_type());
 
        String round_type = entity.getRound_type();
        if (round_type != null) {
            stmt.bindString(17, round_type);
        }
 
        String round_to = entity.getRound_to();
        if (round_to != null) {
            stmt.bindString(18, round_to);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DeskOperatingParameters readEntity(Cursor cursor, int offset) {
        DeskOperatingParameters entity = new DeskOperatingParameters( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // can_sale_zero_price_item
            cursor.getShort(offset + 2) != 0, // can_change_amount_for_weight_item
            cursor.getShort(offset + 3) != 0, // integer_only_for_normal_item
            cursor.getShort(offset + 4) != 0, // enable_cash_round
            cursor.getShort(offset + 5) != 0, // enable_weigh_item_round
            cursor.getShort(offset + 6) != 0, // enable_card_pay_discount
            cursor.getShort(offset + 7) != 0, // disable_cancel_deposit_with_coupon
            cursor.getShort(offset + 8) != 0, // hide_center_four_phone_num
            cursor.getShort(offset + 9) != 0, // hide_center_three_card_num
            cursor.getShort(offset + 10) != 0, // hide_fame
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // prefix_of_weight_item
            cursor.getInt(offset + 12), // precision_of_weight
            cursor.getInt(offset + 13), // precision_of_money
            cursor.getInt(offset + 14), // length_of_weight
            cursor.getInt(offset + 15), // choose_bar_type
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // round_type
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // round_to
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeskOperatingParameters entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCan_sale_zero_price_item(cursor.getShort(offset + 1) != 0);
        entity.setCan_change_amount_for_weight_item(cursor.getShort(offset + 2) != 0);
        entity.setInteger_only_for_normal_item(cursor.getShort(offset + 3) != 0);
        entity.setEnable_cash_round(cursor.getShort(offset + 4) != 0);
        entity.setEnable_weigh_item_round(cursor.getShort(offset + 5) != 0);
        entity.setEnable_card_pay_discount(cursor.getShort(offset + 6) != 0);
        entity.setDisable_cancel_deposit_with_coupon(cursor.getShort(offset + 7) != 0);
        entity.setHide_center_four_phone_num(cursor.getShort(offset + 8) != 0);
        entity.setHide_center_three_card_num(cursor.getShort(offset + 9) != 0);
        entity.setHide_fame(cursor.getShort(offset + 10) != 0);
        entity.setPrefix_of_weight_item(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrecision_of_weight(cursor.getInt(offset + 12));
        entity.setPrecision_of_money(cursor.getInt(offset + 13));
        entity.setLength_of_weight(cursor.getInt(offset + 14));
        entity.setChoose_bar_type(cursor.getInt(offset + 15));
        entity.setRound_type(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRound_to(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DeskOperatingParameters entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DeskOperatingParameters entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeskOperatingParameters entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
