package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.AmountPay;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AMOUNT_PAY".
*/
public class AmountPayDao extends AbstractDao<AmountPay, Void> {

    public static final String TABLENAME = "AMOUNT_PAY";

    /**
     * Properties of entity AmountPay.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property AmountMoney = new Property(2, float.class, "amountMoney", false, "AMOUNT_MONEY");
        public final static Property ShiftTableBizday = new Property(3, String.class, "shiftTableBizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property ShiftTableNum = new Property(4, int.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
    }


    public AmountPayDao(DaoConfig config) {
        super(config);
    }
    
    public AmountPayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AMOUNT_PAY\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AMOUNT_MONEY\" REAL NOT NULL ," + // 2: amountMoney
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 3: shiftTableBizday
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL );"); // 4: shiftTableNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AMOUNT_PAY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AmountPay entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindDouble(3, entity.getAmountMoney());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(4, shiftTableBizday);
        }
        stmt.bindLong(5, entity.getShiftTableNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AmountPay entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindDouble(3, entity.getAmountMoney());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(4, shiftTableBizday);
        }
        stmt.bindLong(5, entity.getShiftTableNum());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AmountPay readEntity(Cursor cursor, int offset) {
        AmountPay entity = new AmountPay( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getFloat(offset + 2), // amountMoney
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shiftTableBizday
            cursor.getInt(offset + 4) // shiftTableNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AmountPay entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAmountMoney(cursor.getFloat(offset + 2));
        entity.setShiftTableBizday(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShiftTableNum(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AmountPay entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AmountPay entity) {
        return null;
    }

    @Override
    public boolean hasKey(AmountPay entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
