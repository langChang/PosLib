package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.SystemRole;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSTEM_ROLE".
*/
public class SystemRoleDao extends AbstractDao<SystemRole, Long> {

    public static final String TABLENAME = "SYSTEM_ROLE";

    /**
     * Properties of entity SystemRole.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property System_role_num = new Property(0, Long.class, "system_role_num", true, "SYSTEM_ROLE_NUM");
        public final static Property System_role_name = new Property(1, String.class, "system_role_name", false, "SYSTEM_ROLE_NAME");
        public final static Property System_role_category = new Property(2, String.class, "system_role_category", false, "SYSTEM_ROLE_CATEGORY");
    }

    private DaoSession daoSession;


    public SystemRoleDao(DaoConfig config) {
        super(config);
    }
    
    public SystemRoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_ROLE\" (" + //
                "\"SYSTEM_ROLE_NUM\" INTEGER PRIMARY KEY ," + // 0: system_role_num
                "\"SYSTEM_ROLE_NAME\" TEXT," + // 1: system_role_name
                "\"SYSTEM_ROLE_CATEGORY\" TEXT);"); // 2: system_role_category
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_ROLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SystemRole entity) {
        stmt.clearBindings();
 
        Long system_role_num = entity.getSystem_role_num();
        if (system_role_num != null) {
            stmt.bindLong(1, system_role_num);
        }
 
        String system_role_name = entity.getSystem_role_name();
        if (system_role_name != null) {
            stmt.bindString(2, system_role_name);
        }
 
        String system_role_category = entity.getSystem_role_category();
        if (system_role_category != null) {
            stmt.bindString(3, system_role_category);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SystemRole entity) {
        stmt.clearBindings();
 
        Long system_role_num = entity.getSystem_role_num();
        if (system_role_num != null) {
            stmt.bindLong(1, system_role_num);
        }
 
        String system_role_name = entity.getSystem_role_name();
        if (system_role_name != null) {
            stmt.bindString(2, system_role_name);
        }
 
        String system_role_category = entity.getSystem_role_category();
        if (system_role_category != null) {
            stmt.bindString(3, system_role_category);
        }
    }

    @Override
    protected final void attachEntity(SystemRole entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SystemRole readEntity(Cursor cursor, int offset) {
        SystemRole entity = new SystemRole( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // system_role_num
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // system_role_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // system_role_category
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SystemRole entity, int offset) {
        entity.setSystem_role_num(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystem_role_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSystem_role_category(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SystemRole entity, long rowId) {
        entity.setSystem_role_num(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SystemRole entity) {
        if(entity != null) {
            return entity.getSystem_role_num();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SystemRole entity) {
        return entity.getSystem_role_num() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
