package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.FmPosOrderDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FM_POS_ORDER_DETAIL".
*/
public class FmPosOrderDetailDao extends AbstractDao<FmPosOrderDetail, Long> {

    public static final String TABLENAME = "FM_POS_ORDER_DETAIL";

    /**
     * Properties of entity FmPosOrderDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderDetailNum = new Property(1, int.class, "orderDetailNum", false, "ORDER_DETAIL_NUM");
        public final static Property OrderNo = new Property(2, String.class, "orderNo", false, "ORDER_NO");
        public final static Property SystemBookCode = new Property(3, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(4, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property MerchantNum = new Property(5, int.class, "merchantNum", false, "MERCHANT_NUM");
        public final static Property BranchId = new Property(6, long.class, "branchId", false, "BRANCH_ID");
        public final static Property ShiftTableBizday = new Property(7, String.class, "shiftTableBizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property ShiftTableNum = new Property(8, int.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property OrderStateCode = new Property(9, int.class, "orderStateCode", false, "ORDER_STATE_CODE");
        public final static Property ItemId = new Property(10, long.class, "itemId", false, "ITEM_ID");
        public final static Property ItemNum = new Property(11, int.class, "itemNum", false, "ITEM_NUM");
        public final static Property OrderDetailItem = new Property(12, String.class, "orderDetailItem", false, "ORDER_DETAIL_ITEM");
        public final static Property OrderDetailStdPrice = new Property(13, float.class, "orderDetailStdPrice", false, "ORDER_DETAIL_STD_PRICE");
        public final static Property OrderDetailPrice = new Property(14, float.class, "orderDetailPrice", false, "ORDER_DETAIL_PRICE");
        public final static Property OrderDetailAmount = new Property(15, float.class, "orderDetailAmount", false, "ORDER_DETAIL_AMOUNT");
        public final static Property OrderDetailMoney = new Property(16, float.class, "orderDetailMoney", false, "ORDER_DETAIL_MONEY");
        public final static Property OrderDetailDiscount = new Property(17, float.class, "orderDetailDiscount", false, "ORDER_DETAIL_DISCOUNT");
        public final static Property OrderDetailPaymentMoney = new Property(18, float.class, "orderDetailPaymentMoney", false, "ORDER_DETAIL_PAYMENT_MONEY");
        public final static Property OrderDetailStateCode = new Property(19, int.class, "orderDetailStateCode", false, "ORDER_DETAIL_STATE_CODE");
        public final static Property OrderDetailStateName = new Property(20, String.class, "orderDetailStateName", false, "ORDER_DETAIL_STATE_NAME");
        public final static Property OrderDetailMemo = new Property(21, String.class, "orderDetailMemo", false, "ORDER_DETAIL_MEMO");
        public final static Property OrderDetailPolicyFid = new Property(22, String.class, "orderDetailPolicyFid", false, "ORDER_DETAIL_POLICY_FID");
        public final static Property OrderDetailPolicyDetailNum = new Property(23, int.class, "orderDetailPolicyDetailNum", false, "ORDER_DETAIL_POLICY_DETAIL_NUM");
        public final static Property OrderDetailPromotionType = new Property(24, int.class, "orderDetailPromotionType", false, "ORDER_DETAIL_PROMOTION_TYPE");
        public final static Property OrderDetailMerchantRate = new Property(25, float.class, "orderDetailMerchantRate", false, "ORDER_DETAIL_MERCHANT_RATE");
        public final static Property OrderDetailShareDiscount = new Property(26, float.class, "orderDetailShareDiscount", false, "ORDER_DETAIL_SHARE_DISCOUNT");
        public final static Property ItemUnit = new Property(27, String.class, "itemUnit", false, "ITEM_UNIT");
    }

    private Query<FmPosOrderDetail> fmPosOrder_PosOrderDetailsQuery;

    public FmPosOrderDetailDao(DaoConfig config) {
        super(config);
    }
    
    public FmPosOrderDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FM_POS_ORDER_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_DETAIL_NUM\" INTEGER NOT NULL ," + // 1: orderDetailNum
                "\"ORDER_NO\" TEXT," + // 2: orderNo
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 3: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 4: branchNum
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 5: merchantNum
                "\"BRANCH_ID\" INTEGER NOT NULL ," + // 6: branchId
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 7: shiftTableBizday
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 8: shiftTableNum
                "\"ORDER_STATE_CODE\" INTEGER NOT NULL ," + // 9: orderStateCode
                "\"ITEM_ID\" INTEGER NOT NULL ," + // 10: itemId
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 11: itemNum
                "\"ORDER_DETAIL_ITEM\" TEXT," + // 12: orderDetailItem
                "\"ORDER_DETAIL_STD_PRICE\" REAL NOT NULL ," + // 13: orderDetailStdPrice
                "\"ORDER_DETAIL_PRICE\" REAL NOT NULL ," + // 14: orderDetailPrice
                "\"ORDER_DETAIL_AMOUNT\" REAL NOT NULL ," + // 15: orderDetailAmount
                "\"ORDER_DETAIL_MONEY\" REAL NOT NULL ," + // 16: orderDetailMoney
                "\"ORDER_DETAIL_DISCOUNT\" REAL NOT NULL ," + // 17: orderDetailDiscount
                "\"ORDER_DETAIL_PAYMENT_MONEY\" REAL NOT NULL ," + // 18: orderDetailPaymentMoney
                "\"ORDER_DETAIL_STATE_CODE\" INTEGER NOT NULL ," + // 19: orderDetailStateCode
                "\"ORDER_DETAIL_STATE_NAME\" TEXT," + // 20: orderDetailStateName
                "\"ORDER_DETAIL_MEMO\" TEXT," + // 21: orderDetailMemo
                "\"ORDER_DETAIL_POLICY_FID\" TEXT," + // 22: orderDetailPolicyFid
                "\"ORDER_DETAIL_POLICY_DETAIL_NUM\" INTEGER NOT NULL ," + // 23: orderDetailPolicyDetailNum
                "\"ORDER_DETAIL_PROMOTION_TYPE\" INTEGER NOT NULL ," + // 24: orderDetailPromotionType
                "\"ORDER_DETAIL_MERCHANT_RATE\" REAL NOT NULL ," + // 25: orderDetailMerchantRate
                "\"ORDER_DETAIL_SHARE_DISCOUNT\" REAL NOT NULL ," + // 26: orderDetailShareDiscount
                "\"ITEM_UNIT\" TEXT);"); // 27: itemUnit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FM_POS_ORDER_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FmPosOrderDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderDetailNum());
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(3, orderNo);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(4, systemBookCode);
        }
        stmt.bindLong(5, entity.getBranchNum());
        stmt.bindLong(6, entity.getMerchantNum());
        stmt.bindLong(7, entity.getBranchId());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(8, shiftTableBizday);
        }
        stmt.bindLong(9, entity.getShiftTableNum());
        stmt.bindLong(10, entity.getOrderStateCode());
        stmt.bindLong(11, entity.getItemId());
        stmt.bindLong(12, entity.getItemNum());
 
        String orderDetailItem = entity.getOrderDetailItem();
        if (orderDetailItem != null) {
            stmt.bindString(13, orderDetailItem);
        }
        stmt.bindDouble(14, entity.getOrderDetailStdPrice());
        stmt.bindDouble(15, entity.getOrderDetailPrice());
        stmt.bindDouble(16, entity.getOrderDetailAmount());
        stmt.bindDouble(17, entity.getOrderDetailMoney());
        stmt.bindDouble(18, entity.getOrderDetailDiscount());
        stmt.bindDouble(19, entity.getOrderDetailPaymentMoney());
        stmt.bindLong(20, entity.getOrderDetailStateCode());
 
        String orderDetailStateName = entity.getOrderDetailStateName();
        if (orderDetailStateName != null) {
            stmt.bindString(21, orderDetailStateName);
        }
 
        String orderDetailMemo = entity.getOrderDetailMemo();
        if (orderDetailMemo != null) {
            stmt.bindString(22, orderDetailMemo);
        }
 
        String orderDetailPolicyFid = entity.getOrderDetailPolicyFid();
        if (orderDetailPolicyFid != null) {
            stmt.bindString(23, orderDetailPolicyFid);
        }
        stmt.bindLong(24, entity.getOrderDetailPolicyDetailNum());
        stmt.bindLong(25, entity.getOrderDetailPromotionType());
        stmt.bindDouble(26, entity.getOrderDetailMerchantRate());
        stmt.bindDouble(27, entity.getOrderDetailShareDiscount());
 
        String itemUnit = entity.getItemUnit();
        if (itemUnit != null) {
            stmt.bindString(28, itemUnit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FmPosOrderDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderDetailNum());
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(3, orderNo);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(4, systemBookCode);
        }
        stmt.bindLong(5, entity.getBranchNum());
        stmt.bindLong(6, entity.getMerchantNum());
        stmt.bindLong(7, entity.getBranchId());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(8, shiftTableBizday);
        }
        stmt.bindLong(9, entity.getShiftTableNum());
        stmt.bindLong(10, entity.getOrderStateCode());
        stmt.bindLong(11, entity.getItemId());
        stmt.bindLong(12, entity.getItemNum());
 
        String orderDetailItem = entity.getOrderDetailItem();
        if (orderDetailItem != null) {
            stmt.bindString(13, orderDetailItem);
        }
        stmt.bindDouble(14, entity.getOrderDetailStdPrice());
        stmt.bindDouble(15, entity.getOrderDetailPrice());
        stmt.bindDouble(16, entity.getOrderDetailAmount());
        stmt.bindDouble(17, entity.getOrderDetailMoney());
        stmt.bindDouble(18, entity.getOrderDetailDiscount());
        stmt.bindDouble(19, entity.getOrderDetailPaymentMoney());
        stmt.bindLong(20, entity.getOrderDetailStateCode());
 
        String orderDetailStateName = entity.getOrderDetailStateName();
        if (orderDetailStateName != null) {
            stmt.bindString(21, orderDetailStateName);
        }
 
        String orderDetailMemo = entity.getOrderDetailMemo();
        if (orderDetailMemo != null) {
            stmt.bindString(22, orderDetailMemo);
        }
 
        String orderDetailPolicyFid = entity.getOrderDetailPolicyFid();
        if (orderDetailPolicyFid != null) {
            stmt.bindString(23, orderDetailPolicyFid);
        }
        stmt.bindLong(24, entity.getOrderDetailPolicyDetailNum());
        stmt.bindLong(25, entity.getOrderDetailPromotionType());
        stmt.bindDouble(26, entity.getOrderDetailMerchantRate());
        stmt.bindDouble(27, entity.getOrderDetailShareDiscount());
 
        String itemUnit = entity.getItemUnit();
        if (itemUnit != null) {
            stmt.bindString(28, itemUnit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FmPosOrderDetail readEntity(Cursor cursor, int offset) {
        FmPosOrderDetail entity = new FmPosOrderDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // orderDetailNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // systemBookCode
            cursor.getInt(offset + 4), // branchNum
            cursor.getInt(offset + 5), // merchantNum
            cursor.getLong(offset + 6), // branchId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shiftTableBizday
            cursor.getInt(offset + 8), // shiftTableNum
            cursor.getInt(offset + 9), // orderStateCode
            cursor.getLong(offset + 10), // itemId
            cursor.getInt(offset + 11), // itemNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // orderDetailItem
            cursor.getFloat(offset + 13), // orderDetailStdPrice
            cursor.getFloat(offset + 14), // orderDetailPrice
            cursor.getFloat(offset + 15), // orderDetailAmount
            cursor.getFloat(offset + 16), // orderDetailMoney
            cursor.getFloat(offset + 17), // orderDetailDiscount
            cursor.getFloat(offset + 18), // orderDetailPaymentMoney
            cursor.getInt(offset + 19), // orderDetailStateCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // orderDetailStateName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // orderDetailMemo
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // orderDetailPolicyFid
            cursor.getInt(offset + 23), // orderDetailPolicyDetailNum
            cursor.getInt(offset + 24), // orderDetailPromotionType
            cursor.getFloat(offset + 25), // orderDetailMerchantRate
            cursor.getFloat(offset + 26), // orderDetailShareDiscount
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // itemUnit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FmPosOrderDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderDetailNum(cursor.getInt(offset + 1));
        entity.setOrderNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSystemBookCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranchNum(cursor.getInt(offset + 4));
        entity.setMerchantNum(cursor.getInt(offset + 5));
        entity.setBranchId(cursor.getLong(offset + 6));
        entity.setShiftTableBizday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShiftTableNum(cursor.getInt(offset + 8));
        entity.setOrderStateCode(cursor.getInt(offset + 9));
        entity.setItemId(cursor.getLong(offset + 10));
        entity.setItemNum(cursor.getInt(offset + 11));
        entity.setOrderDetailItem(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOrderDetailStdPrice(cursor.getFloat(offset + 13));
        entity.setOrderDetailPrice(cursor.getFloat(offset + 14));
        entity.setOrderDetailAmount(cursor.getFloat(offset + 15));
        entity.setOrderDetailMoney(cursor.getFloat(offset + 16));
        entity.setOrderDetailDiscount(cursor.getFloat(offset + 17));
        entity.setOrderDetailPaymentMoney(cursor.getFloat(offset + 18));
        entity.setOrderDetailStateCode(cursor.getInt(offset + 19));
        entity.setOrderDetailStateName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setOrderDetailMemo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setOrderDetailPolicyFid(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOrderDetailPolicyDetailNum(cursor.getInt(offset + 23));
        entity.setOrderDetailPromotionType(cursor.getInt(offset + 24));
        entity.setOrderDetailMerchantRate(cursor.getFloat(offset + 25));
        entity.setOrderDetailShareDiscount(cursor.getFloat(offset + 26));
        entity.setItemUnit(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FmPosOrderDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FmPosOrderDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FmPosOrderDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "posOrderDetails" to-many relationship of FmPosOrder. */
    public List<FmPosOrderDetail> _queryFmPosOrder_PosOrderDetails(String orderNo) {
        synchronized (this) {
            if (fmPosOrder_PosOrderDetailsQuery == null) {
                QueryBuilder<FmPosOrderDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderNo.eq(null));
                fmPosOrder_PosOrderDetailsQuery = queryBuilder.build();
            }
        }
        Query<FmPosOrderDetail> query = fmPosOrder_PosOrderDetailsQuery.forCurrentThread();
        query.setParameter(0, orderNo);
        return query.list();
    }

}
