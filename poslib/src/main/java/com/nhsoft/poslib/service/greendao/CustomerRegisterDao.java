package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.CustomerRegister;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER_REGISTER".
*/
public class CustomerRegisterDao extends AbstractDao<CustomerRegister, String> {

    public static final String TABLENAME = "CUSTOMER_REGISTER";

    /**
     * Properties of entity CustomerRegister.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Vip_card_user_log_fid = new Property(0, String.class, "vip_card_user_log_fid", true, "VIP_CARD_USER_LOG_FID");
        public final static Property Branch_num = new Property(1, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Shift_table_bizday = new Property(2, String.class, "shift_table_bizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property Shift_table_num = new Property(3, int.class, "shift_table_num", false, "SHIFT_TABLE_NUM");
        public final static Property Vip_card_user_category = new Property(4, String.class, "vip_card_user_category", false, "VIP_CARD_USER_CATEGORY");
        public final static Property Vip_card_user_date = new Property(5, String.class, "vip_card_user_date", false, "VIP_CARD_USER_DATE");
        public final static Property Vip_card_user_level = new Property(6, String.class, "vip_card_user_level", false, "VIP_CARD_USER_LEVEL");
        public final static Property Vip_card_user_level_name = new Property(7, String.class, "vip_card_user_level_name", false, "VIP_CARD_USER_LEVEL_NAME");
        public final static Property Vip_card_user_memo = new Property(8, String.class, "vip_card_user_memo", false, "VIP_CARD_USER_MEMO");
        public final static Property Vip_card_user_money = new Property(9, float.class, "vip_card_user_money", false, "VIP_CARD_USER_MONEY");
        public final static Property Vip_card_user_name = new Property(10, String.class, "vip_card_user_name", false, "VIP_CARD_USER_NAME");
        public final static Property Vip_card_user_old_date = new Property(11, String.class, "vip_card_user_old_date", false, "VIP_CARD_USER_OLD_DATE");
        public final static Property Vip_card_user_operator = new Property(12, String.class, "vip_card_user_operator", false, "VIP_CARD_USER_OPERATOR");
        public final static Property Vip_card_user_payment = new Property(13, String.class, "vip_card_user_payment", false, "VIP_CARD_USER_PAYMENT");
        public final static Property Vip_card_user_phone = new Property(14, String.class, "vip_card_user_phone", false, "VIP_CARD_USER_PHONE");
        public final static Property Vip_card_user_print_num = new Property(15, String.class, "vip_card_user_print_num", false, "VIP_CARD_USER_PRINT_NUM");
        public final static Property Vip_card_user_ref_bill = new Property(16, String.class, "vip_card_user_ref_bill", false, "VIP_CARD_USER_REF_BILL");
        public final static Property Vip_card_user_type = new Property(17, String.class, "vip_card_user_type", false, "VIP_CARD_USER_TYPE");
        public final static Property Vip_card_user_valid_date = new Property(18, String.class, "vip_card_user_valid_date", false, "VIP_CARD_USER_VALID_DATE");
        public final static Property Vip_card_user_state = new Property(19, boolean.class, "vip_card_user_state", false, "VIP_CARD_USER_STATE");
        public final static Property System_book_code = new Property(20, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
    }


    public CustomerRegisterDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerRegisterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER_REGISTER\" (" + //
                "\"VIP_CARD_USER_LOG_FID\" TEXT PRIMARY KEY NOT NULL ," + // 0: vip_card_user_log_fid
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 1: branch_num
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 2: shift_table_bizday
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 3: shift_table_num
                "\"VIP_CARD_USER_CATEGORY\" TEXT," + // 4: vip_card_user_category
                "\"VIP_CARD_USER_DATE\" TEXT," + // 5: vip_card_user_date
                "\"VIP_CARD_USER_LEVEL\" TEXT," + // 6: vip_card_user_level
                "\"VIP_CARD_USER_LEVEL_NAME\" TEXT," + // 7: vip_card_user_level_name
                "\"VIP_CARD_USER_MEMO\" TEXT," + // 8: vip_card_user_memo
                "\"VIP_CARD_USER_MONEY\" REAL NOT NULL ," + // 9: vip_card_user_money
                "\"VIP_CARD_USER_NAME\" TEXT," + // 10: vip_card_user_name
                "\"VIP_CARD_USER_OLD_DATE\" TEXT," + // 11: vip_card_user_old_date
                "\"VIP_CARD_USER_OPERATOR\" TEXT," + // 12: vip_card_user_operator
                "\"VIP_CARD_USER_PAYMENT\" TEXT," + // 13: vip_card_user_payment
                "\"VIP_CARD_USER_PHONE\" TEXT," + // 14: vip_card_user_phone
                "\"VIP_CARD_USER_PRINT_NUM\" TEXT," + // 15: vip_card_user_print_num
                "\"VIP_CARD_USER_REF_BILL\" TEXT," + // 16: vip_card_user_ref_bill
                "\"VIP_CARD_USER_TYPE\" TEXT," + // 17: vip_card_user_type
                "\"VIP_CARD_USER_VALID_DATE\" TEXT," + // 18: vip_card_user_valid_date
                "\"VIP_CARD_USER_STATE\" INTEGER NOT NULL ," + // 19: vip_card_user_state
                "\"SYSTEM_BOOK_CODE\" TEXT);"); // 20: system_book_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER_REGISTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomerRegister entity) {
        stmt.clearBindings();
 
        String vip_card_user_log_fid = entity.getVip_card_user_log_fid();
        if (vip_card_user_log_fid != null) {
            stmt.bindString(1, vip_card_user_log_fid);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(3, shift_table_bizday);
        }
        stmt.bindLong(4, entity.getShift_table_num());
 
        String vip_card_user_category = entity.getVip_card_user_category();
        if (vip_card_user_category != null) {
            stmt.bindString(5, vip_card_user_category);
        }
 
        String vip_card_user_date = entity.getVip_card_user_date();
        if (vip_card_user_date != null) {
            stmt.bindString(6, vip_card_user_date);
        }
 
        String vip_card_user_level = entity.getVip_card_user_level();
        if (vip_card_user_level != null) {
            stmt.bindString(7, vip_card_user_level);
        }
 
        String vip_card_user_level_name = entity.getVip_card_user_level_name();
        if (vip_card_user_level_name != null) {
            stmt.bindString(8, vip_card_user_level_name);
        }
 
        String vip_card_user_memo = entity.getVip_card_user_memo();
        if (vip_card_user_memo != null) {
            stmt.bindString(9, vip_card_user_memo);
        }
        stmt.bindDouble(10, entity.getVip_card_user_money());
 
        String vip_card_user_name = entity.getVip_card_user_name();
        if (vip_card_user_name != null) {
            stmt.bindString(11, vip_card_user_name);
        }
 
        String vip_card_user_old_date = entity.getVip_card_user_old_date();
        if (vip_card_user_old_date != null) {
            stmt.bindString(12, vip_card_user_old_date);
        }
 
        String vip_card_user_operator = entity.getVip_card_user_operator();
        if (vip_card_user_operator != null) {
            stmt.bindString(13, vip_card_user_operator);
        }
 
        String vip_card_user_payment = entity.getVip_card_user_payment();
        if (vip_card_user_payment != null) {
            stmt.bindString(14, vip_card_user_payment);
        }
 
        String vip_card_user_phone = entity.getVip_card_user_phone();
        if (vip_card_user_phone != null) {
            stmt.bindString(15, vip_card_user_phone);
        }
 
        String vip_card_user_print_num = entity.getVip_card_user_print_num();
        if (vip_card_user_print_num != null) {
            stmt.bindString(16, vip_card_user_print_num);
        }
 
        String vip_card_user_ref_bill = entity.getVip_card_user_ref_bill();
        if (vip_card_user_ref_bill != null) {
            stmt.bindString(17, vip_card_user_ref_bill);
        }
 
        String vip_card_user_type = entity.getVip_card_user_type();
        if (vip_card_user_type != null) {
            stmt.bindString(18, vip_card_user_type);
        }
 
        String vip_card_user_valid_date = entity.getVip_card_user_valid_date();
        if (vip_card_user_valid_date != null) {
            stmt.bindString(19, vip_card_user_valid_date);
        }
        stmt.bindLong(20, entity.getVip_card_user_state() ? 1L: 0L);
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(21, system_book_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomerRegister entity) {
        stmt.clearBindings();
 
        String vip_card_user_log_fid = entity.getVip_card_user_log_fid();
        if (vip_card_user_log_fid != null) {
            stmt.bindString(1, vip_card_user_log_fid);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(3, shift_table_bizday);
        }
        stmt.bindLong(4, entity.getShift_table_num());
 
        String vip_card_user_category = entity.getVip_card_user_category();
        if (vip_card_user_category != null) {
            stmt.bindString(5, vip_card_user_category);
        }
 
        String vip_card_user_date = entity.getVip_card_user_date();
        if (vip_card_user_date != null) {
            stmt.bindString(6, vip_card_user_date);
        }
 
        String vip_card_user_level = entity.getVip_card_user_level();
        if (vip_card_user_level != null) {
            stmt.bindString(7, vip_card_user_level);
        }
 
        String vip_card_user_level_name = entity.getVip_card_user_level_name();
        if (vip_card_user_level_name != null) {
            stmt.bindString(8, vip_card_user_level_name);
        }
 
        String vip_card_user_memo = entity.getVip_card_user_memo();
        if (vip_card_user_memo != null) {
            stmt.bindString(9, vip_card_user_memo);
        }
        stmt.bindDouble(10, entity.getVip_card_user_money());
 
        String vip_card_user_name = entity.getVip_card_user_name();
        if (vip_card_user_name != null) {
            stmt.bindString(11, vip_card_user_name);
        }
 
        String vip_card_user_old_date = entity.getVip_card_user_old_date();
        if (vip_card_user_old_date != null) {
            stmt.bindString(12, vip_card_user_old_date);
        }
 
        String vip_card_user_operator = entity.getVip_card_user_operator();
        if (vip_card_user_operator != null) {
            stmt.bindString(13, vip_card_user_operator);
        }
 
        String vip_card_user_payment = entity.getVip_card_user_payment();
        if (vip_card_user_payment != null) {
            stmt.bindString(14, vip_card_user_payment);
        }
 
        String vip_card_user_phone = entity.getVip_card_user_phone();
        if (vip_card_user_phone != null) {
            stmt.bindString(15, vip_card_user_phone);
        }
 
        String vip_card_user_print_num = entity.getVip_card_user_print_num();
        if (vip_card_user_print_num != null) {
            stmt.bindString(16, vip_card_user_print_num);
        }
 
        String vip_card_user_ref_bill = entity.getVip_card_user_ref_bill();
        if (vip_card_user_ref_bill != null) {
            stmt.bindString(17, vip_card_user_ref_bill);
        }
 
        String vip_card_user_type = entity.getVip_card_user_type();
        if (vip_card_user_type != null) {
            stmt.bindString(18, vip_card_user_type);
        }
 
        String vip_card_user_valid_date = entity.getVip_card_user_valid_date();
        if (vip_card_user_valid_date != null) {
            stmt.bindString(19, vip_card_user_valid_date);
        }
        stmt.bindLong(20, entity.getVip_card_user_state() ? 1L: 0L);
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(21, system_book_code);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CustomerRegister readEntity(Cursor cursor, int offset) {
        CustomerRegister entity = new CustomerRegister( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // vip_card_user_log_fid
            cursor.getInt(offset + 1), // branch_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shift_table_bizday
            cursor.getInt(offset + 3), // shift_table_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vip_card_user_category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // vip_card_user_date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // vip_card_user_level
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vip_card_user_level_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vip_card_user_memo
            cursor.getFloat(offset + 9), // vip_card_user_money
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vip_card_user_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // vip_card_user_old_date
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // vip_card_user_operator
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // vip_card_user_payment
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // vip_card_user_phone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // vip_card_user_print_num
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // vip_card_user_ref_bill
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // vip_card_user_type
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // vip_card_user_valid_date
            cursor.getShort(offset + 19) != 0, // vip_card_user_state
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // system_book_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomerRegister entity, int offset) {
        entity.setVip_card_user_log_fid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBranch_num(cursor.getInt(offset + 1));
        entity.setShift_table_bizday(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShift_table_num(cursor.getInt(offset + 3));
        entity.setVip_card_user_category(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVip_card_user_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVip_card_user_level(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVip_card_user_level_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVip_card_user_memo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVip_card_user_money(cursor.getFloat(offset + 9));
        entity.setVip_card_user_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVip_card_user_old_date(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVip_card_user_operator(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVip_card_user_payment(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVip_card_user_phone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVip_card_user_print_num(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVip_card_user_ref_bill(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVip_card_user_type(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setVip_card_user_valid_date(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setVip_card_user_state(cursor.getShort(offset + 19) != 0);
        entity.setSystem_book_code(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CustomerRegister entity, long rowId) {
        return entity.getVip_card_user_log_fid();
    }
    
    @Override
    public String getKey(CustomerRegister entity) {
        if(entity != null) {
            return entity.getVip_card_user_log_fid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CustomerRegister entity) {
        return entity.getVip_card_user_log_fid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
