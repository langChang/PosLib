package com.nhsoft.poslib.service.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 138): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 138;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        ShiftTablePaymentDao.createTable(db, ifNotExists);
        PolicyPromotionDao.createTable(db, ifNotExists);
        PointOrderDao.createTable(db, ifNotExists);
        EmployeeEntityDao.createTable(db, ifNotExists);
        PosOrderDetailDao.createTable(db, ifNotExists);
        PaymentDao.createTable(db, ifNotExists);
        PosOrderDao.createTable(db, ifNotExists);
        PosOrderKitDetailDao.createTable(db, ifNotExists);
        SystemPrintDao.createTable(db, ifNotExists);
        CurrentUserDao.createTable(db, ifNotExists);
        IcCardMessageDao.createTable(db, ifNotExists);
        DeskOperatingParametersDao.createTable(db, ifNotExists);
        ItemCategoryDao.createTable(db, ifNotExists);
        PosItemKitDao.createTable(db, ifNotExists);
        PolicyPresentDetailDao.createTable(db, ifNotExists);
        ClientPointDao.createTable(db, ifNotExists);
        BranchResourceDao.createTable(db, ifNotExists);
        PosCarryLogDao.createTable(db, ifNotExists);
        UserRoleDao.createTable(db, ifNotExists);
        PolicyDiscountDetailDao.createTable(db, ifNotExists);
        BookResourceDao.createTable(db, ifNotExists);
        PosItemTerminalDao.createTable(db, ifNotExists);
        PosItemDao.createTable(db, ifNotExists);
        BottomMenuDao.createTable(db, ifNotExists);
        PolicyQuantityDao.createTable(db, ifNotExists);
        AppUserDao.createTable(db, ifNotExists);
        PayStyleToCashBankDao.createTable(db, ifNotExists);
        VipSendCardDao.createTable(db, ifNotExists);
        RelatCardDao.createTable(db, ifNotExists);
        TableMd5EntityDao.createTable(db, ifNotExists);
        PointOrderDetialDao.createTable(db, ifNotExists);
        InventoryDao.createTable(db, ifNotExists);
        BranchGroupDao.createTable(db, ifNotExists);
        MeasureUnitItemDao.createTable(db, ifNotExists);
        RolePrivilegeNewDao.createTable(db, ifNotExists);
        AmountPayDao.createTable(db, ifNotExists);
        PointPolicyDetailDao.createTable(db, ifNotExists);
        ReplaceCardDao.createTable(db, ifNotExists);
        MarketActionDao.createTable(db, ifNotExists);
        PolicyPromotionDetailDao.createTable(db, ifNotExists);
        PolicyPresentDao.createTable(db, ifNotExists);
        CardChangeDao.createTable(db, ifNotExists);
        PosItemGradeDao.createTable(db, ifNotExists);
        ShiftTableDao.createTable(db, ifNotExists);
        ChangeGoodsMenuDao.createTable(db, ifNotExists);
        BranchRegionDao.createTable(db, ifNotExists);
        TicketSendDetailDao.createTable(db, ifNotExists);
        AccountBankDao.createTable(db, ifNotExists);
        KeyGeneratorBizdayDao.createTable(db, ifNotExists);
        ManagementTemplateDao.createTable(db, ifNotExists);
        VipCRMLevelDetailDao.createTable(db, ifNotExists);
        LoginDao.createTable(db, ifNotExists);
        PrivilegeResourceNewDao.createTable(db, ifNotExists);
        CardDepositFailedDao.createTable(db, ifNotExists);
        BranchsBeanDao.createTable(db, ifNotExists);
        VipCrmAmaLevelDao.createTable(db, ifNotExists);
        PointRuleDao.createTable(db, ifNotExists);
        PolicyDiscountDao.createTable(db, ifNotExists);
        BranchDao.createTable(db, ifNotExists);
        ItemBarDao.createTable(db, ifNotExists);
        StoreHouseDao.createTable(db, ifNotExists);
        DemoEntityDao.createTable(db, ifNotExists);
        PolicyQuantityDetailDao.createTable(db, ifNotExists);
        SystemImageQrcodeDao.createTable(db, ifNotExists);
        TableMd5Dao.createTable(db, ifNotExists);
        CustomerRegisterDao.createTable(db, ifNotExists);
        VipStrangeSuccessSendMoneyDao.createTable(db, ifNotExists);
        OtherRevenueDao.createTable(db, ifNotExists);
        VipConsumeDao.createTable(db, ifNotExists);
        VipIcInitDao.createTable(db, ifNotExists);
        SystemRoleDao.createTable(db, ifNotExists);
        CardDepositDao.createTable(db, ifNotExists);
        CardTypeParamDao.createTable(db, ifNotExists);
        VipLevelPointRuleDao.createTable(db, ifNotExists);
        MarketActionDetailDao.createTable(db, ifNotExists);
        PointPolicyDao.createTable(db, ifNotExists);
        PrintOrderUsingDao.createTable(db, ifNotExists);
        PosMachineDao.createTable(db, ifNotExists);
        AggregationDao.createTable(db, ifNotExists);
        VipCrmPointRateDao.createTable(db, ifNotExists);
        PolicyMoneyDetailDao.createTable(db, ifNotExists);
        MeasureUnitDao.createTable(db, ifNotExists);
        AttachedScreenDao.createTable(db, ifNotExists);
        SystemBookDao.createTable(db, ifNotExists);
        PosItemGradeTerminalDao.createTable(db, ifNotExists);
        PolicyMoneyDao.createTable(db, ifNotExists);
        BranchMessageDao.createTable(db, ifNotExists);
        EmployeeDao.createTable(db, ifNotExists);
        VipCrmFeeDao.createTable(db, ifNotExists);
        ManagementTemplateDetailDao.createTable(db, ifNotExists);
        VipCRMLevelDao.createTable(db, ifNotExists);
        YunServiceDaysDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        ShiftTablePaymentDao.dropTable(db, ifExists);
        PolicyPromotionDao.dropTable(db, ifExists);
        PointOrderDao.dropTable(db, ifExists);
        EmployeeEntityDao.dropTable(db, ifExists);
        PosOrderDetailDao.dropTable(db, ifExists);
        PaymentDao.dropTable(db, ifExists);
        PosOrderDao.dropTable(db, ifExists);
        PosOrderKitDetailDao.dropTable(db, ifExists);
        SystemPrintDao.dropTable(db, ifExists);
        CurrentUserDao.dropTable(db, ifExists);
        IcCardMessageDao.dropTable(db, ifExists);
        DeskOperatingParametersDao.dropTable(db, ifExists);
        ItemCategoryDao.dropTable(db, ifExists);
        PosItemKitDao.dropTable(db, ifExists);
        PolicyPresentDetailDao.dropTable(db, ifExists);
        ClientPointDao.dropTable(db, ifExists);
        BranchResourceDao.dropTable(db, ifExists);
        PosCarryLogDao.dropTable(db, ifExists);
        UserRoleDao.dropTable(db, ifExists);
        PolicyDiscountDetailDao.dropTable(db, ifExists);
        BookResourceDao.dropTable(db, ifExists);
        PosItemTerminalDao.dropTable(db, ifExists);
        PosItemDao.dropTable(db, ifExists);
        BottomMenuDao.dropTable(db, ifExists);
        PolicyQuantityDao.dropTable(db, ifExists);
        AppUserDao.dropTable(db, ifExists);
        PayStyleToCashBankDao.dropTable(db, ifExists);
        VipSendCardDao.dropTable(db, ifExists);
        RelatCardDao.dropTable(db, ifExists);
        TableMd5EntityDao.dropTable(db, ifExists);
        PointOrderDetialDao.dropTable(db, ifExists);
        InventoryDao.dropTable(db, ifExists);
        BranchGroupDao.dropTable(db, ifExists);
        MeasureUnitItemDao.dropTable(db, ifExists);
        RolePrivilegeNewDao.dropTable(db, ifExists);
        AmountPayDao.dropTable(db, ifExists);
        PointPolicyDetailDao.dropTable(db, ifExists);
        ReplaceCardDao.dropTable(db, ifExists);
        MarketActionDao.dropTable(db, ifExists);
        PolicyPromotionDetailDao.dropTable(db, ifExists);
        PolicyPresentDao.dropTable(db, ifExists);
        CardChangeDao.dropTable(db, ifExists);
        PosItemGradeDao.dropTable(db, ifExists);
        ShiftTableDao.dropTable(db, ifExists);
        ChangeGoodsMenuDao.dropTable(db, ifExists);
        BranchRegionDao.dropTable(db, ifExists);
        TicketSendDetailDao.dropTable(db, ifExists);
        AccountBankDao.dropTable(db, ifExists);
        KeyGeneratorBizdayDao.dropTable(db, ifExists);
        ManagementTemplateDao.dropTable(db, ifExists);
        VipCRMLevelDetailDao.dropTable(db, ifExists);
        LoginDao.dropTable(db, ifExists);
        PrivilegeResourceNewDao.dropTable(db, ifExists);
        CardDepositFailedDao.dropTable(db, ifExists);
        BranchsBeanDao.dropTable(db, ifExists);
        VipCrmAmaLevelDao.dropTable(db, ifExists);
        PointRuleDao.dropTable(db, ifExists);
        PolicyDiscountDao.dropTable(db, ifExists);
        BranchDao.dropTable(db, ifExists);
        ItemBarDao.dropTable(db, ifExists);
        StoreHouseDao.dropTable(db, ifExists);
        DemoEntityDao.dropTable(db, ifExists);
        PolicyQuantityDetailDao.dropTable(db, ifExists);
        SystemImageQrcodeDao.dropTable(db, ifExists);
        TableMd5Dao.dropTable(db, ifExists);
        CustomerRegisterDao.dropTable(db, ifExists);
        VipStrangeSuccessSendMoneyDao.dropTable(db, ifExists);
        OtherRevenueDao.dropTable(db, ifExists);
        VipConsumeDao.dropTable(db, ifExists);
        VipIcInitDao.dropTable(db, ifExists);
        SystemRoleDao.dropTable(db, ifExists);
        CardDepositDao.dropTable(db, ifExists);
        CardTypeParamDao.dropTable(db, ifExists);
        VipLevelPointRuleDao.dropTable(db, ifExists);
        MarketActionDetailDao.dropTable(db, ifExists);
        PointPolicyDao.dropTable(db, ifExists);
        PrintOrderUsingDao.dropTable(db, ifExists);
        PosMachineDao.dropTable(db, ifExists);
        AggregationDao.dropTable(db, ifExists);
        VipCrmPointRateDao.dropTable(db, ifExists);
        PolicyMoneyDetailDao.dropTable(db, ifExists);
        MeasureUnitDao.dropTable(db, ifExists);
        AttachedScreenDao.dropTable(db, ifExists);
        SystemBookDao.dropTable(db, ifExists);
        PosItemGradeTerminalDao.dropTable(db, ifExists);
        PolicyMoneyDao.dropTable(db, ifExists);
        BranchMessageDao.dropTable(db, ifExists);
        EmployeeDao.dropTable(db, ifExists);
        VipCrmFeeDao.dropTable(db, ifExists);
        ManagementTemplateDetailDao.dropTable(db, ifExists);
        VipCRMLevelDao.dropTable(db, ifExists);
        YunServiceDaysDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ShiftTablePaymentDao.class);
        registerDaoClass(PolicyPromotionDao.class);
        registerDaoClass(PointOrderDao.class);
        registerDaoClass(EmployeeEntityDao.class);
        registerDaoClass(PosOrderDetailDao.class);
        registerDaoClass(PaymentDao.class);
        registerDaoClass(PosOrderDao.class);
        registerDaoClass(PosOrderKitDetailDao.class);
        registerDaoClass(SystemPrintDao.class);
        registerDaoClass(CurrentUserDao.class);
        registerDaoClass(IcCardMessageDao.class);
        registerDaoClass(DeskOperatingParametersDao.class);
        registerDaoClass(ItemCategoryDao.class);
        registerDaoClass(PosItemKitDao.class);
        registerDaoClass(PolicyPresentDetailDao.class);
        registerDaoClass(ClientPointDao.class);
        registerDaoClass(BranchResourceDao.class);
        registerDaoClass(PosCarryLogDao.class);
        registerDaoClass(UserRoleDao.class);
        registerDaoClass(PolicyDiscountDetailDao.class);
        registerDaoClass(BookResourceDao.class);
        registerDaoClass(PosItemTerminalDao.class);
        registerDaoClass(PosItemDao.class);
        registerDaoClass(BottomMenuDao.class);
        registerDaoClass(PolicyQuantityDao.class);
        registerDaoClass(AppUserDao.class);
        registerDaoClass(PayStyleToCashBankDao.class);
        registerDaoClass(VipSendCardDao.class);
        registerDaoClass(RelatCardDao.class);
        registerDaoClass(TableMd5EntityDao.class);
        registerDaoClass(PointOrderDetialDao.class);
        registerDaoClass(InventoryDao.class);
        registerDaoClass(BranchGroupDao.class);
        registerDaoClass(MeasureUnitItemDao.class);
        registerDaoClass(RolePrivilegeNewDao.class);
        registerDaoClass(AmountPayDao.class);
        registerDaoClass(PointPolicyDetailDao.class);
        registerDaoClass(ReplaceCardDao.class);
        registerDaoClass(MarketActionDao.class);
        registerDaoClass(PolicyPromotionDetailDao.class);
        registerDaoClass(PolicyPresentDao.class);
        registerDaoClass(CardChangeDao.class);
        registerDaoClass(PosItemGradeDao.class);
        registerDaoClass(ShiftTableDao.class);
        registerDaoClass(ChangeGoodsMenuDao.class);
        registerDaoClass(BranchRegionDao.class);
        registerDaoClass(TicketSendDetailDao.class);
        registerDaoClass(AccountBankDao.class);
        registerDaoClass(KeyGeneratorBizdayDao.class);
        registerDaoClass(ManagementTemplateDao.class);
        registerDaoClass(VipCRMLevelDetailDao.class);
        registerDaoClass(LoginDao.class);
        registerDaoClass(PrivilegeResourceNewDao.class);
        registerDaoClass(CardDepositFailedDao.class);
        registerDaoClass(BranchsBeanDao.class);
        registerDaoClass(VipCrmAmaLevelDao.class);
        registerDaoClass(PointRuleDao.class);
        registerDaoClass(PolicyDiscountDao.class);
        registerDaoClass(BranchDao.class);
        registerDaoClass(ItemBarDao.class);
        registerDaoClass(StoreHouseDao.class);
        registerDaoClass(DemoEntityDao.class);
        registerDaoClass(PolicyQuantityDetailDao.class);
        registerDaoClass(SystemImageQrcodeDao.class);
        registerDaoClass(TableMd5Dao.class);
        registerDaoClass(CustomerRegisterDao.class);
        registerDaoClass(VipStrangeSuccessSendMoneyDao.class);
        registerDaoClass(OtherRevenueDao.class);
        registerDaoClass(VipConsumeDao.class);
        registerDaoClass(VipIcInitDao.class);
        registerDaoClass(SystemRoleDao.class);
        registerDaoClass(CardDepositDao.class);
        registerDaoClass(CardTypeParamDao.class);
        registerDaoClass(VipLevelPointRuleDao.class);
        registerDaoClass(MarketActionDetailDao.class);
        registerDaoClass(PointPolicyDao.class);
        registerDaoClass(PrintOrderUsingDao.class);
        registerDaoClass(PosMachineDao.class);
        registerDaoClass(AggregationDao.class);
        registerDaoClass(VipCrmPointRateDao.class);
        registerDaoClass(PolicyMoneyDetailDao.class);
        registerDaoClass(MeasureUnitDao.class);
        registerDaoClass(AttachedScreenDao.class);
        registerDaoClass(SystemBookDao.class);
        registerDaoClass(PosItemGradeTerminalDao.class);
        registerDaoClass(PolicyMoneyDao.class);
        registerDaoClass(BranchMessageDao.class);
        registerDaoClass(EmployeeDao.class);
        registerDaoClass(VipCrmFeeDao.class);
        registerDaoClass(ManagementTemplateDetailDao.class);
        registerDaoClass(VipCRMLevelDao.class);
        registerDaoClass(YunServiceDaysDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
