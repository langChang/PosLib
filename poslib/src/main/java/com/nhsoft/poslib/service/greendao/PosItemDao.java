package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.PosItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS_ITEM".
*/
public class PosItemDao extends AbstractDao<PosItem, Long> {

    public static final String TABLENAME = "POS_ITEM";

    /**
     * Properties of entity PosItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Item_num = new Property(0, Long.class, "item_num", true, "ITEM_NUM");
        public final static Property Item_name = new Property(1, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Store_item_pinyin = new Property(2, String.class, "store_item_pinyin", false, "STORE_ITEM_PINYIN");
        public final static Property Item_type = new Property(3, int.class, "item_type", false, "ITEM_TYPE");
        public final static Property Item_unit = new Property(4, String.class, "item_unit", false, "ITEM_UNIT");
        public final static Property Item_category = new Property(5, String.class, "item_category", false, "ITEM_CATEGORY");
        public final static Property Item_min_price = new Property(6, float.class, "item_min_price", false, "ITEM_MIN_PRICE");
        public final static Property Item_category_code = new Property(7, String.class, "item_category_code", false, "ITEM_CATEGORY_CODE");
        public final static Property Item_department = new Property(8, String.class, "item_department", false, "ITEM_DEPARTMENT");
        public final static Property Item_sale_message = new Property(9, boolean.class, "item_sale_message", false, "ITEM_SALE_MESSAGE");
        public final static Property Item_pos_change_price_flag = new Property(10, boolean.class, "item_pos_change_price_flag", false, "ITEM_POS_CHANGE_PRICE_FLAG");
        public final static Property Item_del_tag = new Property(11, boolean.class, "item_del_tag", false, "ITEM_DEL_TAG");
        public final static Property Item_point_actived = new Property(12, boolean.class, "item_point_actived", false, "ITEM_POINT_ACTIVED");
        public final static Property Item_point_value = new Property(13, float.class, "item_point_value", false, "ITEM_POINT_VALUE");
        public final static Property Item_brand = new Property(14, String.class, "item_brand", false, "ITEM_BRAND");
        public final static Property Item_cost_mode = new Property(15, String.class, "item_cost_mode", false, "ITEM_COST_MODE");
        public final static Property Item_valid_period = new Property(16, int.class, "item_valid_period", false, "ITEM_VALID_PERIOD");
        public final static Property Item_cost_price = new Property(17, float.class, "item_cost_price", false, "ITEM_COST_PRICE");
        public final static Property Item_transfer_price = new Property(18, float.class, "item_transfer_price", false, "ITEM_TRANSFER_PRICE");
        public final static Property Item_assist_unit = new Property(19, String.class, "item_assist_unit", false, "ITEM_ASSIST_UNIT");
        public final static Property Item_sequence = new Property(20, int.class, "item_sequence", false, "ITEM_SEQUENCE");
        public final static Property Item_eliminative_flag = new Property(21, boolean.class, "item_eliminative_flag", false, "ITEM_ELIMINATIVE_FLAG");
        public final static Property Item_create_time = new Property(22, String.class, "item_create_time", false, "ITEM_CREATE_TIME");
        public final static Property Item_last_edit_time = new Property(23, String.class, "item_last_edit_time", false, "ITEM_LAST_EDIT_TIME");
        public final static Property Item_assist_rate = new Property(24, float.class, "item_assist_rate", false, "ITEM_ASSIST_RATE");
        public final static Property Item_status = new Property(25, int.class, "item_status", false, "ITEM_STATUS");
        public final static Property Item_discounted = new Property(26, boolean.class, "item_discounted", false, "ITEM_DISCOUNTED");
        public final static Property Item_weight_flag = new Property(27, boolean.class, "item_weight_flag", false, "ITEM_WEIGHT_FLAG");
        public final static Property Branch_sale_cease_flag = new Property(28, boolean.class, "branch_sale_cease_flag", false, "BRANCH_SALE_CEASE_FLAG");
        public final static Property Item_sale_cease_flag = new Property(29, Boolean.class, "item_sale_cease_flag", false, "ITEM_SALE_CEASE_FLAG");
        public final static Property Branch_max_price = new Property(30, float.class, "branch_max_price", false, "BRANCH_MAX_PRICE");
        public final static Property Branch_min_price = new Property(31, Float.class, "branch_min_price", false, "BRANCH_MIN_PRICE");
        public final static Property Item_max_price = new Property(32, Float.class, "item_max_price", false, "ITEM_MAX_PRICE");
        public final static Property Branch_regular_price = new Property(33, float.class, "branch_regular_price", false, "BRANCH_REGULAR_PRICE");
        public final static Property Branch_level2_price = new Property(34, float.class, "branch_level2_price", false, "BRANCH_LEVEL2_PRICE");
        public final static Property Branch_level3_price = new Property(35, float.class, "branch_level3_price", false, "BRANCH_LEVEL3_PRICE");
        public final static Property Branch_level4_price = new Property(36, float.class, "branch_level4_price", false, "BRANCH_LEVEL4_PRICE");
        public final static Property Branch_num = new Property(37, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Item_regular_price = new Property(38, float.class, "item_regular_price", false, "ITEM_REGULAR_PRICE");
        public final static Property Item_level2_price = new Property(39, float.class, "item_level2_price", false, "ITEM_LEVEL2_PRICE");
        public final static Property Item_level3_price = new Property(40, float.class, "item_level3_price", false, "ITEM_LEVEL3_PRICE");
        public final static Property Item_level4_price = new Property(41, float.class, "item_level4_price", false, "ITEM_LEVEL4_PRICE");
        public final static Property Pos_item_selected = new Property(42, Boolean.class, "pos_item_selected", false, "POS_ITEM_SELECTED");
        public final static Property Pos_images_json = new Property(43, String.class, "pos_images_json", false, "POS_IMAGES_JSON");
    }

    private DaoSession daoSession;


    public PosItemDao(DaoConfig config) {
        super(config);
    }
    
    public PosItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS_ITEM\" (" + //
                "\"ITEM_NUM\" INTEGER PRIMARY KEY ," + // 0: item_num
                "\"ITEM_NAME\" TEXT," + // 1: item_name
                "\"STORE_ITEM_PINYIN\" TEXT," + // 2: store_item_pinyin
                "\"ITEM_TYPE\" INTEGER NOT NULL ," + // 3: item_type
                "\"ITEM_UNIT\" TEXT," + // 4: item_unit
                "\"ITEM_CATEGORY\" TEXT," + // 5: item_category
                "\"ITEM_MIN_PRICE\" REAL NOT NULL ," + // 6: item_min_price
                "\"ITEM_CATEGORY_CODE\" TEXT," + // 7: item_category_code
                "\"ITEM_DEPARTMENT\" TEXT," + // 8: item_department
                "\"ITEM_SALE_MESSAGE\" INTEGER NOT NULL ," + // 9: item_sale_message
                "\"ITEM_POS_CHANGE_PRICE_FLAG\" INTEGER NOT NULL ," + // 10: item_pos_change_price_flag
                "\"ITEM_DEL_TAG\" INTEGER NOT NULL ," + // 11: item_del_tag
                "\"ITEM_POINT_ACTIVED\" INTEGER NOT NULL ," + // 12: item_point_actived
                "\"ITEM_POINT_VALUE\" REAL NOT NULL ," + // 13: item_point_value
                "\"ITEM_BRAND\" TEXT," + // 14: item_brand
                "\"ITEM_COST_MODE\" TEXT," + // 15: item_cost_mode
                "\"ITEM_VALID_PERIOD\" INTEGER NOT NULL ," + // 16: item_valid_period
                "\"ITEM_COST_PRICE\" REAL NOT NULL ," + // 17: item_cost_price
                "\"ITEM_TRANSFER_PRICE\" REAL NOT NULL ," + // 18: item_transfer_price
                "\"ITEM_ASSIST_UNIT\" TEXT," + // 19: item_assist_unit
                "\"ITEM_SEQUENCE\" INTEGER NOT NULL ," + // 20: item_sequence
                "\"ITEM_ELIMINATIVE_FLAG\" INTEGER NOT NULL ," + // 21: item_eliminative_flag
                "\"ITEM_CREATE_TIME\" TEXT," + // 22: item_create_time
                "\"ITEM_LAST_EDIT_TIME\" TEXT," + // 23: item_last_edit_time
                "\"ITEM_ASSIST_RATE\" REAL NOT NULL ," + // 24: item_assist_rate
                "\"ITEM_STATUS\" INTEGER NOT NULL ," + // 25: item_status
                "\"ITEM_DISCOUNTED\" INTEGER NOT NULL ," + // 26: item_discounted
                "\"ITEM_WEIGHT_FLAG\" INTEGER NOT NULL ," + // 27: item_weight_flag
                "\"BRANCH_SALE_CEASE_FLAG\" INTEGER NOT NULL ," + // 28: branch_sale_cease_flag
                "\"ITEM_SALE_CEASE_FLAG\" INTEGER," + // 29: item_sale_cease_flag
                "\"BRANCH_MAX_PRICE\" REAL NOT NULL ," + // 30: branch_max_price
                "\"BRANCH_MIN_PRICE\" REAL," + // 31: branch_min_price
                "\"ITEM_MAX_PRICE\" REAL," + // 32: item_max_price
                "\"BRANCH_REGULAR_PRICE\" REAL NOT NULL ," + // 33: branch_regular_price
                "\"BRANCH_LEVEL2_PRICE\" REAL NOT NULL ," + // 34: branch_level2_price
                "\"BRANCH_LEVEL3_PRICE\" REAL NOT NULL ," + // 35: branch_level3_price
                "\"BRANCH_LEVEL4_PRICE\" REAL NOT NULL ," + // 36: branch_level4_price
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 37: branch_num
                "\"ITEM_REGULAR_PRICE\" REAL NOT NULL ," + // 38: item_regular_price
                "\"ITEM_LEVEL2_PRICE\" REAL NOT NULL ," + // 39: item_level2_price
                "\"ITEM_LEVEL3_PRICE\" REAL NOT NULL ," + // 40: item_level3_price
                "\"ITEM_LEVEL4_PRICE\" REAL NOT NULL ," + // 41: item_level4_price
                "\"POS_ITEM_SELECTED\" INTEGER," + // 42: pos_item_selected
                "\"POS_IMAGES_JSON\" TEXT);"); // 43: pos_images_json
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PosItem entity) {
        stmt.clearBindings();
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(1, item_num);
        }
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(2, item_name);
        }
 
        String store_item_pinyin = entity.getStore_item_pinyin();
        if (store_item_pinyin != null) {
            stmt.bindString(3, store_item_pinyin);
        }
        stmt.bindLong(4, entity.getItem_type());
 
        String item_unit = entity.getItem_unit();
        if (item_unit != null) {
            stmt.bindString(5, item_unit);
        }
 
        String item_category = entity.getItem_category();
        if (item_category != null) {
            stmt.bindString(6, item_category);
        }
        stmt.bindDouble(7, entity.getItem_min_price());
 
        String item_category_code = entity.getItem_category_code();
        if (item_category_code != null) {
            stmt.bindString(8, item_category_code);
        }
 
        String item_department = entity.getItem_department();
        if (item_department != null) {
            stmt.bindString(9, item_department);
        }
        stmt.bindLong(10, entity.getItem_sale_message() ? 1L: 0L);
        stmt.bindLong(11, entity.getItem_pos_change_price_flag() ? 1L: 0L);
        stmt.bindLong(12, entity.getItem_del_tag() ? 1L: 0L);
        stmt.bindLong(13, entity.getItem_point_actived() ? 1L: 0L);
        stmt.bindDouble(14, entity.getItem_point_value());
 
        String item_brand = entity.getItem_brand();
        if (item_brand != null) {
            stmt.bindString(15, item_brand);
        }
 
        String item_cost_mode = entity.getItem_cost_mode();
        if (item_cost_mode != null) {
            stmt.bindString(16, item_cost_mode);
        }
        stmt.bindLong(17, entity.getItem_valid_period());
        stmt.bindDouble(18, entity.getItem_cost_price());
        stmt.bindDouble(19, entity.getItem_transfer_price());
 
        String item_assist_unit = entity.getItem_assist_unit();
        if (item_assist_unit != null) {
            stmt.bindString(20, item_assist_unit);
        }
        stmt.bindLong(21, entity.getItem_sequence());
        stmt.bindLong(22, entity.getItem_eliminative_flag() ? 1L: 0L);
 
        String item_create_time = entity.getItem_create_time();
        if (item_create_time != null) {
            stmt.bindString(23, item_create_time);
        }
 
        String item_last_edit_time = entity.getItem_last_edit_time();
        if (item_last_edit_time != null) {
            stmt.bindString(24, item_last_edit_time);
        }
        stmt.bindDouble(25, entity.getItem_assist_rate());
        stmt.bindLong(26, entity.getItem_status());
        stmt.bindLong(27, entity.getItem_discounted() ? 1L: 0L);
        stmt.bindLong(28, entity.getItem_weight_flag() ? 1L: 0L);
        stmt.bindLong(29, entity.getBranch_sale_cease_flag() ? 1L: 0L);
 
        Boolean item_sale_cease_flag = entity.getItem_sale_cease_flag();
        if (item_sale_cease_flag != null) {
            stmt.bindLong(30, item_sale_cease_flag ? 1L: 0L);
        }
        stmt.bindDouble(31, entity.getBranch_max_price());
 
        Float branch_min_price = entity.getBranch_min_price();
        if (branch_min_price != null) {
            stmt.bindDouble(32, branch_min_price);
        }
 
        Float item_max_price = entity.getItem_max_price();
        if (item_max_price != null) {
            stmt.bindDouble(33, item_max_price);
        }
        stmt.bindDouble(34, entity.getBranch_regular_price());
        stmt.bindDouble(35, entity.getBranch_level2_price());
        stmt.bindDouble(36, entity.getBranch_level3_price());
        stmt.bindDouble(37, entity.getBranch_level4_price());
        stmt.bindLong(38, entity.getBranch_num());
        stmt.bindDouble(39, entity.getItem_regular_price());
        stmt.bindDouble(40, entity.getItem_level2_price());
        stmt.bindDouble(41, entity.getItem_level3_price());
        stmt.bindDouble(42, entity.getItem_level4_price());
 
        Boolean pos_item_selected = entity.getPos_item_selected();
        if (pos_item_selected != null) {
            stmt.bindLong(43, pos_item_selected ? 1L: 0L);
        }
 
        String pos_images_json = entity.getPos_images_json();
        if (pos_images_json != null) {
            stmt.bindString(44, pos_images_json);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PosItem entity) {
        stmt.clearBindings();
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(1, item_num);
        }
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(2, item_name);
        }
 
        String store_item_pinyin = entity.getStore_item_pinyin();
        if (store_item_pinyin != null) {
            stmt.bindString(3, store_item_pinyin);
        }
        stmt.bindLong(4, entity.getItem_type());
 
        String item_unit = entity.getItem_unit();
        if (item_unit != null) {
            stmt.bindString(5, item_unit);
        }
 
        String item_category = entity.getItem_category();
        if (item_category != null) {
            stmt.bindString(6, item_category);
        }
        stmt.bindDouble(7, entity.getItem_min_price());
 
        String item_category_code = entity.getItem_category_code();
        if (item_category_code != null) {
            stmt.bindString(8, item_category_code);
        }
 
        String item_department = entity.getItem_department();
        if (item_department != null) {
            stmt.bindString(9, item_department);
        }
        stmt.bindLong(10, entity.getItem_sale_message() ? 1L: 0L);
        stmt.bindLong(11, entity.getItem_pos_change_price_flag() ? 1L: 0L);
        stmt.bindLong(12, entity.getItem_del_tag() ? 1L: 0L);
        stmt.bindLong(13, entity.getItem_point_actived() ? 1L: 0L);
        stmt.bindDouble(14, entity.getItem_point_value());
 
        String item_brand = entity.getItem_brand();
        if (item_brand != null) {
            stmt.bindString(15, item_brand);
        }
 
        String item_cost_mode = entity.getItem_cost_mode();
        if (item_cost_mode != null) {
            stmt.bindString(16, item_cost_mode);
        }
        stmt.bindLong(17, entity.getItem_valid_period());
        stmt.bindDouble(18, entity.getItem_cost_price());
        stmt.bindDouble(19, entity.getItem_transfer_price());
 
        String item_assist_unit = entity.getItem_assist_unit();
        if (item_assist_unit != null) {
            stmt.bindString(20, item_assist_unit);
        }
        stmt.bindLong(21, entity.getItem_sequence());
        stmt.bindLong(22, entity.getItem_eliminative_flag() ? 1L: 0L);
 
        String item_create_time = entity.getItem_create_time();
        if (item_create_time != null) {
            stmt.bindString(23, item_create_time);
        }
 
        String item_last_edit_time = entity.getItem_last_edit_time();
        if (item_last_edit_time != null) {
            stmt.bindString(24, item_last_edit_time);
        }
        stmt.bindDouble(25, entity.getItem_assist_rate());
        stmt.bindLong(26, entity.getItem_status());
        stmt.bindLong(27, entity.getItem_discounted() ? 1L: 0L);
        stmt.bindLong(28, entity.getItem_weight_flag() ? 1L: 0L);
        stmt.bindLong(29, entity.getBranch_sale_cease_flag() ? 1L: 0L);
 
        Boolean item_sale_cease_flag = entity.getItem_sale_cease_flag();
        if (item_sale_cease_flag != null) {
            stmt.bindLong(30, item_sale_cease_flag ? 1L: 0L);
        }
        stmt.bindDouble(31, entity.getBranch_max_price());
 
        Float branch_min_price = entity.getBranch_min_price();
        if (branch_min_price != null) {
            stmt.bindDouble(32, branch_min_price);
        }
 
        Float item_max_price = entity.getItem_max_price();
        if (item_max_price != null) {
            stmt.bindDouble(33, item_max_price);
        }
        stmt.bindDouble(34, entity.getBranch_regular_price());
        stmt.bindDouble(35, entity.getBranch_level2_price());
        stmt.bindDouble(36, entity.getBranch_level3_price());
        stmt.bindDouble(37, entity.getBranch_level4_price());
        stmt.bindLong(38, entity.getBranch_num());
        stmt.bindDouble(39, entity.getItem_regular_price());
        stmt.bindDouble(40, entity.getItem_level2_price());
        stmt.bindDouble(41, entity.getItem_level3_price());
        stmt.bindDouble(42, entity.getItem_level4_price());
 
        Boolean pos_item_selected = entity.getPos_item_selected();
        if (pos_item_selected != null) {
            stmt.bindLong(43, pos_item_selected ? 1L: 0L);
        }
 
        String pos_images_json = entity.getPos_images_json();
        if (pos_images_json != null) {
            stmt.bindString(44, pos_images_json);
        }
    }

    @Override
    protected final void attachEntity(PosItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PosItem readEntity(Cursor cursor, int offset) {
        PosItem entity = new PosItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // item_num
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // item_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // store_item_pinyin
            cursor.getInt(offset + 3), // item_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // item_unit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // item_category
            cursor.getFloat(offset + 6), // item_min_price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // item_category_code
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // item_department
            cursor.getShort(offset + 9) != 0, // item_sale_message
            cursor.getShort(offset + 10) != 0, // item_pos_change_price_flag
            cursor.getShort(offset + 11) != 0, // item_del_tag
            cursor.getShort(offset + 12) != 0, // item_point_actived
            cursor.getFloat(offset + 13), // item_point_value
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // item_brand
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // item_cost_mode
            cursor.getInt(offset + 16), // item_valid_period
            cursor.getFloat(offset + 17), // item_cost_price
            cursor.getFloat(offset + 18), // item_transfer_price
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // item_assist_unit
            cursor.getInt(offset + 20), // item_sequence
            cursor.getShort(offset + 21) != 0, // item_eliminative_flag
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // item_create_time
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // item_last_edit_time
            cursor.getFloat(offset + 24), // item_assist_rate
            cursor.getInt(offset + 25), // item_status
            cursor.getShort(offset + 26) != 0, // item_discounted
            cursor.getShort(offset + 27) != 0, // item_weight_flag
            cursor.getShort(offset + 28) != 0, // branch_sale_cease_flag
            cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0, // item_sale_cease_flag
            cursor.getFloat(offset + 30), // branch_max_price
            cursor.isNull(offset + 31) ? null : cursor.getFloat(offset + 31), // branch_min_price
            cursor.isNull(offset + 32) ? null : cursor.getFloat(offset + 32), // item_max_price
            cursor.getFloat(offset + 33), // branch_regular_price
            cursor.getFloat(offset + 34), // branch_level2_price
            cursor.getFloat(offset + 35), // branch_level3_price
            cursor.getFloat(offset + 36), // branch_level4_price
            cursor.getInt(offset + 37), // branch_num
            cursor.getFloat(offset + 38), // item_regular_price
            cursor.getFloat(offset + 39), // item_level2_price
            cursor.getFloat(offset + 40), // item_level3_price
            cursor.getFloat(offset + 41), // item_level4_price
            cursor.isNull(offset + 42) ? null : cursor.getShort(offset + 42) != 0, // pos_item_selected
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43) // pos_images_json
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PosItem entity, int offset) {
        entity.setItem_num(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStore_item_pinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItem_type(cursor.getInt(offset + 3));
        entity.setItem_unit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItem_category(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItem_min_price(cursor.getFloat(offset + 6));
        entity.setItem_category_code(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setItem_department(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setItem_sale_message(cursor.getShort(offset + 9) != 0);
        entity.setItem_pos_change_price_flag(cursor.getShort(offset + 10) != 0);
        entity.setItem_del_tag(cursor.getShort(offset + 11) != 0);
        entity.setItem_point_actived(cursor.getShort(offset + 12) != 0);
        entity.setItem_point_value(cursor.getFloat(offset + 13));
        entity.setItem_brand(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setItem_cost_mode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setItem_valid_period(cursor.getInt(offset + 16));
        entity.setItem_cost_price(cursor.getFloat(offset + 17));
        entity.setItem_transfer_price(cursor.getFloat(offset + 18));
        entity.setItem_assist_unit(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setItem_sequence(cursor.getInt(offset + 20));
        entity.setItem_eliminative_flag(cursor.getShort(offset + 21) != 0);
        entity.setItem_create_time(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setItem_last_edit_time(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setItem_assist_rate(cursor.getFloat(offset + 24));
        entity.setItem_status(cursor.getInt(offset + 25));
        entity.setItem_discounted(cursor.getShort(offset + 26) != 0);
        entity.setItem_weight_flag(cursor.getShort(offset + 27) != 0);
        entity.setBranch_sale_cease_flag(cursor.getShort(offset + 28) != 0);
        entity.setItem_sale_cease_flag(cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0);
        entity.setBranch_max_price(cursor.getFloat(offset + 30));
        entity.setBranch_min_price(cursor.isNull(offset + 31) ? null : cursor.getFloat(offset + 31));
        entity.setItem_max_price(cursor.isNull(offset + 32) ? null : cursor.getFloat(offset + 32));
        entity.setBranch_regular_price(cursor.getFloat(offset + 33));
        entity.setBranch_level2_price(cursor.getFloat(offset + 34));
        entity.setBranch_level3_price(cursor.getFloat(offset + 35));
        entity.setBranch_level4_price(cursor.getFloat(offset + 36));
        entity.setBranch_num(cursor.getInt(offset + 37));
        entity.setItem_regular_price(cursor.getFloat(offset + 38));
        entity.setItem_level2_price(cursor.getFloat(offset + 39));
        entity.setItem_level3_price(cursor.getFloat(offset + 40));
        entity.setItem_level4_price(cursor.getFloat(offset + 41));
        entity.setPos_item_selected(cursor.isNull(offset + 42) ? null : cursor.getShort(offset + 42) != 0);
        entity.setPos_images_json(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PosItem entity, long rowId) {
        entity.setItem_num(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PosItem entity) {
        if(entity != null) {
            return entity.getItem_num();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PosItem entity) {
        return entity.getItem_num() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
