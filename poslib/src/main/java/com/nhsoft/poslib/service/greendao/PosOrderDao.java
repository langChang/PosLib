package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.order.PosOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS_ORDER".
*/
public class PosOrderDao extends AbstractDao<PosOrder, String> {

    public static final String TABLENAME = "POS_ORDER";

    /**
     * Properties of entity PosOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderNo = new Property(0, String.class, "orderNo", true, "ORDER_NO");
        public final static Property LayawayOrderNo = new Property(1, String.class, "layawayOrderNo", false, "LAYAWAY_ORDER_NO");
        public final static Property ClientFid = new Property(2, String.class, "clientFid", false, "CLIENT_FID");
        public final static Property StorehouseNum = new Property(3, int.class, "storehouseNum", false, "STOREHOUSE_NUM");
        public final static Property SystemBookCode = new Property(4, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(5, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property ShiftTableNum = new Property(6, int.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property ShiftTableBizday = new Property(7, String.class, "shiftTableBizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property OrderDate = new Property(8, String.class, "orderDate", false, "ORDER_DATE");
        public final static Property OrderSoldBy = new Property(9, String.class, "orderSoldBy", false, "ORDER_SOLD_BY");
        public final static Property OrderOperator = new Property(10, String.class, "orderOperator", false, "ORDER_OPERATOR");
        public final static Property OrderOperateTime = new Property(11, String.class, "orderOperateTime", false, "ORDER_OPERATE_TIME");
        public final static Property OrderFlag = new Property(12, Boolean.class, "orderFlag", false, "ORDER_FLAG");
        public final static Property OrderPrintedNum = new Property(13, String.class, "orderPrintedNum", false, "ORDER_PRINTED_NUM");
        public final static Property OrderCardUser = new Property(14, String.class, "orderCardUser", false, "ORDER_CARD_USER");
        public final static Property OrderCardTypeDesc = new Property(15, String.class, "orderCardTypeDesc", false, "ORDER_CARD_TYPE_DESC");
        public final static Property OrderDiscountMoney = new Property(16, float.class, "orderDiscountMoney", false, "ORDER_DISCOUNT_MONEY");
        public final static Property OrderCommission = new Property(17, float.class, "orderCommission", false, "ORDER_COMMISSION");
        public final static Property OrderTotalMoney = new Property(18, float.class, "orderTotalMoney", false, "ORDER_TOTAL_MONEY");
        public final static Property OrderPaymentMoney = new Property(19, float.class, "orderPaymentMoney", false, "ORDER_PAYMENT_MONEY");
        public final static Property OrderRound = new Property(20, float.class, "orderRound", false, "ORDER_ROUND");
        public final static Property OrderBalance = new Property(21, float.class, "orderBalance", false, "ORDER_BALANCE");
        public final static Property OrderTotalInvoice = new Property(22, float.class, "orderTotalInvoice", false, "ORDER_TOTAL_INVOICE");
        public final static Property OrderChange = new Property(23, float.class, "orderChange", false, "ORDER_CHANGE");
        public final static Property OrderTime = new Property(24, String.class, "orderTime", false, "ORDER_TIME");
        public final static Property OrderMachine = new Property(25, String.class, "orderMachine", false, "ORDER_MACHINE");
        public final static Property OrderChangeAuditor = new Property(26, String.class, "orderChangeAuditor", false, "ORDER_CHANGE_AUDITOR");
        public final static Property OrderChangeTime = new Property(27, String.class, "orderChangeTime", false, "ORDER_CHANGE_TIME");
        public final static Property OrderPayee = new Property(28, String.class, "orderPayee", false, "ORDER_PAYEE");
        public final static Property OrderStateCode = new Property(29, int.class, "orderStateCode", false, "ORDER_STATE_CODE");
        public final static Property OrderStateName = new Property(30, String.class, "orderStateName", false, "ORDER_STATE_NAME");
        public final static Property OrderMemo = new Property(31, String.class, "orderMemo", false, "ORDER_MEMO");
        public final static Property OrderRefBillno = new Property(32, String.class, "orderRefBillno", false, "ORDER_REF_BILLNO");
        public final static Property OrderPoint = new Property(33, float.class, "orderPoint", false, "ORDER_POINT");
        public final static Property OrderGrossProfit = new Property(34, float.class, "orderGrossProfit", false, "ORDER_GROSS_PROFIT");
        public final static Property OrderMgrDiscountMoney = new Property(35, float.class, "orderMgrDiscountMoney", false, "ORDER_MGR_DISCOUNT_MONEY");
        public final static Property OrderCouponTotalMoney = new Property(36, float.class, "orderCouponTotalMoney", false, "ORDER_COUPON_TOTAL_MONEY");
        public final static Property OrderCouponPaymentMoney = new Property(37, float.class, "orderCouponPaymentMoney", false, "ORDER_COUPON_PAYMENT_MONEY");
        public final static Property OrderCardUserNum = new Property(38, int.class, "orderCardUserNum", false, "ORDER_CARD_USER_NUM");
        public final static Property OrderCardType = new Property(39, int.class, "orderCardType", false, "ORDER_CARD_TYPE");
        public final static Property OrderSource = new Property(40, String.class, "orderSource", false, "ORDER_SOURCE");
        public final static Property OrderPostFee = new Property(41, float.class, "orderPostFee", false, "ORDER_POST_FEE");
        public final static Property OrderPromotionDiscountMoney = new Property(42, float.class, "orderPromotionDiscountMoney", false, "ORDER_PROMOTION_DISCOUNT_MONEY");
        public final static Property OrderExternalNo = new Property(43, String.class, "orderExternalNo", false, "ORDER_EXTERNAL_NO");
        public final static Property OrderDetailItemCount = new Property(44, int.class, "orderDetailItemCount", false, "ORDER_DETAIL_ITEM_COUNT");
        public final static Property OrderTimeChar = new Property(45, String.class, "orderTimeChar", false, "ORDER_TIME_CHAR");
        public final static Property OrderStockFlag = new Property(46, Boolean.class, "orderStockFlag", false, "ORDER_STOCK_FLAG");
        public final static Property OrderCardPhone = new Property(47, String.class, "orderCardPhone", false, "ORDER_CARD_PHONE");
        public final static Property OrderCardChange = new Property(48, float.class, "orderCardChange", false, "ORDER_CARD_CHANGE");
        public final static Property OrderTaxMoney = new Property(49, float.class, "orderTaxMoney", false, "ORDER_TAX_MONEY");
        public final static Property OrderTmallMemo = new Property(50, String.class, "orderTmallMemo", false, "ORDER_TMALL_MEMO");
        public final static Property OrderUserGroup = new Property(51, String.class, "orderUserGroup", false, "ORDER_USER_GROUP");
        public final static Property OrderOnlineDiscount = new Property(52, float.class, "orderOnlineDiscount", false, "ORDER_ONLINE_DISCOUNT");
        public final static Property MerchantNum = new Property(53, int.class, "merchantNum", false, "MERCHANT_NUM");
        public final static Property StallNum = new Property(54, int.class, "stallNum", false, "STALL_NUM");
        public final static Property OrderCostMoney = new Property(55, float.class, "orderCostMoney", false, "ORDER_COST_MONEY");
        public final static Property OrderPayNo = new Property(56, String.class, "orderPayNo", false, "ORDER_PAY_NO");
        public final static Property OrderUploadState = new Property(57, boolean.class, "orderUploadState", false, "ORDER_UPLOAD_STATE");
        public final static Property OrderRemortInsertBean = new Property(58, boolean.class, "orderRemortInsertBean", false, "ORDER_REMORT_INSERT_BEAN");
        public final static Property OpenId = new Property(59, String.class, "openId", false, "OPEN_ID");
        public final static Property AlipayUserId = new Property(60, String.class, "alipayUserId", false, "ALIPAY_USER_ID");
        public final static Property CustomerId = new Property(61, String.class, "customerId", false, "CUSTOMER_ID");
    }

    private DaoSession daoSession;


    public PosOrderDao(DaoConfig config) {
        super(config);
    }
    
    public PosOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS_ORDER\" (" + //
                "\"ORDER_NO\" TEXT PRIMARY KEY NOT NULL ," + // 0: orderNo
                "\"LAYAWAY_ORDER_NO\" TEXT," + // 1: layawayOrderNo
                "\"CLIENT_FID\" TEXT," + // 2: clientFid
                "\"STOREHOUSE_NUM\" INTEGER NOT NULL ," + // 3: storehouseNum
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 4: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 5: branchNum
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 6: shiftTableNum
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 7: shiftTableBizday
                "\"ORDER_DATE\" TEXT," + // 8: orderDate
                "\"ORDER_SOLD_BY\" TEXT," + // 9: orderSoldBy
                "\"ORDER_OPERATOR\" TEXT," + // 10: orderOperator
                "\"ORDER_OPERATE_TIME\" TEXT," + // 11: orderOperateTime
                "\"ORDER_FLAG\" INTEGER," + // 12: orderFlag
                "\"ORDER_PRINTED_NUM\" TEXT," + // 13: orderPrintedNum
                "\"ORDER_CARD_USER\" TEXT," + // 14: orderCardUser
                "\"ORDER_CARD_TYPE_DESC\" TEXT," + // 15: orderCardTypeDesc
                "\"ORDER_DISCOUNT_MONEY\" REAL NOT NULL ," + // 16: orderDiscountMoney
                "\"ORDER_COMMISSION\" REAL NOT NULL ," + // 17: orderCommission
                "\"ORDER_TOTAL_MONEY\" REAL NOT NULL ," + // 18: orderTotalMoney
                "\"ORDER_PAYMENT_MONEY\" REAL NOT NULL ," + // 19: orderPaymentMoney
                "\"ORDER_ROUND\" REAL NOT NULL ," + // 20: orderRound
                "\"ORDER_BALANCE\" REAL NOT NULL ," + // 21: orderBalance
                "\"ORDER_TOTAL_INVOICE\" REAL NOT NULL ," + // 22: orderTotalInvoice
                "\"ORDER_CHANGE\" REAL NOT NULL ," + // 23: orderChange
                "\"ORDER_TIME\" TEXT," + // 24: orderTime
                "\"ORDER_MACHINE\" TEXT," + // 25: orderMachine
                "\"ORDER_CHANGE_AUDITOR\" TEXT," + // 26: orderChangeAuditor
                "\"ORDER_CHANGE_TIME\" TEXT," + // 27: orderChangeTime
                "\"ORDER_PAYEE\" TEXT," + // 28: orderPayee
                "\"ORDER_STATE_CODE\" INTEGER NOT NULL ," + // 29: orderStateCode
                "\"ORDER_STATE_NAME\" TEXT," + // 30: orderStateName
                "\"ORDER_MEMO\" TEXT," + // 31: orderMemo
                "\"ORDER_REF_BILLNO\" TEXT," + // 32: orderRefBillno
                "\"ORDER_POINT\" REAL NOT NULL ," + // 33: orderPoint
                "\"ORDER_GROSS_PROFIT\" REAL NOT NULL ," + // 34: orderGrossProfit
                "\"ORDER_MGR_DISCOUNT_MONEY\" REAL NOT NULL ," + // 35: orderMgrDiscountMoney
                "\"ORDER_COUPON_TOTAL_MONEY\" REAL NOT NULL ," + // 36: orderCouponTotalMoney
                "\"ORDER_COUPON_PAYMENT_MONEY\" REAL NOT NULL ," + // 37: orderCouponPaymentMoney
                "\"ORDER_CARD_USER_NUM\" INTEGER NOT NULL ," + // 38: orderCardUserNum
                "\"ORDER_CARD_TYPE\" INTEGER NOT NULL ," + // 39: orderCardType
                "\"ORDER_SOURCE\" TEXT," + // 40: orderSource
                "\"ORDER_POST_FEE\" REAL NOT NULL ," + // 41: orderPostFee
                "\"ORDER_PROMOTION_DISCOUNT_MONEY\" REAL NOT NULL ," + // 42: orderPromotionDiscountMoney
                "\"ORDER_EXTERNAL_NO\" TEXT," + // 43: orderExternalNo
                "\"ORDER_DETAIL_ITEM_COUNT\" INTEGER NOT NULL ," + // 44: orderDetailItemCount
                "\"ORDER_TIME_CHAR\" TEXT," + // 45: orderTimeChar
                "\"ORDER_STOCK_FLAG\" INTEGER," + // 46: orderStockFlag
                "\"ORDER_CARD_PHONE\" TEXT," + // 47: orderCardPhone
                "\"ORDER_CARD_CHANGE\" REAL NOT NULL ," + // 48: orderCardChange
                "\"ORDER_TAX_MONEY\" REAL NOT NULL ," + // 49: orderTaxMoney
                "\"ORDER_TMALL_MEMO\" TEXT," + // 50: orderTmallMemo
                "\"ORDER_USER_GROUP\" TEXT," + // 51: orderUserGroup
                "\"ORDER_ONLINE_DISCOUNT\" REAL NOT NULL ," + // 52: orderOnlineDiscount
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 53: merchantNum
                "\"STALL_NUM\" INTEGER NOT NULL ," + // 54: stallNum
                "\"ORDER_COST_MONEY\" REAL NOT NULL ," + // 55: orderCostMoney
                "\"ORDER_PAY_NO\" TEXT," + // 56: orderPayNo
                "\"ORDER_UPLOAD_STATE\" INTEGER NOT NULL ," + // 57: orderUploadState
                "\"ORDER_REMORT_INSERT_BEAN\" INTEGER NOT NULL ," + // 58: orderRemortInsertBean
                "\"OPEN_ID\" TEXT," + // 59: openId
                "\"ALIPAY_USER_ID\" TEXT," + // 60: alipayUserId
                "\"CUSTOMER_ID\" TEXT);"); // 61: customerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PosOrder entity) {
        stmt.clearBindings();
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(1, orderNo);
        }
 
        String layawayOrderNo = entity.getLayawayOrderNo();
        if (layawayOrderNo != null) {
            stmt.bindString(2, layawayOrderNo);
        }
 
        String clientFid = entity.getClientFid();
        if (clientFid != null) {
            stmt.bindString(3, clientFid);
        }
        stmt.bindLong(4, entity.getStorehouseNum());
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(5, systemBookCode);
        }
        stmt.bindLong(6, entity.getBranchNum());
        stmt.bindLong(7, entity.getShiftTableNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(8, shiftTableBizday);
        }
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(9, orderDate);
        }
 
        String orderSoldBy = entity.getOrderSoldBy();
        if (orderSoldBy != null) {
            stmt.bindString(10, orderSoldBy);
        }
 
        String orderOperator = entity.getOrderOperator();
        if (orderOperator != null) {
            stmt.bindString(11, orderOperator);
        }
 
        String orderOperateTime = entity.getOrderOperateTime();
        if (orderOperateTime != null) {
            stmt.bindString(12, orderOperateTime);
        }
 
        Boolean orderFlag = entity.getOrderFlag();
        if (orderFlag != null) {
            stmt.bindLong(13, orderFlag ? 1L: 0L);
        }
 
        String orderPrintedNum = entity.getOrderPrintedNum();
        if (orderPrintedNum != null) {
            stmt.bindString(14, orderPrintedNum);
        }
 
        String orderCardUser = entity.getOrderCardUser();
        if (orderCardUser != null) {
            stmt.bindString(15, orderCardUser);
        }
 
        String orderCardTypeDesc = entity.getOrderCardTypeDesc();
        if (orderCardTypeDesc != null) {
            stmt.bindString(16, orderCardTypeDesc);
        }
        stmt.bindDouble(17, entity.getOrderDiscountMoney());
        stmt.bindDouble(18, entity.getOrderCommission());
        stmt.bindDouble(19, entity.getOrderTotalMoney());
        stmt.bindDouble(20, entity.getOrderPaymentMoney());
        stmt.bindDouble(21, entity.getOrderRound());
        stmt.bindDouble(22, entity.getOrderBalance());
        stmt.bindDouble(23, entity.getOrderTotalInvoice());
        stmt.bindDouble(24, entity.getOrderChange());
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(25, orderTime);
        }
 
        String orderMachine = entity.getOrderMachine();
        if (orderMachine != null) {
            stmt.bindString(26, orderMachine);
        }
 
        String orderChangeAuditor = entity.getOrderChangeAuditor();
        if (orderChangeAuditor != null) {
            stmt.bindString(27, orderChangeAuditor);
        }
 
        String orderChangeTime = entity.getOrderChangeTime();
        if (orderChangeTime != null) {
            stmt.bindString(28, orderChangeTime);
        }
 
        String orderPayee = entity.getOrderPayee();
        if (orderPayee != null) {
            stmt.bindString(29, orderPayee);
        }
        stmt.bindLong(30, entity.getOrderStateCode());
 
        String orderStateName = entity.getOrderStateName();
        if (orderStateName != null) {
            stmt.bindString(31, orderStateName);
        }
 
        String orderMemo = entity.getOrderMemo();
        if (orderMemo != null) {
            stmt.bindString(32, orderMemo);
        }
 
        String orderRefBillno = entity.getOrderRefBillno();
        if (orderRefBillno != null) {
            stmt.bindString(33, orderRefBillno);
        }
        stmt.bindDouble(34, entity.getOrderPoint());
        stmt.bindDouble(35, entity.getOrderGrossProfit());
        stmt.bindDouble(36, entity.getOrderMgrDiscountMoney());
        stmt.bindDouble(37, entity.getOrderCouponTotalMoney());
        stmt.bindDouble(38, entity.getOrderCouponPaymentMoney());
        stmt.bindLong(39, entity.getOrderCardUserNum());
        stmt.bindLong(40, entity.getOrderCardType());
 
        String orderSource = entity.getOrderSource();
        if (orderSource != null) {
            stmt.bindString(41, orderSource);
        }
        stmt.bindDouble(42, entity.getOrderPostFee());
        stmt.bindDouble(43, entity.getOrderPromotionDiscountMoney());
 
        String orderExternalNo = entity.getOrderExternalNo();
        if (orderExternalNo != null) {
            stmt.bindString(44, orderExternalNo);
        }
        stmt.bindLong(45, entity.getOrderDetailItemCount());
 
        String orderTimeChar = entity.getOrderTimeChar();
        if (orderTimeChar != null) {
            stmt.bindString(46, orderTimeChar);
        }
 
        Boolean orderStockFlag = entity.getOrderStockFlag();
        if (orderStockFlag != null) {
            stmt.bindLong(47, orderStockFlag ? 1L: 0L);
        }
 
        String orderCardPhone = entity.getOrderCardPhone();
        if (orderCardPhone != null) {
            stmt.bindString(48, orderCardPhone);
        }
        stmt.bindDouble(49, entity.getOrderCardChange());
        stmt.bindDouble(50, entity.getOrderTaxMoney());
 
        String orderTmallMemo = entity.getOrderTmallMemo();
        if (orderTmallMemo != null) {
            stmt.bindString(51, orderTmallMemo);
        }
 
        String orderUserGroup = entity.getOrderUserGroup();
        if (orderUserGroup != null) {
            stmt.bindString(52, orderUserGroup);
        }
        stmt.bindDouble(53, entity.getOrderOnlineDiscount());
        stmt.bindLong(54, entity.getMerchantNum());
        stmt.bindLong(55, entity.getStallNum());
        stmt.bindDouble(56, entity.getOrderCostMoney());
 
        String orderPayNo = entity.getOrderPayNo();
        if (orderPayNo != null) {
            stmt.bindString(57, orderPayNo);
        }
        stmt.bindLong(58, entity.getOrderUploadState() ? 1L: 0L);
        stmt.bindLong(59, entity.getOrderRemortInsertBean() ? 1L: 0L);
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(60, openId);
        }
 
        String alipayUserId = entity.getAlipayUserId();
        if (alipayUserId != null) {
            stmt.bindString(61, alipayUserId);
        }
 
        String customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindString(62, customerId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PosOrder entity) {
        stmt.clearBindings();
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(1, orderNo);
        }
 
        String layawayOrderNo = entity.getLayawayOrderNo();
        if (layawayOrderNo != null) {
            stmt.bindString(2, layawayOrderNo);
        }
 
        String clientFid = entity.getClientFid();
        if (clientFid != null) {
            stmt.bindString(3, clientFid);
        }
        stmt.bindLong(4, entity.getStorehouseNum());
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(5, systemBookCode);
        }
        stmt.bindLong(6, entity.getBranchNum());
        stmt.bindLong(7, entity.getShiftTableNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(8, shiftTableBizday);
        }
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(9, orderDate);
        }
 
        String orderSoldBy = entity.getOrderSoldBy();
        if (orderSoldBy != null) {
            stmt.bindString(10, orderSoldBy);
        }
 
        String orderOperator = entity.getOrderOperator();
        if (orderOperator != null) {
            stmt.bindString(11, orderOperator);
        }
 
        String orderOperateTime = entity.getOrderOperateTime();
        if (orderOperateTime != null) {
            stmt.bindString(12, orderOperateTime);
        }
 
        Boolean orderFlag = entity.getOrderFlag();
        if (orderFlag != null) {
            stmt.bindLong(13, orderFlag ? 1L: 0L);
        }
 
        String orderPrintedNum = entity.getOrderPrintedNum();
        if (orderPrintedNum != null) {
            stmt.bindString(14, orderPrintedNum);
        }
 
        String orderCardUser = entity.getOrderCardUser();
        if (orderCardUser != null) {
            stmt.bindString(15, orderCardUser);
        }
 
        String orderCardTypeDesc = entity.getOrderCardTypeDesc();
        if (orderCardTypeDesc != null) {
            stmt.bindString(16, orderCardTypeDesc);
        }
        stmt.bindDouble(17, entity.getOrderDiscountMoney());
        stmt.bindDouble(18, entity.getOrderCommission());
        stmt.bindDouble(19, entity.getOrderTotalMoney());
        stmt.bindDouble(20, entity.getOrderPaymentMoney());
        stmt.bindDouble(21, entity.getOrderRound());
        stmt.bindDouble(22, entity.getOrderBalance());
        stmt.bindDouble(23, entity.getOrderTotalInvoice());
        stmt.bindDouble(24, entity.getOrderChange());
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(25, orderTime);
        }
 
        String orderMachine = entity.getOrderMachine();
        if (orderMachine != null) {
            stmt.bindString(26, orderMachine);
        }
 
        String orderChangeAuditor = entity.getOrderChangeAuditor();
        if (orderChangeAuditor != null) {
            stmt.bindString(27, orderChangeAuditor);
        }
 
        String orderChangeTime = entity.getOrderChangeTime();
        if (orderChangeTime != null) {
            stmt.bindString(28, orderChangeTime);
        }
 
        String orderPayee = entity.getOrderPayee();
        if (orderPayee != null) {
            stmt.bindString(29, orderPayee);
        }
        stmt.bindLong(30, entity.getOrderStateCode());
 
        String orderStateName = entity.getOrderStateName();
        if (orderStateName != null) {
            stmt.bindString(31, orderStateName);
        }
 
        String orderMemo = entity.getOrderMemo();
        if (orderMemo != null) {
            stmt.bindString(32, orderMemo);
        }
 
        String orderRefBillno = entity.getOrderRefBillno();
        if (orderRefBillno != null) {
            stmt.bindString(33, orderRefBillno);
        }
        stmt.bindDouble(34, entity.getOrderPoint());
        stmt.bindDouble(35, entity.getOrderGrossProfit());
        stmt.bindDouble(36, entity.getOrderMgrDiscountMoney());
        stmt.bindDouble(37, entity.getOrderCouponTotalMoney());
        stmt.bindDouble(38, entity.getOrderCouponPaymentMoney());
        stmt.bindLong(39, entity.getOrderCardUserNum());
        stmt.bindLong(40, entity.getOrderCardType());
 
        String orderSource = entity.getOrderSource();
        if (orderSource != null) {
            stmt.bindString(41, orderSource);
        }
        stmt.bindDouble(42, entity.getOrderPostFee());
        stmt.bindDouble(43, entity.getOrderPromotionDiscountMoney());
 
        String orderExternalNo = entity.getOrderExternalNo();
        if (orderExternalNo != null) {
            stmt.bindString(44, orderExternalNo);
        }
        stmt.bindLong(45, entity.getOrderDetailItemCount());
 
        String orderTimeChar = entity.getOrderTimeChar();
        if (orderTimeChar != null) {
            stmt.bindString(46, orderTimeChar);
        }
 
        Boolean orderStockFlag = entity.getOrderStockFlag();
        if (orderStockFlag != null) {
            stmt.bindLong(47, orderStockFlag ? 1L: 0L);
        }
 
        String orderCardPhone = entity.getOrderCardPhone();
        if (orderCardPhone != null) {
            stmt.bindString(48, orderCardPhone);
        }
        stmt.bindDouble(49, entity.getOrderCardChange());
        stmt.bindDouble(50, entity.getOrderTaxMoney());
 
        String orderTmallMemo = entity.getOrderTmallMemo();
        if (orderTmallMemo != null) {
            stmt.bindString(51, orderTmallMemo);
        }
 
        String orderUserGroup = entity.getOrderUserGroup();
        if (orderUserGroup != null) {
            stmt.bindString(52, orderUserGroup);
        }
        stmt.bindDouble(53, entity.getOrderOnlineDiscount());
        stmt.bindLong(54, entity.getMerchantNum());
        stmt.bindLong(55, entity.getStallNum());
        stmt.bindDouble(56, entity.getOrderCostMoney());
 
        String orderPayNo = entity.getOrderPayNo();
        if (orderPayNo != null) {
            stmt.bindString(57, orderPayNo);
        }
        stmt.bindLong(58, entity.getOrderUploadState() ? 1L: 0L);
        stmt.bindLong(59, entity.getOrderRemortInsertBean() ? 1L: 0L);
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(60, openId);
        }
 
        String alipayUserId = entity.getAlipayUserId();
        if (alipayUserId != null) {
            stmt.bindString(61, alipayUserId);
        }
 
        String customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindString(62, customerId);
        }
    }

    @Override
    protected final void attachEntity(PosOrder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PosOrder readEntity(Cursor cursor, int offset) {
        PosOrder entity = new PosOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // layawayOrderNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // clientFid
            cursor.getInt(offset + 3), // storehouseNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // systemBookCode
            cursor.getInt(offset + 5), // branchNum
            cursor.getInt(offset + 6), // shiftTableNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shiftTableBizday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // orderDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // orderSoldBy
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // orderOperator
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // orderOperateTime
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // orderFlag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // orderPrintedNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // orderCardUser
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // orderCardTypeDesc
            cursor.getFloat(offset + 16), // orderDiscountMoney
            cursor.getFloat(offset + 17), // orderCommission
            cursor.getFloat(offset + 18), // orderTotalMoney
            cursor.getFloat(offset + 19), // orderPaymentMoney
            cursor.getFloat(offset + 20), // orderRound
            cursor.getFloat(offset + 21), // orderBalance
            cursor.getFloat(offset + 22), // orderTotalInvoice
            cursor.getFloat(offset + 23), // orderChange
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // orderTime
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // orderMachine
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // orderChangeAuditor
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // orderChangeTime
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // orderPayee
            cursor.getInt(offset + 29), // orderStateCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // orderStateName
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // orderMemo
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // orderRefBillno
            cursor.getFloat(offset + 33), // orderPoint
            cursor.getFloat(offset + 34), // orderGrossProfit
            cursor.getFloat(offset + 35), // orderMgrDiscountMoney
            cursor.getFloat(offset + 36), // orderCouponTotalMoney
            cursor.getFloat(offset + 37), // orderCouponPaymentMoney
            cursor.getInt(offset + 38), // orderCardUserNum
            cursor.getInt(offset + 39), // orderCardType
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // orderSource
            cursor.getFloat(offset + 41), // orderPostFee
            cursor.getFloat(offset + 42), // orderPromotionDiscountMoney
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // orderExternalNo
            cursor.getInt(offset + 44), // orderDetailItemCount
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // orderTimeChar
            cursor.isNull(offset + 46) ? null : cursor.getShort(offset + 46) != 0, // orderStockFlag
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // orderCardPhone
            cursor.getFloat(offset + 48), // orderCardChange
            cursor.getFloat(offset + 49), // orderTaxMoney
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // orderTmallMemo
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // orderUserGroup
            cursor.getFloat(offset + 52), // orderOnlineDiscount
            cursor.getInt(offset + 53), // merchantNum
            cursor.getInt(offset + 54), // stallNum
            cursor.getFloat(offset + 55), // orderCostMoney
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // orderPayNo
            cursor.getShort(offset + 57) != 0, // orderUploadState
            cursor.getShort(offset + 58) != 0, // orderRemortInsertBean
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // openId
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // alipayUserId
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61) // customerId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PosOrder entity, int offset) {
        entity.setOrderNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLayawayOrderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClientFid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStorehouseNum(cursor.getInt(offset + 3));
        entity.setSystemBookCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBranchNum(cursor.getInt(offset + 5));
        entity.setShiftTableNum(cursor.getInt(offset + 6));
        entity.setShiftTableBizday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrderSoldBy(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrderOperator(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrderOperateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrderFlag(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setOrderPrintedNum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOrderCardUser(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrderCardTypeDesc(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOrderDiscountMoney(cursor.getFloat(offset + 16));
        entity.setOrderCommission(cursor.getFloat(offset + 17));
        entity.setOrderTotalMoney(cursor.getFloat(offset + 18));
        entity.setOrderPaymentMoney(cursor.getFloat(offset + 19));
        entity.setOrderRound(cursor.getFloat(offset + 20));
        entity.setOrderBalance(cursor.getFloat(offset + 21));
        entity.setOrderTotalInvoice(cursor.getFloat(offset + 22));
        entity.setOrderChange(cursor.getFloat(offset + 23));
        entity.setOrderTime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOrderMachine(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setOrderChangeAuditor(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setOrderChangeTime(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOrderPayee(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setOrderStateCode(cursor.getInt(offset + 29));
        entity.setOrderStateName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setOrderMemo(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setOrderRefBillno(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setOrderPoint(cursor.getFloat(offset + 33));
        entity.setOrderGrossProfit(cursor.getFloat(offset + 34));
        entity.setOrderMgrDiscountMoney(cursor.getFloat(offset + 35));
        entity.setOrderCouponTotalMoney(cursor.getFloat(offset + 36));
        entity.setOrderCouponPaymentMoney(cursor.getFloat(offset + 37));
        entity.setOrderCardUserNum(cursor.getInt(offset + 38));
        entity.setOrderCardType(cursor.getInt(offset + 39));
        entity.setOrderSource(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setOrderPostFee(cursor.getFloat(offset + 41));
        entity.setOrderPromotionDiscountMoney(cursor.getFloat(offset + 42));
        entity.setOrderExternalNo(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setOrderDetailItemCount(cursor.getInt(offset + 44));
        entity.setOrderTimeChar(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setOrderStockFlag(cursor.isNull(offset + 46) ? null : cursor.getShort(offset + 46) != 0);
        entity.setOrderCardPhone(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setOrderCardChange(cursor.getFloat(offset + 48));
        entity.setOrderTaxMoney(cursor.getFloat(offset + 49));
        entity.setOrderTmallMemo(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setOrderUserGroup(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setOrderOnlineDiscount(cursor.getFloat(offset + 52));
        entity.setMerchantNum(cursor.getInt(offset + 53));
        entity.setStallNum(cursor.getInt(offset + 54));
        entity.setOrderCostMoney(cursor.getFloat(offset + 55));
        entity.setOrderPayNo(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setOrderUploadState(cursor.getShort(offset + 57) != 0);
        entity.setOrderRemortInsertBean(cursor.getShort(offset + 58) != 0);
        entity.setOpenId(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setAlipayUserId(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setCustomerId(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PosOrder entity, long rowId) {
        return entity.getOrderNo();
    }
    
    @Override
    public String getKey(PosOrder entity) {
        if(entity != null) {
            return entity.getOrderNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PosOrder entity) {
        return entity.getOrderNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
