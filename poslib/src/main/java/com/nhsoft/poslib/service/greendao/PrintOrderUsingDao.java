package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.PrintOrderUsing;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRINT_ORDER_USING".
*/
public class PrintOrderUsingDao extends AbstractDao<PrintOrderUsing, String> {

    public static final String TABLENAME = "PRINT_ORDER_USING";

    /**
     * Properties of entity PrintOrderUsing.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Print_using_name = new Property(1, String.class, "print_using_name", false, "PRINT_USING_NAME");
        public final static Property Membership = new Property(2, String.class, "membership", false, "MEMBERSHIP");
        public final static Property End_operator_time = new Property(3, String.class, "end_operator_time", false, "END_OPERATOR_TIME");
        public final static Property Version_code = new Property(4, int.class, "version_code", false, "VERSION_CODE");
    }


    public PrintOrderUsingDao(DaoConfig config) {
        super(config);
    }
    
    public PrintOrderUsingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINT_ORDER_USING\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PRINT_USING_NAME\" TEXT," + // 1: print_using_name
                "\"MEMBERSHIP\" TEXT," + // 2: membership
                "\"END_OPERATOR_TIME\" TEXT," + // 3: end_operator_time
                "\"VERSION_CODE\" INTEGER NOT NULL );"); // 4: version_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINT_ORDER_USING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrintOrderUsing entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String print_using_name = entity.getPrint_using_name();
        if (print_using_name != null) {
            stmt.bindString(2, print_using_name);
        }
 
        String membership = entity.getMembership();
        if (membership != null) {
            stmt.bindString(3, membership);
        }
 
        String end_operator_time = entity.getEnd_operator_time();
        if (end_operator_time != null) {
            stmt.bindString(4, end_operator_time);
        }
        stmt.bindLong(5, entity.getVersion_code());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrintOrderUsing entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String print_using_name = entity.getPrint_using_name();
        if (print_using_name != null) {
            stmt.bindString(2, print_using_name);
        }
 
        String membership = entity.getMembership();
        if (membership != null) {
            stmt.bindString(3, membership);
        }
 
        String end_operator_time = entity.getEnd_operator_time();
        if (end_operator_time != null) {
            stmt.bindString(4, end_operator_time);
        }
        stmt.bindLong(5, entity.getVersion_code());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PrintOrderUsing readEntity(Cursor cursor, int offset) {
        PrintOrderUsing entity = new PrintOrderUsing( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // print_using_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // membership
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // end_operator_time
            cursor.getInt(offset + 4) // version_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrintOrderUsing entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPrint_using_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMembership(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEnd_operator_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVersion_code(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PrintOrderUsing entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(PrintOrderUsing entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrintOrderUsing entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
