package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.PosItemGrade;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS_ITEM_GRADE".
*/
public class PosItemGradeDao extends AbstractDao<PosItemGrade, Long> {

    public static final String TABLENAME = "POS_ITEM_GRADE";

    /**
     * Properties of entity PosItemGrade.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Item_num = new Property(1, Long.class, "item_num", false, "ITEM_NUM");
        public final static Property Item_grade_num = new Property(2, int.class, "item_grade_num", false, "ITEM_GRADE_NUM");
        public final static Property Item_grade_code = new Property(3, String.class, "item_grade_code", false, "ITEM_GRADE_CODE");
        public final static Property Item_grade_barcode = new Property(4, String.class, "item_grade_barcode", false, "ITEM_GRADE_BARCODE");
        public final static Property Item_grade_name = new Property(5, String.class, "item_grade_name", false, "ITEM_GRADE_NAME");
        public final static Property Item_grade_discounted = new Property(6, boolean.class, "item_grade_discounted", false, "ITEM_GRADE_DISCOUNTED");
        public final static Property Item_grade_pinyin = new Property(7, String.class, "item_grade_pinyin", false, "ITEM_GRADE_PINYIN");
        public final static Property Branch_grade_regular_price = new Property(8, float.class, "branch_grade_regular_price", false, "BRANCH_GRADE_REGULAR_PRICE");
        public final static Property Branch_grade_level2_price = new Property(9, float.class, "branch_grade_level2_price", false, "BRANCH_GRADE_LEVEL2_PRICE");
        public final static Property Branch_grade_level3_price = new Property(10, float.class, "branch_grade_level3_price", false, "BRANCH_GRADE_LEVEL3_PRICE");
        public final static Property Branch_grade_level4_price = new Property(11, float.class, "branch_grade_level4_price", false, "BRANCH_GRADE_LEVEL4_PRICE");
        public final static Property Item_grade_regular_price = new Property(12, Float.class, "item_grade_regular_price", false, "ITEM_GRADE_REGULAR_PRICE");
        public final static Property Item_grade_level2_price = new Property(13, Float.class, "item_grade_level2_price", false, "ITEM_GRADE_LEVEL2_PRICE");
        public final static Property Item_grade_level3_price = new Property(14, Float.class, "item_grade_level3_price", false, "ITEM_GRADE_LEVEL3_PRICE");
        public final static Property Item_grade_level4_price = new Property(15, Float.class, "item_grade_level4_price", false, "ITEM_GRADE_LEVEL4_PRICE");
        public final static Property Item_grade_max_price = new Property(16, Float.class, "item_grade_max_price", false, "ITEM_GRADE_MAX_PRICE");
        public final static Property Item_grade_min_price = new Property(17, Float.class, "item_grade_min_price", false, "ITEM_GRADE_MIN_PRICE");
        public final static Property Item_grade_sale_cease_flag = new Property(18, boolean.class, "item_grade_sale_cease_flag", false, "ITEM_GRADE_SALE_CEASE_FLAG");
        public final static Property Item_grade_type = new Property(19, int.class, "item_grade_type", false, "ITEM_GRADE_TYPE");
        public final static Property Pos_item_selected = new Property(20, Boolean.class, "pos_item_selected", false, "POS_ITEM_SELECTED");
    }

    private Query<PosItemGrade> posItem_Pos_item_grade_listQuery;

    public PosItemGradeDao(DaoConfig config) {
        super(config);
    }
    
    public PosItemGradeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS_ITEM_GRADE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM_NUM\" INTEGER," + // 1: item_num
                "\"ITEM_GRADE_NUM\" INTEGER NOT NULL ," + // 2: item_grade_num
                "\"ITEM_GRADE_CODE\" TEXT," + // 3: item_grade_code
                "\"ITEM_GRADE_BARCODE\" TEXT," + // 4: item_grade_barcode
                "\"ITEM_GRADE_NAME\" TEXT," + // 5: item_grade_name
                "\"ITEM_GRADE_DISCOUNTED\" INTEGER NOT NULL ," + // 6: item_grade_discounted
                "\"ITEM_GRADE_PINYIN\" TEXT," + // 7: item_grade_pinyin
                "\"BRANCH_GRADE_REGULAR_PRICE\" REAL NOT NULL ," + // 8: branch_grade_regular_price
                "\"BRANCH_GRADE_LEVEL2_PRICE\" REAL NOT NULL ," + // 9: branch_grade_level2_price
                "\"BRANCH_GRADE_LEVEL3_PRICE\" REAL NOT NULL ," + // 10: branch_grade_level3_price
                "\"BRANCH_GRADE_LEVEL4_PRICE\" REAL NOT NULL ," + // 11: branch_grade_level4_price
                "\"ITEM_GRADE_REGULAR_PRICE\" REAL," + // 12: item_grade_regular_price
                "\"ITEM_GRADE_LEVEL2_PRICE\" REAL," + // 13: item_grade_level2_price
                "\"ITEM_GRADE_LEVEL3_PRICE\" REAL," + // 14: item_grade_level3_price
                "\"ITEM_GRADE_LEVEL4_PRICE\" REAL," + // 15: item_grade_level4_price
                "\"ITEM_GRADE_MAX_PRICE\" REAL," + // 16: item_grade_max_price
                "\"ITEM_GRADE_MIN_PRICE\" REAL," + // 17: item_grade_min_price
                "\"ITEM_GRADE_SALE_CEASE_FLAG\" INTEGER NOT NULL ," + // 18: item_grade_sale_cease_flag
                "\"ITEM_GRADE_TYPE\" INTEGER NOT NULL ," + // 19: item_grade_type
                "\"POS_ITEM_SELECTED\" INTEGER);"); // 20: pos_item_selected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS_ITEM_GRADE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PosItemGrade entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(2, item_num);
        }
        stmt.bindLong(3, entity.getItem_grade_num());
 
        String item_grade_code = entity.getItem_grade_code();
        if (item_grade_code != null) {
            stmt.bindString(4, item_grade_code);
        }
 
        String item_grade_barcode = entity.getItem_grade_barcode();
        if (item_grade_barcode != null) {
            stmt.bindString(5, item_grade_barcode);
        }
 
        String item_grade_name = entity.getItem_grade_name();
        if (item_grade_name != null) {
            stmt.bindString(6, item_grade_name);
        }
        stmt.bindLong(7, entity.getItem_grade_discounted() ? 1L: 0L);
 
        String item_grade_pinyin = entity.getItem_grade_pinyin();
        if (item_grade_pinyin != null) {
            stmt.bindString(8, item_grade_pinyin);
        }
        stmt.bindDouble(9, entity.getBranch_grade_regular_price());
        stmt.bindDouble(10, entity.getBranch_grade_level2_price());
        stmt.bindDouble(11, entity.getBranch_grade_level3_price());
        stmt.bindDouble(12, entity.getBranch_grade_level4_price());
 
        Float item_grade_regular_price = entity.getItem_grade_regular_price();
        if (item_grade_regular_price != null) {
            stmt.bindDouble(13, item_grade_regular_price);
        }
 
        Float item_grade_level2_price = entity.getItem_grade_level2_price();
        if (item_grade_level2_price != null) {
            stmt.bindDouble(14, item_grade_level2_price);
        }
 
        Float item_grade_level3_price = entity.getItem_grade_level3_price();
        if (item_grade_level3_price != null) {
            stmt.bindDouble(15, item_grade_level3_price);
        }
 
        Float item_grade_level4_price = entity.getItem_grade_level4_price();
        if (item_grade_level4_price != null) {
            stmt.bindDouble(16, item_grade_level4_price);
        }
 
        Float item_grade_max_price = entity.getItem_grade_max_price();
        if (item_grade_max_price != null) {
            stmt.bindDouble(17, item_grade_max_price);
        }
 
        Float item_grade_min_price = entity.getItem_grade_min_price();
        if (item_grade_min_price != null) {
            stmt.bindDouble(18, item_grade_min_price);
        }
        stmt.bindLong(19, entity.getItem_grade_sale_cease_flag() ? 1L: 0L);
        stmt.bindLong(20, entity.getItem_grade_type());
 
        Boolean pos_item_selected = entity.getPos_item_selected();
        if (pos_item_selected != null) {
            stmt.bindLong(21, pos_item_selected ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PosItemGrade entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(2, item_num);
        }
        stmt.bindLong(3, entity.getItem_grade_num());
 
        String item_grade_code = entity.getItem_grade_code();
        if (item_grade_code != null) {
            stmt.bindString(4, item_grade_code);
        }
 
        String item_grade_barcode = entity.getItem_grade_barcode();
        if (item_grade_barcode != null) {
            stmt.bindString(5, item_grade_barcode);
        }
 
        String item_grade_name = entity.getItem_grade_name();
        if (item_grade_name != null) {
            stmt.bindString(6, item_grade_name);
        }
        stmt.bindLong(7, entity.getItem_grade_discounted() ? 1L: 0L);
 
        String item_grade_pinyin = entity.getItem_grade_pinyin();
        if (item_grade_pinyin != null) {
            stmt.bindString(8, item_grade_pinyin);
        }
        stmt.bindDouble(9, entity.getBranch_grade_regular_price());
        stmt.bindDouble(10, entity.getBranch_grade_level2_price());
        stmt.bindDouble(11, entity.getBranch_grade_level3_price());
        stmt.bindDouble(12, entity.getBranch_grade_level4_price());
 
        Float item_grade_regular_price = entity.getItem_grade_regular_price();
        if (item_grade_regular_price != null) {
            stmt.bindDouble(13, item_grade_regular_price);
        }
 
        Float item_grade_level2_price = entity.getItem_grade_level2_price();
        if (item_grade_level2_price != null) {
            stmt.bindDouble(14, item_grade_level2_price);
        }
 
        Float item_grade_level3_price = entity.getItem_grade_level3_price();
        if (item_grade_level3_price != null) {
            stmt.bindDouble(15, item_grade_level3_price);
        }
 
        Float item_grade_level4_price = entity.getItem_grade_level4_price();
        if (item_grade_level4_price != null) {
            stmt.bindDouble(16, item_grade_level4_price);
        }
 
        Float item_grade_max_price = entity.getItem_grade_max_price();
        if (item_grade_max_price != null) {
            stmt.bindDouble(17, item_grade_max_price);
        }
 
        Float item_grade_min_price = entity.getItem_grade_min_price();
        if (item_grade_min_price != null) {
            stmt.bindDouble(18, item_grade_min_price);
        }
        stmt.bindLong(19, entity.getItem_grade_sale_cease_flag() ? 1L: 0L);
        stmt.bindLong(20, entity.getItem_grade_type());
 
        Boolean pos_item_selected = entity.getPos_item_selected();
        if (pos_item_selected != null) {
            stmt.bindLong(21, pos_item_selected ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PosItemGrade readEntity(Cursor cursor, int offset) {
        PosItemGrade entity = new PosItemGrade( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // item_num
            cursor.getInt(offset + 2), // item_grade_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // item_grade_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // item_grade_barcode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // item_grade_name
            cursor.getShort(offset + 6) != 0, // item_grade_discounted
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // item_grade_pinyin
            cursor.getFloat(offset + 8), // branch_grade_regular_price
            cursor.getFloat(offset + 9), // branch_grade_level2_price
            cursor.getFloat(offset + 10), // branch_grade_level3_price
            cursor.getFloat(offset + 11), // branch_grade_level4_price
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // item_grade_regular_price
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // item_grade_level2_price
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // item_grade_level3_price
            cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15), // item_grade_level4_price
            cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16), // item_grade_max_price
            cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17), // item_grade_min_price
            cursor.getShort(offset + 18) != 0, // item_grade_sale_cease_flag
            cursor.getInt(offset + 19), // item_grade_type
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0 // pos_item_selected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PosItemGrade entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_num(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setItem_grade_num(cursor.getInt(offset + 2));
        entity.setItem_grade_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItem_grade_barcode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItem_grade_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItem_grade_discounted(cursor.getShort(offset + 6) != 0);
        entity.setItem_grade_pinyin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBranch_grade_regular_price(cursor.getFloat(offset + 8));
        entity.setBranch_grade_level2_price(cursor.getFloat(offset + 9));
        entity.setBranch_grade_level3_price(cursor.getFloat(offset + 10));
        entity.setBranch_grade_level4_price(cursor.getFloat(offset + 11));
        entity.setItem_grade_regular_price(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setItem_grade_level2_price(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setItem_grade_level3_price(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setItem_grade_level4_price(cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15));
        entity.setItem_grade_max_price(cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16));
        entity.setItem_grade_min_price(cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17));
        entity.setItem_grade_sale_cease_flag(cursor.getShort(offset + 18) != 0);
        entity.setItem_grade_type(cursor.getInt(offset + 19));
        entity.setPos_item_selected(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PosItemGrade entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PosItemGrade entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PosItemGrade entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pos_item_grade_list" to-many relationship of PosItem. */
    public List<PosItemGrade> _queryPosItem_Pos_item_grade_list(Long item_num) {
        synchronized (this) {
            if (posItem_Pos_item_grade_listQuery == null) {
                QueryBuilder<PosItemGrade> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Item_num.eq(null));
                posItem_Pos_item_grade_listQuery = queryBuilder.build();
            }
        }
        Query<PosItemGrade> query = posItem_Pos_item_grade_listQuery.forCurrentThread();
        query.setParameter(0, item_num);
        return query.list();
    }

}
