package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.PointOrderDetial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT_ORDER_DETIAL".
*/
public class PointOrderDetialDao extends AbstractDao<PointOrderDetial, Long> {

    public static final String TABLENAME = "POINT_ORDER_DETIAL";

    /**
     * Properties of entity PointOrderDetial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Point_order_fid = new Property(1, String.class, "point_order_fid", false, "POINT_ORDER_FID");
        public final static Property Point_order_detail_num = new Property(2, int.class, "point_order_detail_num", false, "POINT_ORDER_DETAIL_NUM");
        public final static Property Item_num = new Property(3, int.class, "item_num", false, "ITEM_NUM");
        public final static Property Point_order_detail_item_code = new Property(4, String.class, "point_order_detail_item_code", false, "POINT_ORDER_DETAIL_ITEM_CODE");
        public final static Property Point_order_detail_item_name = new Property(5, String.class, "point_order_detail_item_name", false, "POINT_ORDER_DETAIL_ITEM_NAME");
        public final static Property Point_order_detail_item_spec = new Property(6, String.class, "point_order_detail_item_spec", false, "POINT_ORDER_DETAIL_ITEM_SPEC");
        public final static Property Point_order_detail_item_unit = new Property(7, String.class, "point_order_detail_item_unit", false, "POINT_ORDER_DETAIL_ITEM_UNIT");
        public final static Property Point_order_detail_point = new Property(8, float.class, "point_order_detail_point", false, "POINT_ORDER_DETAIL_POINT");
        public final static Property Point_order_detail_amount = new Property(9, float.class, "point_order_detail_amount", false, "POINT_ORDER_DETAIL_AMOUNT");
        public final static Property System_book_code = new Property(10, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Branch_num = new Property(11, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Consume_point_price = new Property(12, Float.class, "consume_point_price", false, "CONSUME_POINT_PRICE");
    }

    private Query<PointOrderDetial> pointOrder_Point_order_detailsQuery;

    public PointOrderDetialDao(DaoConfig config) {
        super(config);
    }
    
    public PointOrderDetialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT_ORDER_DETIAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POINT_ORDER_FID\" TEXT," + // 1: point_order_fid
                "\"POINT_ORDER_DETAIL_NUM\" INTEGER NOT NULL ," + // 2: point_order_detail_num
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 3: item_num
                "\"POINT_ORDER_DETAIL_ITEM_CODE\" TEXT," + // 4: point_order_detail_item_code
                "\"POINT_ORDER_DETAIL_ITEM_NAME\" TEXT," + // 5: point_order_detail_item_name
                "\"POINT_ORDER_DETAIL_ITEM_SPEC\" TEXT," + // 6: point_order_detail_item_spec
                "\"POINT_ORDER_DETAIL_ITEM_UNIT\" TEXT," + // 7: point_order_detail_item_unit
                "\"POINT_ORDER_DETAIL_POINT\" REAL NOT NULL ," + // 8: point_order_detail_point
                "\"POINT_ORDER_DETAIL_AMOUNT\" REAL NOT NULL ," + // 9: point_order_detail_amount
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 10: system_book_code
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 11: branch_num
                "\"CONSUME_POINT_PRICE\" REAL);"); // 12: consume_point_price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT_ORDER_DETIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PointOrderDetial entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String point_order_fid = entity.getPoint_order_fid();
        if (point_order_fid != null) {
            stmt.bindString(2, point_order_fid);
        }
        stmt.bindLong(3, entity.getPoint_order_detail_num());
        stmt.bindLong(4, entity.getItem_num());
 
        String point_order_detail_item_code = entity.getPoint_order_detail_item_code();
        if (point_order_detail_item_code != null) {
            stmt.bindString(5, point_order_detail_item_code);
        }
 
        String point_order_detail_item_name = entity.getPoint_order_detail_item_name();
        if (point_order_detail_item_name != null) {
            stmt.bindString(6, point_order_detail_item_name);
        }
 
        String point_order_detail_item_spec = entity.getPoint_order_detail_item_spec();
        if (point_order_detail_item_spec != null) {
            stmt.bindString(7, point_order_detail_item_spec);
        }
 
        String point_order_detail_item_unit = entity.getPoint_order_detail_item_unit();
        if (point_order_detail_item_unit != null) {
            stmt.bindString(8, point_order_detail_item_unit);
        }
        stmt.bindDouble(9, entity.getPoint_order_detail_point());
        stmt.bindDouble(10, entity.getPoint_order_detail_amount());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(11, system_book_code);
        }
        stmt.bindLong(12, entity.getBranch_num());
 
        Float consume_point_price = entity.getConsume_point_price();
        if (consume_point_price != null) {
            stmt.bindDouble(13, consume_point_price);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PointOrderDetial entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String point_order_fid = entity.getPoint_order_fid();
        if (point_order_fid != null) {
            stmt.bindString(2, point_order_fid);
        }
        stmt.bindLong(3, entity.getPoint_order_detail_num());
        stmt.bindLong(4, entity.getItem_num());
 
        String point_order_detail_item_code = entity.getPoint_order_detail_item_code();
        if (point_order_detail_item_code != null) {
            stmt.bindString(5, point_order_detail_item_code);
        }
 
        String point_order_detail_item_name = entity.getPoint_order_detail_item_name();
        if (point_order_detail_item_name != null) {
            stmt.bindString(6, point_order_detail_item_name);
        }
 
        String point_order_detail_item_spec = entity.getPoint_order_detail_item_spec();
        if (point_order_detail_item_spec != null) {
            stmt.bindString(7, point_order_detail_item_spec);
        }
 
        String point_order_detail_item_unit = entity.getPoint_order_detail_item_unit();
        if (point_order_detail_item_unit != null) {
            stmt.bindString(8, point_order_detail_item_unit);
        }
        stmt.bindDouble(9, entity.getPoint_order_detail_point());
        stmt.bindDouble(10, entity.getPoint_order_detail_amount());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(11, system_book_code);
        }
        stmt.bindLong(12, entity.getBranch_num());
 
        Float consume_point_price = entity.getConsume_point_price();
        if (consume_point_price != null) {
            stmt.bindDouble(13, consume_point_price);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PointOrderDetial readEntity(Cursor cursor, int offset) {
        PointOrderDetial entity = new PointOrderDetial( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // point_order_fid
            cursor.getInt(offset + 2), // point_order_detail_num
            cursor.getInt(offset + 3), // item_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // point_order_detail_item_code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // point_order_detail_item_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // point_order_detail_item_spec
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // point_order_detail_item_unit
            cursor.getFloat(offset + 8), // point_order_detail_point
            cursor.getFloat(offset + 9), // point_order_detail_amount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // system_book_code
            cursor.getInt(offset + 11), // branch_num
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12) // consume_point_price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PointOrderDetial entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoint_order_fid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPoint_order_detail_num(cursor.getInt(offset + 2));
        entity.setItem_num(cursor.getInt(offset + 3));
        entity.setPoint_order_detail_item_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPoint_order_detail_item_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPoint_order_detail_item_spec(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPoint_order_detail_item_unit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPoint_order_detail_point(cursor.getFloat(offset + 8));
        entity.setPoint_order_detail_amount(cursor.getFloat(offset + 9));
        entity.setSystem_book_code(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBranch_num(cursor.getInt(offset + 11));
        entity.setConsume_point_price(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PointOrderDetial entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PointOrderDetial entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PointOrderDetial entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "point_order_details" to-many relationship of PointOrder. */
    public List<PointOrderDetial> _queryPointOrder_Point_order_details(String point_order_fid) {
        synchronized (this) {
            if (pointOrder_Point_order_detailsQuery == null) {
                QueryBuilder<PointOrderDetial> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Point_order_fid.eq(null));
                pointOrder_Point_order_detailsQuery = queryBuilder.build();
            }
        }
        Query<PointOrderDetial> query = pointOrder_Point_order_detailsQuery.forCurrentThread();
        query.setParameter(0, point_order_fid);
        return query.list();
    }

}
