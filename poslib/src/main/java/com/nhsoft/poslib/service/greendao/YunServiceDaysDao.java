package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.model.YunServiceDays;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "YUN_SERVICE_DAYS".
*/
public class YunServiceDaysDao extends AbstractDao<YunServiceDays, String> {

    public static final String TABLENAME = "YUN_SERVICE_DAYS";

    /**
     * Properties of entity YunServiceDays.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property YunServiceDays = new Property(1, int.class, "yunServiceDays", false, "YUN_SERVICE_DAYS");
        public final static Property AuthDateTo = new Property(2, String.class, "authDateTo", false, "AUTH_DATE_TO");
        public final static Property LicenseFileVersion = new Property(3, Integer.class, "licenseFileVersion", false, "LICENSE_FILE_VERSION");
    }


    public YunServiceDaysDao(DaoConfig config) {
        super(config);
    }
    
    public YunServiceDaysDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"YUN_SERVICE_DAYS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"YUN_SERVICE_DAYS\" INTEGER NOT NULL ," + // 1: yunServiceDays
                "\"AUTH_DATE_TO\" TEXT," + // 2: authDateTo
                "\"LICENSE_FILE_VERSION\" INTEGER);"); // 3: licenseFileVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"YUN_SERVICE_DAYS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, YunServiceDays entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getYunServiceDays());
 
        String authDateTo = entity.getAuthDateTo();
        if (authDateTo != null) {
            stmt.bindString(3, authDateTo);
        }
 
        Integer licenseFileVersion = entity.getLicenseFileVersion();
        if (licenseFileVersion != null) {
            stmt.bindLong(4, licenseFileVersion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, YunServiceDays entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getYunServiceDays());
 
        String authDateTo = entity.getAuthDateTo();
        if (authDateTo != null) {
            stmt.bindString(3, authDateTo);
        }
 
        Integer licenseFileVersion = entity.getLicenseFileVersion();
        if (licenseFileVersion != null) {
            stmt.bindLong(4, licenseFileVersion);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public YunServiceDays readEntity(Cursor cursor, int offset) {
        YunServiceDays entity = new YunServiceDays( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // yunServiceDays
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // authDateTo
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // licenseFileVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, YunServiceDays entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setYunServiceDays(cursor.getInt(offset + 1));
        entity.setAuthDateTo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLicenseFileVersion(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(YunServiceDays entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(YunServiceDays entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(YunServiceDays entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
