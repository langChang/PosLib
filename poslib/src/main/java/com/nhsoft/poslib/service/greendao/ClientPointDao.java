package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.ClientPoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENT_POINT".
*/
public class ClientPointDao extends AbstractDao<ClientPoint, String> {

    public static final String TABLENAME = "CLIENT_POINT";

    /**
     * Properties of entity ClientPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Client_point_fid = new Property(0, String.class, "client_point_fid", true, "CLIENT_POINT_FID");
        public final static Property System_book_code = new Property(1, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Branch_num = new Property(2, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Card_user_num = new Property(3, int.class, "card_user_num", false, "CARD_USER_NUM");
        public final static Property Client_point_branch_name = new Property(4, String.class, "client_point_branch_name", false, "CLIENT_POINT_BRANCH_NAME");
        public final static Property Client_point_cust_name = new Property(5, String.class, "client_point_cust_name", false, "CLIENT_POINT_CUST_NAME");
        public final static Property Client_point_source = new Property(6, String.class, "client_point_source", false, "CLIENT_POINT_SOURCE");
        public final static Property Client_point_date = new Property(7, String.class, "client_point_date", false, "CLIENT_POINT_DATE");
        public final static Property Client_point_balance = new Property(8, float.class, "client_point_balance", false, "CLIENT_POINT_BALANCE");
        public final static Property Client_point_operator = new Property(9, String.class, "client_point_operator", false, "CLIENT_POINT_OPERATOR");
        public final static Property Client_point_ref_bill_no = new Property(10, String.class, "client_point_ref_bill_no", false, "CLIENT_POINT_REF_BILL_NO");
        public final static Property Client_point_memo = new Property(11, String.class, "client_point_memo", false, "CLIENT_POINT_MEMO");
        public final static Property Client_point_operate_type = new Property(12, String.class, "client_point_operate_type", false, "CLIENT_POINT_OPERATE_TYPE");
        public final static Property Client_point_uuid = new Property(13, String.class, "client_point_uuid", false, "CLIENT_POINT_UUID");
        public final static Property Client_point_del_flag = new Property(14, boolean.class, "client_point_del_flag", false, "CLIENT_POINT_DEL_FLAG");
        public final static Property Client_point_sync = new Property(15, boolean.class, "client_point_sync", false, "CLIENT_POINT_SYNC");
        public final static Property Shift_table_bizday = new Property(16, String.class, "shift_table_bizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property Shift_table_num = new Property(17, int.class, "shift_table_num", false, "SHIFT_TABLE_NUM");
        public final static Property Client_point_rule_id = new Property(18, String.class, "client_point_rule_id", false, "CLIENT_POINT_RULE_ID");
        public final static Property Client_point_last_edit_time = new Property(19, String.class, "client_point_last_edit_time", false, "CLIENT_POINT_LAST_EDIT_TIME");
        public final static Property Customer_id = new Property(20, String.class, "customer_id", false, "CUSTOMER_ID");
    }


    public ClientPointDao(DaoConfig config) {
        super(config);
    }
    
    public ClientPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENT_POINT\" (" + //
                "\"CLIENT_POINT_FID\" TEXT PRIMARY KEY NOT NULL ," + // 0: client_point_fid
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: system_book_code
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 2: branch_num
                "\"CARD_USER_NUM\" INTEGER NOT NULL ," + // 3: card_user_num
                "\"CLIENT_POINT_BRANCH_NAME\" TEXT," + // 4: client_point_branch_name
                "\"CLIENT_POINT_CUST_NAME\" TEXT," + // 5: client_point_cust_name
                "\"CLIENT_POINT_SOURCE\" TEXT," + // 6: client_point_source
                "\"CLIENT_POINT_DATE\" TEXT," + // 7: client_point_date
                "\"CLIENT_POINT_BALANCE\" REAL NOT NULL ," + // 8: client_point_balance
                "\"CLIENT_POINT_OPERATOR\" TEXT," + // 9: client_point_operator
                "\"CLIENT_POINT_REF_BILL_NO\" TEXT," + // 10: client_point_ref_bill_no
                "\"CLIENT_POINT_MEMO\" TEXT," + // 11: client_point_memo
                "\"CLIENT_POINT_OPERATE_TYPE\" TEXT," + // 12: client_point_operate_type
                "\"CLIENT_POINT_UUID\" TEXT," + // 13: client_point_uuid
                "\"CLIENT_POINT_DEL_FLAG\" INTEGER NOT NULL ," + // 14: client_point_del_flag
                "\"CLIENT_POINT_SYNC\" INTEGER NOT NULL ," + // 15: client_point_sync
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 16: shift_table_bizday
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 17: shift_table_num
                "\"CLIENT_POINT_RULE_ID\" TEXT," + // 18: client_point_rule_id
                "\"CLIENT_POINT_LAST_EDIT_TIME\" TEXT," + // 19: client_point_last_edit_time
                "\"CUSTOMER_ID\" TEXT);"); // 20: customer_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENT_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClientPoint entity) {
        stmt.clearBindings();
 
        String client_point_fid = entity.getClient_point_fid();
        if (client_point_fid != null) {
            stmt.bindString(1, client_point_fid);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
        stmt.bindLong(3, entity.getBranch_num());
        stmt.bindLong(4, entity.getCard_user_num());
 
        String client_point_branch_name = entity.getClient_point_branch_name();
        if (client_point_branch_name != null) {
            stmt.bindString(5, client_point_branch_name);
        }
 
        String client_point_cust_name = entity.getClient_point_cust_name();
        if (client_point_cust_name != null) {
            stmt.bindString(6, client_point_cust_name);
        }
 
        String client_point_source = entity.getClient_point_source();
        if (client_point_source != null) {
            stmt.bindString(7, client_point_source);
        }
 
        String client_point_date = entity.getClient_point_date();
        if (client_point_date != null) {
            stmt.bindString(8, client_point_date);
        }
        stmt.bindDouble(9, entity.getClient_point_balance());
 
        String client_point_operator = entity.getClient_point_operator();
        if (client_point_operator != null) {
            stmt.bindString(10, client_point_operator);
        }
 
        String client_point_ref_bill_no = entity.getClient_point_ref_bill_no();
        if (client_point_ref_bill_no != null) {
            stmt.bindString(11, client_point_ref_bill_no);
        }
 
        String client_point_memo = entity.getClient_point_memo();
        if (client_point_memo != null) {
            stmt.bindString(12, client_point_memo);
        }
 
        String client_point_operate_type = entity.getClient_point_operate_type();
        if (client_point_operate_type != null) {
            stmt.bindString(13, client_point_operate_type);
        }
 
        String client_point_uuid = entity.getClient_point_uuid();
        if (client_point_uuid != null) {
            stmt.bindString(14, client_point_uuid);
        }
        stmt.bindLong(15, entity.getClient_point_del_flag() ? 1L: 0L);
        stmt.bindLong(16, entity.getClient_point_sync() ? 1L: 0L);
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(17, shift_table_bizday);
        }
        stmt.bindLong(18, entity.getShift_table_num());
 
        String client_point_rule_id = entity.getClient_point_rule_id();
        if (client_point_rule_id != null) {
            stmt.bindString(19, client_point_rule_id);
        }
 
        String client_point_last_edit_time = entity.getClient_point_last_edit_time();
        if (client_point_last_edit_time != null) {
            stmt.bindString(20, client_point_last_edit_time);
        }
 
        String customer_id = entity.getCustomer_id();
        if (customer_id != null) {
            stmt.bindString(21, customer_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClientPoint entity) {
        stmt.clearBindings();
 
        String client_point_fid = entity.getClient_point_fid();
        if (client_point_fid != null) {
            stmt.bindString(1, client_point_fid);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
        stmt.bindLong(3, entity.getBranch_num());
        stmt.bindLong(4, entity.getCard_user_num());
 
        String client_point_branch_name = entity.getClient_point_branch_name();
        if (client_point_branch_name != null) {
            stmt.bindString(5, client_point_branch_name);
        }
 
        String client_point_cust_name = entity.getClient_point_cust_name();
        if (client_point_cust_name != null) {
            stmt.bindString(6, client_point_cust_name);
        }
 
        String client_point_source = entity.getClient_point_source();
        if (client_point_source != null) {
            stmt.bindString(7, client_point_source);
        }
 
        String client_point_date = entity.getClient_point_date();
        if (client_point_date != null) {
            stmt.bindString(8, client_point_date);
        }
        stmt.bindDouble(9, entity.getClient_point_balance());
 
        String client_point_operator = entity.getClient_point_operator();
        if (client_point_operator != null) {
            stmt.bindString(10, client_point_operator);
        }
 
        String client_point_ref_bill_no = entity.getClient_point_ref_bill_no();
        if (client_point_ref_bill_no != null) {
            stmt.bindString(11, client_point_ref_bill_no);
        }
 
        String client_point_memo = entity.getClient_point_memo();
        if (client_point_memo != null) {
            stmt.bindString(12, client_point_memo);
        }
 
        String client_point_operate_type = entity.getClient_point_operate_type();
        if (client_point_operate_type != null) {
            stmt.bindString(13, client_point_operate_type);
        }
 
        String client_point_uuid = entity.getClient_point_uuid();
        if (client_point_uuid != null) {
            stmt.bindString(14, client_point_uuid);
        }
        stmt.bindLong(15, entity.getClient_point_del_flag() ? 1L: 0L);
        stmt.bindLong(16, entity.getClient_point_sync() ? 1L: 0L);
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(17, shift_table_bizday);
        }
        stmt.bindLong(18, entity.getShift_table_num());
 
        String client_point_rule_id = entity.getClient_point_rule_id();
        if (client_point_rule_id != null) {
            stmt.bindString(19, client_point_rule_id);
        }
 
        String client_point_last_edit_time = entity.getClient_point_last_edit_time();
        if (client_point_last_edit_time != null) {
            stmt.bindString(20, client_point_last_edit_time);
        }
 
        String customer_id = entity.getCustomer_id();
        if (customer_id != null) {
            stmt.bindString(21, customer_id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ClientPoint readEntity(Cursor cursor, int offset) {
        ClientPoint entity = new ClientPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // client_point_fid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // system_book_code
            cursor.getInt(offset + 2), // branch_num
            cursor.getInt(offset + 3), // card_user_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // client_point_branch_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // client_point_cust_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // client_point_source
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // client_point_date
            cursor.getFloat(offset + 8), // client_point_balance
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // client_point_operator
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // client_point_ref_bill_no
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // client_point_memo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // client_point_operate_type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // client_point_uuid
            cursor.getShort(offset + 14) != 0, // client_point_del_flag
            cursor.getShort(offset + 15) != 0, // client_point_sync
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // shift_table_bizday
            cursor.getInt(offset + 17), // shift_table_num
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // client_point_rule_id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // client_point_last_edit_time
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // customer_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClientPoint entity, int offset) {
        entity.setClient_point_fid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSystem_book_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranch_num(cursor.getInt(offset + 2));
        entity.setCard_user_num(cursor.getInt(offset + 3));
        entity.setClient_point_branch_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClient_point_cust_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClient_point_source(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClient_point_date(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClient_point_balance(cursor.getFloat(offset + 8));
        entity.setClient_point_operator(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClient_point_ref_bill_no(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClient_point_memo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setClient_point_operate_type(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setClient_point_uuid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setClient_point_del_flag(cursor.getShort(offset + 14) != 0);
        entity.setClient_point_sync(cursor.getShort(offset + 15) != 0);
        entity.setShift_table_bizday(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setShift_table_num(cursor.getInt(offset + 17));
        entity.setClient_point_rule_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setClient_point_last_edit_time(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCustomer_id(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ClientPoint entity, long rowId) {
        return entity.getClient_point_fid();
    }
    
    @Override
    public String getKey(ClientPoint entity) {
        if(entity != null) {
            return entity.getClient_point_fid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClientPoint entity) {
        return entity.getClient_point_fid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
