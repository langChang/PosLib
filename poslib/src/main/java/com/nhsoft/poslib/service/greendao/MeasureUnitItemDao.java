package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.MeasureUnitItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE_UNIT_ITEM".
*/
public class MeasureUnitItemDao extends AbstractDao<MeasureUnitItem, Long> {

    public static final String TABLENAME = "MEASURE_UNIT_ITEM";

    /**
     * Properties of entity MeasureUnitItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Group_name = new Property(1, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Item_unit_code = new Property(2, String.class, "item_unit_code", false, "ITEM_UNIT_CODE");
        public final static Property Item_unit_name = new Property(3, String.class, "item_unit_name", false, "ITEM_UNIT_NAME");
        public final static Property Item_unit_rate = new Property(4, double.class, "item_unit_rate", false, "ITEM_UNIT_RATE");
        public final static Property Item_unit_type = new Property(5, String.class, "item_unit_type", false, "ITEM_UNIT_TYPE");
        public final static Property Item_unit_default = new Property(6, boolean.class, "item_unit_default", false, "ITEM_UNIT_DEFAULT");
    }

    private Query<MeasureUnitItem> measureUnit_Item_unitsQuery;

    public MeasureUnitItemDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureUnitItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE_UNIT_ITEM\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_NAME\" TEXT," + // 1: group_name
                "\"ITEM_UNIT_CODE\" TEXT," + // 2: item_unit_code
                "\"ITEM_UNIT_NAME\" TEXT," + // 3: item_unit_name
                "\"ITEM_UNIT_RATE\" REAL NOT NULL ," + // 4: item_unit_rate
                "\"ITEM_UNIT_TYPE\" TEXT," + // 5: item_unit_type
                "\"ITEM_UNIT_DEFAULT\" INTEGER NOT NULL );"); // 6: item_unit_default
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE_UNIT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeasureUnitItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(2, group_name);
        }
 
        String item_unit_code = entity.getItem_unit_code();
        if (item_unit_code != null) {
            stmt.bindString(3, item_unit_code);
        }
 
        String item_unit_name = entity.getItem_unit_name();
        if (item_unit_name != null) {
            stmt.bindString(4, item_unit_name);
        }
        stmt.bindDouble(5, entity.getItem_unit_rate());
 
        String item_unit_type = entity.getItem_unit_type();
        if (item_unit_type != null) {
            stmt.bindString(6, item_unit_type);
        }
        stmt.bindLong(7, entity.getItem_unit_default() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeasureUnitItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(2, group_name);
        }
 
        String item_unit_code = entity.getItem_unit_code();
        if (item_unit_code != null) {
            stmt.bindString(3, item_unit_code);
        }
 
        String item_unit_name = entity.getItem_unit_name();
        if (item_unit_name != null) {
            stmt.bindString(4, item_unit_name);
        }
        stmt.bindDouble(5, entity.getItem_unit_rate());
 
        String item_unit_type = entity.getItem_unit_type();
        if (item_unit_type != null) {
            stmt.bindString(6, item_unit_type);
        }
        stmt.bindLong(7, entity.getItem_unit_default() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeasureUnitItem readEntity(Cursor cursor, int offset) {
        MeasureUnitItem entity = new MeasureUnitItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // group_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // item_unit_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // item_unit_name
            cursor.getDouble(offset + 4), // item_unit_rate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // item_unit_type
            cursor.getShort(offset + 6) != 0 // item_unit_default
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeasureUnitItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroup_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItem_unit_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItem_unit_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItem_unit_rate(cursor.getDouble(offset + 4));
        entity.setItem_unit_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItem_unit_default(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeasureUnitItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeasureUnitItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeasureUnitItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "item_units" to-many relationship of MeasureUnit. */
    public List<MeasureUnitItem> _queryMeasureUnit_Item_units(String group_name) {
        synchronized (this) {
            if (measureUnit_Item_unitsQuery == null) {
                QueryBuilder<MeasureUnitItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Group_name.eq(null));
                measureUnit_Item_unitsQuery = queryBuilder.build();
            }
        }
        Query<MeasureUnitItem> query = measureUnit_Item_unitsQuery.forCurrentThread();
        query.setParameter(0, group_name);
        return query.list();
    }

}
