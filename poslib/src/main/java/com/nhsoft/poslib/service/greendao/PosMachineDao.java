package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.PosMachine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS_MACHINE".
*/
public class PosMachineDao extends AbstractDao<PosMachine, Long> {

    public static final String TABLENAME = "POS_MACHINE";

    /**
     * Properties of entity PosMachine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Branch_num = new Property(0, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Pos_machine_num = new Property(1, Long.class, "pos_machine_num", true, "POS_MACHINE_NUM");
        public final static Property Storehouse_num = new Property(2, int.class, "storehouse_num", false, "STOREHOUSE_NUM");
        public final static Property Pos_machine_name = new Property(3, String.class, "pos_machine_name", false, "POS_MACHINE_NAME");
        public final static Property Pos_machine_terminal_id = new Property(4, String.class, "pos_machine_terminal_id", false, "POS_MACHINE_TERMINAL_ID");
        public final static Property Pos_machine_memo = new Property(5, String.class, "pos_machine_memo", false, "POS_MACHINE_MEMO");
        public final static Property Pos_machine_enabled = new Property(6, boolean.class, "pos_machine_enabled", false, "POS_MACHINE_ENABLED");
        public final static Property Pos_machine_sequence = new Property(7, int.class, "pos_machine_sequence", false, "POS_MACHINE_SEQUENCE");
        public final static Property Stall_num = new Property(8, Integer.class, "stall_num", false, "STALL_NUM");
        public final static Property Merchant_num = new Property(9, Integer.class, "merchant_num", false, "MERCHANT_NUM");
        public final static Property Merchant_branch_id = new Property(10, String.class, "merchant_branch_id", false, "MERCHANT_BRANCH_ID");
    }


    public PosMachineDao(DaoConfig config) {
        super(config);
    }
    
    public PosMachineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS_MACHINE\" (" + //
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 0: branch_num
                "\"POS_MACHINE_NUM\" INTEGER PRIMARY KEY ," + // 1: pos_machine_num
                "\"STOREHOUSE_NUM\" INTEGER NOT NULL ," + // 2: storehouse_num
                "\"POS_MACHINE_NAME\" TEXT," + // 3: pos_machine_name
                "\"POS_MACHINE_TERMINAL_ID\" TEXT," + // 4: pos_machine_terminal_id
                "\"POS_MACHINE_MEMO\" TEXT," + // 5: pos_machine_memo
                "\"POS_MACHINE_ENABLED\" INTEGER NOT NULL ," + // 6: pos_machine_enabled
                "\"POS_MACHINE_SEQUENCE\" INTEGER NOT NULL ," + // 7: pos_machine_sequence
                "\"STALL_NUM\" INTEGER," + // 8: stall_num
                "\"MERCHANT_NUM\" INTEGER," + // 9: merchant_num
                "\"MERCHANT_BRANCH_ID\" TEXT);"); // 10: merchant_branch_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS_MACHINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PosMachine entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBranch_num());
 
        Long pos_machine_num = entity.getPos_machine_num();
        if (pos_machine_num != null) {
            stmt.bindLong(2, pos_machine_num);
        }
        stmt.bindLong(3, entity.getStorehouse_num());
 
        String pos_machine_name = entity.getPos_machine_name();
        if (pos_machine_name != null) {
            stmt.bindString(4, pos_machine_name);
        }
 
        String pos_machine_terminal_id = entity.getPos_machine_terminal_id();
        if (pos_machine_terminal_id != null) {
            stmt.bindString(5, pos_machine_terminal_id);
        }
 
        String pos_machine_memo = entity.getPos_machine_memo();
        if (pos_machine_memo != null) {
            stmt.bindString(6, pos_machine_memo);
        }
        stmt.bindLong(7, entity.getPos_machine_enabled() ? 1L: 0L);
        stmt.bindLong(8, entity.getPos_machine_sequence());
 
        Integer stall_num = entity.getStall_num();
        if (stall_num != null) {
            stmt.bindLong(9, stall_num);
        }
 
        Integer merchant_num = entity.getMerchant_num();
        if (merchant_num != null) {
            stmt.bindLong(10, merchant_num);
        }
 
        String merchant_branch_id = entity.getMerchant_branch_id();
        if (merchant_branch_id != null) {
            stmt.bindString(11, merchant_branch_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PosMachine entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBranch_num());
 
        Long pos_machine_num = entity.getPos_machine_num();
        if (pos_machine_num != null) {
            stmt.bindLong(2, pos_machine_num);
        }
        stmt.bindLong(3, entity.getStorehouse_num());
 
        String pos_machine_name = entity.getPos_machine_name();
        if (pos_machine_name != null) {
            stmt.bindString(4, pos_machine_name);
        }
 
        String pos_machine_terminal_id = entity.getPos_machine_terminal_id();
        if (pos_machine_terminal_id != null) {
            stmt.bindString(5, pos_machine_terminal_id);
        }
 
        String pos_machine_memo = entity.getPos_machine_memo();
        if (pos_machine_memo != null) {
            stmt.bindString(6, pos_machine_memo);
        }
        stmt.bindLong(7, entity.getPos_machine_enabled() ? 1L: 0L);
        stmt.bindLong(8, entity.getPos_machine_sequence());
 
        Integer stall_num = entity.getStall_num();
        if (stall_num != null) {
            stmt.bindLong(9, stall_num);
        }
 
        Integer merchant_num = entity.getMerchant_num();
        if (merchant_num != null) {
            stmt.bindLong(10, merchant_num);
        }
 
        String merchant_branch_id = entity.getMerchant_branch_id();
        if (merchant_branch_id != null) {
            stmt.bindString(11, merchant_branch_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public PosMachine readEntity(Cursor cursor, int offset) {
        PosMachine entity = new PosMachine( //
            cursor.getInt(offset + 0), // branch_num
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // pos_machine_num
            cursor.getInt(offset + 2), // storehouse_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pos_machine_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pos_machine_terminal_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pos_machine_memo
            cursor.getShort(offset + 6) != 0, // pos_machine_enabled
            cursor.getInt(offset + 7), // pos_machine_sequence
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // stall_num
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // merchant_num
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // merchant_branch_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PosMachine entity, int offset) {
        entity.setBranch_num(cursor.getInt(offset + 0));
        entity.setPos_machine_num(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStorehouse_num(cursor.getInt(offset + 2));
        entity.setPos_machine_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPos_machine_terminal_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPos_machine_memo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPos_machine_enabled(cursor.getShort(offset + 6) != 0);
        entity.setPos_machine_sequence(cursor.getInt(offset + 7));
        entity.setStall_num(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMerchant_num(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMerchant_branch_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PosMachine entity, long rowId) {
        entity.setPos_machine_num(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PosMachine entity) {
        if(entity != null) {
            return entity.getPos_machine_num();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PosMachine entity) {
        return entity.getPos_machine_num() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
