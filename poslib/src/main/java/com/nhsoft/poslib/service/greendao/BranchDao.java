package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.Branch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRANCH".
*/
public class BranchDao extends AbstractDao<Branch, Long> {

    public static final String TABLENAME = "BRANCH";

    /**
     * Properties of entity Branch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Branch_num = new Property(0, Long.class, "branch_num", true, "BRANCH_NUM");
        public final static Property System_book_code = new Property(1, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Branch_region_num = new Property(2, int.class, "branch_region_num", false, "BRANCH_REGION_NUM");
        public final static Property Branch_code = new Property(3, String.class, "branch_code", false, "BRANCH_CODE");
        public final static Property Branch_name = new Property(4, String.class, "branch_name", false, "BRANCH_NAME");
        public final static Property Branch_actived = new Property(5, Boolean.class, "branch_actived", false, "BRANCH_ACTIVED");
        public final static Property Branch_addr = new Property(6, String.class, "branch_addr", false, "BRANCH_ADDR");
        public final static Property Branch_phone = new Property(7, String.class, "branch_phone", false, "BRANCH_PHONE");
        public final static Property Branch_rdc = new Property(8, boolean.class, "branch_rdc", false, "BRANCH_RDC");
        public final static Property Branch_type = new Property(9, String.class, "branch_type", false, "BRANCH_TYPE");
        public final static Property Branch_matrix_price_actived = new Property(10, boolean.class, "branch_matrix_price_actived", false, "BRANCH_MATRIX_PRICE_ACTIVED");
        public final static Property Branch_credit_limit = new Property(11, double.class, "branch_credit_limit", false, "BRANCH_CREDIT_LIMIT");
        public final static Property Branch_card_balance_limit = new Property(12, double.class, "branch_card_balance_limit", false, "BRANCH_CARD_BALANCE_LIMIT");
        public final static Property Branch_expiration = new Property(13, String.class, "branch_expiration", false, "BRANCH_EXPIRATION");
        public final static Property Branch_support_ic = new Property(14, boolean.class, "branch_support_ic", false, "BRANCH_SUPPORT_IC");
        public final static Property Branch_support_id = new Property(15, boolean.class, "branch_support_id", false, "BRANCH_SUPPORT_ID");
        public final static Property Branch_product = new Property(16, String.class, "branch_product", false, "BRANCH_PRODUCT");
        public final static Property Branch_kit_enabled = new Property(17, boolean.class, "branch_kit_enabled", false, "BRANCH_KIT_ENABLED");
        public final static Property Management_template_num = new Property(18, Long.class, "management_template_num", false, "MANAGEMENT_TEMPLATE_NUM");
        public final static Property Branch_close_time = new Property(19, String.class, "branch_close_time", false, "BRANCH_CLOSE_TIME");
        public final static Property Branch_status = new Property(20, int.class, "branch_status", false, "BRANCH_STATUS");
        public final static Property Branch_account_valid = new Property(21, Boolean.class, "branch_account_valid", false, "BRANCH_ACCOUNT_VALID");
        public final static Property Branch_memo = new Property(22, String.class, "branch_memo", false, "BRANCH_MEMO");
    }


    public BranchDao(DaoConfig config) {
        super(config);
    }
    
    public BranchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRANCH\" (" + //
                "\"BRANCH_NUM\" INTEGER PRIMARY KEY ," + // 0: branch_num
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: system_book_code
                "\"BRANCH_REGION_NUM\" INTEGER NOT NULL ," + // 2: branch_region_num
                "\"BRANCH_CODE\" TEXT," + // 3: branch_code
                "\"BRANCH_NAME\" TEXT," + // 4: branch_name
                "\"BRANCH_ACTIVED\" INTEGER," + // 5: branch_actived
                "\"BRANCH_ADDR\" TEXT," + // 6: branch_addr
                "\"BRANCH_PHONE\" TEXT," + // 7: branch_phone
                "\"BRANCH_RDC\" INTEGER NOT NULL ," + // 8: branch_rdc
                "\"BRANCH_TYPE\" TEXT," + // 9: branch_type
                "\"BRANCH_MATRIX_PRICE_ACTIVED\" INTEGER NOT NULL ," + // 10: branch_matrix_price_actived
                "\"BRANCH_CREDIT_LIMIT\" REAL NOT NULL ," + // 11: branch_credit_limit
                "\"BRANCH_CARD_BALANCE_LIMIT\" REAL NOT NULL ," + // 12: branch_card_balance_limit
                "\"BRANCH_EXPIRATION\" TEXT," + // 13: branch_expiration
                "\"BRANCH_SUPPORT_IC\" INTEGER NOT NULL ," + // 14: branch_support_ic
                "\"BRANCH_SUPPORT_ID\" INTEGER NOT NULL ," + // 15: branch_support_id
                "\"BRANCH_PRODUCT\" TEXT," + // 16: branch_product
                "\"BRANCH_KIT_ENABLED\" INTEGER NOT NULL ," + // 17: branch_kit_enabled
                "\"MANAGEMENT_TEMPLATE_NUM\" INTEGER," + // 18: management_template_num
                "\"BRANCH_CLOSE_TIME\" TEXT," + // 19: branch_close_time
                "\"BRANCH_STATUS\" INTEGER NOT NULL ," + // 20: branch_status
                "\"BRANCH_ACCOUNT_VALID\" INTEGER," + // 21: branch_account_valid
                "\"BRANCH_MEMO\" TEXT);"); // 22: branch_memo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRANCH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Branch entity) {
        stmt.clearBindings();
 
        Long branch_num = entity.getBranch_num();
        if (branch_num != null) {
            stmt.bindLong(1, branch_num);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
        stmt.bindLong(3, entity.getBranch_region_num());
 
        String branch_code = entity.getBranch_code();
        if (branch_code != null) {
            stmt.bindString(4, branch_code);
        }
 
        String branch_name = entity.getBranch_name();
        if (branch_name != null) {
            stmt.bindString(5, branch_name);
        }
 
        Boolean branch_actived = entity.getBranch_actived();
        if (branch_actived != null) {
            stmt.bindLong(6, branch_actived ? 1L: 0L);
        }
 
        String branch_addr = entity.getBranch_addr();
        if (branch_addr != null) {
            stmt.bindString(7, branch_addr);
        }
 
        String branch_phone = entity.getBranch_phone();
        if (branch_phone != null) {
            stmt.bindString(8, branch_phone);
        }
        stmt.bindLong(9, entity.getBranch_rdc() ? 1L: 0L);
 
        String branch_type = entity.getBranch_type();
        if (branch_type != null) {
            stmt.bindString(10, branch_type);
        }
        stmt.bindLong(11, entity.getBranch_matrix_price_actived() ? 1L: 0L);
        stmt.bindDouble(12, entity.getBranch_credit_limit());
        stmt.bindDouble(13, entity.getBranch_card_balance_limit());
 
        String branch_expiration = entity.getBranch_expiration();
        if (branch_expiration != null) {
            stmt.bindString(14, branch_expiration);
        }
        stmt.bindLong(15, entity.getBranch_support_ic() ? 1L: 0L);
        stmt.bindLong(16, entity.getBranch_support_id() ? 1L: 0L);
 
        String branch_product = entity.getBranch_product();
        if (branch_product != null) {
            stmt.bindString(17, branch_product);
        }
        stmt.bindLong(18, entity.getBranch_kit_enabled() ? 1L: 0L);
 
        Long management_template_num = entity.getManagement_template_num();
        if (management_template_num != null) {
            stmt.bindLong(19, management_template_num);
        }
 
        String branch_close_time = entity.getBranch_close_time();
        if (branch_close_time != null) {
            stmt.bindString(20, branch_close_time);
        }
        stmt.bindLong(21, entity.getBranch_status());
 
        Boolean branch_account_valid = entity.getBranch_account_valid();
        if (branch_account_valid != null) {
            stmt.bindLong(22, branch_account_valid ? 1L: 0L);
        }
 
        String branch_memo = entity.getBranch_memo();
        if (branch_memo != null) {
            stmt.bindString(23, branch_memo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Branch entity) {
        stmt.clearBindings();
 
        Long branch_num = entity.getBranch_num();
        if (branch_num != null) {
            stmt.bindLong(1, branch_num);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
        stmt.bindLong(3, entity.getBranch_region_num());
 
        String branch_code = entity.getBranch_code();
        if (branch_code != null) {
            stmt.bindString(4, branch_code);
        }
 
        String branch_name = entity.getBranch_name();
        if (branch_name != null) {
            stmt.bindString(5, branch_name);
        }
 
        Boolean branch_actived = entity.getBranch_actived();
        if (branch_actived != null) {
            stmt.bindLong(6, branch_actived ? 1L: 0L);
        }
 
        String branch_addr = entity.getBranch_addr();
        if (branch_addr != null) {
            stmt.bindString(7, branch_addr);
        }
 
        String branch_phone = entity.getBranch_phone();
        if (branch_phone != null) {
            stmt.bindString(8, branch_phone);
        }
        stmt.bindLong(9, entity.getBranch_rdc() ? 1L: 0L);
 
        String branch_type = entity.getBranch_type();
        if (branch_type != null) {
            stmt.bindString(10, branch_type);
        }
        stmt.bindLong(11, entity.getBranch_matrix_price_actived() ? 1L: 0L);
        stmt.bindDouble(12, entity.getBranch_credit_limit());
        stmt.bindDouble(13, entity.getBranch_card_balance_limit());
 
        String branch_expiration = entity.getBranch_expiration();
        if (branch_expiration != null) {
            stmt.bindString(14, branch_expiration);
        }
        stmt.bindLong(15, entity.getBranch_support_ic() ? 1L: 0L);
        stmt.bindLong(16, entity.getBranch_support_id() ? 1L: 0L);
 
        String branch_product = entity.getBranch_product();
        if (branch_product != null) {
            stmt.bindString(17, branch_product);
        }
        stmt.bindLong(18, entity.getBranch_kit_enabled() ? 1L: 0L);
 
        Long management_template_num = entity.getManagement_template_num();
        if (management_template_num != null) {
            stmt.bindLong(19, management_template_num);
        }
 
        String branch_close_time = entity.getBranch_close_time();
        if (branch_close_time != null) {
            stmt.bindString(20, branch_close_time);
        }
        stmt.bindLong(21, entity.getBranch_status());
 
        Boolean branch_account_valid = entity.getBranch_account_valid();
        if (branch_account_valid != null) {
            stmt.bindLong(22, branch_account_valid ? 1L: 0L);
        }
 
        String branch_memo = entity.getBranch_memo();
        if (branch_memo != null) {
            stmt.bindString(23, branch_memo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Branch readEntity(Cursor cursor, int offset) {
        Branch entity = new Branch( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // branch_num
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // system_book_code
            cursor.getInt(offset + 2), // branch_region_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // branch_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // branch_name
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // branch_actived
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // branch_addr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // branch_phone
            cursor.getShort(offset + 8) != 0, // branch_rdc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // branch_type
            cursor.getShort(offset + 10) != 0, // branch_matrix_price_actived
            cursor.getDouble(offset + 11), // branch_credit_limit
            cursor.getDouble(offset + 12), // branch_card_balance_limit
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // branch_expiration
            cursor.getShort(offset + 14) != 0, // branch_support_ic
            cursor.getShort(offset + 15) != 0, // branch_support_id
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // branch_product
            cursor.getShort(offset + 17) != 0, // branch_kit_enabled
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // management_template_num
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // branch_close_time
            cursor.getInt(offset + 20), // branch_status
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // branch_account_valid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // branch_memo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Branch entity, int offset) {
        entity.setBranch_num(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystem_book_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranch_region_num(cursor.getInt(offset + 2));
        entity.setBranch_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranch_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBranch_actived(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setBranch_addr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBranch_phone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBranch_rdc(cursor.getShort(offset + 8) != 0);
        entity.setBranch_type(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBranch_matrix_price_actived(cursor.getShort(offset + 10) != 0);
        entity.setBranch_credit_limit(cursor.getDouble(offset + 11));
        entity.setBranch_card_balance_limit(cursor.getDouble(offset + 12));
        entity.setBranch_expiration(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBranch_support_ic(cursor.getShort(offset + 14) != 0);
        entity.setBranch_support_id(cursor.getShort(offset + 15) != 0);
        entity.setBranch_product(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBranch_kit_enabled(cursor.getShort(offset + 17) != 0);
        entity.setManagement_template_num(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setBranch_close_time(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBranch_status(cursor.getInt(offset + 20));
        entity.setBranch_account_valid(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setBranch_memo(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Branch entity, long rowId) {
        entity.setBranch_num(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Branch entity) {
        if(entity != null) {
            return entity.getBranch_num();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Branch entity) {
        return entity.getBranch_num() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
