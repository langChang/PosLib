package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.BranchGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRANCH_GROUP".
*/
public class BranchGroupDao extends AbstractDao<BranchGroup, String> {

    public static final String TABLENAME = "BRANCH_GROUP";

    /**
     * Properties of entity BranchGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Branch_group_id = new Property(0, String.class, "branch_group_id", true, "BRANCH_GROUP_ID");
        public final static Property Branch_num = new Property(1, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Branch_group_type = new Property(2, String.class, "branch_group_type", false, "BRANCH_GROUP_TYPE");
        public final static Property Branch_group_name = new Property(3, String.class, "branch_group_name", false, "BRANCH_GROUP_NAME");
    }


    public BranchGroupDao(DaoConfig config) {
        super(config);
    }
    
    public BranchGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRANCH_GROUP\" (" + //
                "\"BRANCH_GROUP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: branch_group_id
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 1: branch_num
                "\"BRANCH_GROUP_TYPE\" TEXT," + // 2: branch_group_type
                "\"BRANCH_GROUP_NAME\" TEXT);"); // 3: branch_group_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRANCH_GROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BranchGroup entity) {
        stmt.clearBindings();
 
        String branch_group_id = entity.getBranch_group_id();
        if (branch_group_id != null) {
            stmt.bindString(1, branch_group_id);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String branch_group_type = entity.getBranch_group_type();
        if (branch_group_type != null) {
            stmt.bindString(3, branch_group_type);
        }
 
        String branch_group_name = entity.getBranch_group_name();
        if (branch_group_name != null) {
            stmt.bindString(4, branch_group_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BranchGroup entity) {
        stmt.clearBindings();
 
        String branch_group_id = entity.getBranch_group_id();
        if (branch_group_id != null) {
            stmt.bindString(1, branch_group_id);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String branch_group_type = entity.getBranch_group_type();
        if (branch_group_type != null) {
            stmt.bindString(3, branch_group_type);
        }
 
        String branch_group_name = entity.getBranch_group_name();
        if (branch_group_name != null) {
            stmt.bindString(4, branch_group_name);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BranchGroup readEntity(Cursor cursor, int offset) {
        BranchGroup entity = new BranchGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // branch_group_id
            cursor.getInt(offset + 1), // branch_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // branch_group_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // branch_group_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BranchGroup entity, int offset) {
        entity.setBranch_group_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBranch_num(cursor.getInt(offset + 1));
        entity.setBranch_group_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBranch_group_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BranchGroup entity, long rowId) {
        return entity.getBranch_group_id();
    }
    
    @Override
    public String getKey(BranchGroup entity) {
        if(entity != null) {
            return entity.getBranch_group_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BranchGroup entity) {
        return entity.getBranch_group_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
