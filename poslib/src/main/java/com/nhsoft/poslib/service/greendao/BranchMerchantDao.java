package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.new_nong_mao.BranchMerchant;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRANCH_MERCHANT".
*/
public class BranchMerchantDao extends AbstractDao<BranchMerchant, String> {

    public static final String TABLENAME = "BRANCH_MERCHANT";

    /**
     * Properties of entity BranchMerchant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Branch_id = new Property(0, String.class, "branch_id", true, "BRANCH_ID");
        public final static Property Branch_actived = new Property(1, boolean.class, "branch_actived", false, "BRANCH_ACTIVED");
        public final static Property Branch_code = new Property(2, String.class, "branch_code", false, "BRANCH_CODE");
        public final static Property Branch_create_time = new Property(3, String.class, "branch_create_time", false, "BRANCH_CREATE_TIME");
        public final static Property Branch_linkman = new Property(4, String.class, "branch_linkman", false, "BRANCH_LINKMAN");
        public final static Property Branch_linkman_pic = new Property(5, String.class, "branch_linkman_pic", false, "BRANCH_LINKMAN_PIC");
        public final static Property Branch_name = new Property(6, String.class, "branch_name", false, "BRANCH_NAME");
        public final static Property Branch_num = new Property(7, String.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Branch_phone = new Property(8, String.class, "branch_phone", false, "BRANCH_PHONE");
        public final static Property Merchant_num = new Property(9, int.class, "merchant_num", false, "MERCHANT_NUM");
        public final static Property Imge_json = new Property(10, String.class, "imge_json", false, "IMGE_JSON");
        public final static Property Merchant_category = new Property(11, String.class, "merchant_category", false, "MERCHANT_CATEGORY");
    }


    public BranchMerchantDao(DaoConfig config) {
        super(config);
    }
    
    public BranchMerchantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRANCH_MERCHANT\" (" + //
                "\"BRANCH_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: branch_id
                "\"BRANCH_ACTIVED\" INTEGER NOT NULL ," + // 1: branch_actived
                "\"BRANCH_CODE\" TEXT," + // 2: branch_code
                "\"BRANCH_CREATE_TIME\" TEXT," + // 3: branch_create_time
                "\"BRANCH_LINKMAN\" TEXT," + // 4: branch_linkman
                "\"BRANCH_LINKMAN_PIC\" TEXT," + // 5: branch_linkman_pic
                "\"BRANCH_NAME\" TEXT," + // 6: branch_name
                "\"BRANCH_NUM\" TEXT," + // 7: branch_num
                "\"BRANCH_PHONE\" TEXT," + // 8: branch_phone
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 9: merchant_num
                "\"IMGE_JSON\" TEXT," + // 10: imge_json
                "\"MERCHANT_CATEGORY\" TEXT);"); // 11: merchant_category
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRANCH_MERCHANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BranchMerchant entity) {
        stmt.clearBindings();
 
        String branch_id = entity.getBranch_id();
        if (branch_id != null) {
            stmt.bindString(1, branch_id);
        }
        stmt.bindLong(2, entity.getBranch_actived() ? 1L: 0L);
 
        String branch_code = entity.getBranch_code();
        if (branch_code != null) {
            stmt.bindString(3, branch_code);
        }
 
        String branch_create_time = entity.getBranch_create_time();
        if (branch_create_time != null) {
            stmt.bindString(4, branch_create_time);
        }
 
        String branch_linkman = entity.getBranch_linkman();
        if (branch_linkman != null) {
            stmt.bindString(5, branch_linkman);
        }
 
        String branch_linkman_pic = entity.getBranch_linkman_pic();
        if (branch_linkman_pic != null) {
            stmt.bindString(6, branch_linkman_pic);
        }
 
        String branch_name = entity.getBranch_name();
        if (branch_name != null) {
            stmt.bindString(7, branch_name);
        }
 
        String branch_num = entity.getBranch_num();
        if (branch_num != null) {
            stmt.bindString(8, branch_num);
        }
 
        String branch_phone = entity.getBranch_phone();
        if (branch_phone != null) {
            stmt.bindString(9, branch_phone);
        }
        stmt.bindLong(10, entity.getMerchant_num());
 
        String imge_json = entity.getImge_json();
        if (imge_json != null) {
            stmt.bindString(11, imge_json);
        }
 
        String merchant_category = entity.getMerchant_category();
        if (merchant_category != null) {
            stmt.bindString(12, merchant_category);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BranchMerchant entity) {
        stmt.clearBindings();
 
        String branch_id = entity.getBranch_id();
        if (branch_id != null) {
            stmt.bindString(1, branch_id);
        }
        stmt.bindLong(2, entity.getBranch_actived() ? 1L: 0L);
 
        String branch_code = entity.getBranch_code();
        if (branch_code != null) {
            stmt.bindString(3, branch_code);
        }
 
        String branch_create_time = entity.getBranch_create_time();
        if (branch_create_time != null) {
            stmt.bindString(4, branch_create_time);
        }
 
        String branch_linkman = entity.getBranch_linkman();
        if (branch_linkman != null) {
            stmt.bindString(5, branch_linkman);
        }
 
        String branch_linkman_pic = entity.getBranch_linkman_pic();
        if (branch_linkman_pic != null) {
            stmt.bindString(6, branch_linkman_pic);
        }
 
        String branch_name = entity.getBranch_name();
        if (branch_name != null) {
            stmt.bindString(7, branch_name);
        }
 
        String branch_num = entity.getBranch_num();
        if (branch_num != null) {
            stmt.bindString(8, branch_num);
        }
 
        String branch_phone = entity.getBranch_phone();
        if (branch_phone != null) {
            stmt.bindString(9, branch_phone);
        }
        stmt.bindLong(10, entity.getMerchant_num());
 
        String imge_json = entity.getImge_json();
        if (imge_json != null) {
            stmt.bindString(11, imge_json);
        }
 
        String merchant_category = entity.getMerchant_category();
        if (merchant_category != null) {
            stmt.bindString(12, merchant_category);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BranchMerchant readEntity(Cursor cursor, int offset) {
        BranchMerchant entity = new BranchMerchant( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // branch_id
            cursor.getShort(offset + 1) != 0, // branch_actived
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // branch_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // branch_create_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // branch_linkman
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // branch_linkman_pic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // branch_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // branch_num
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // branch_phone
            cursor.getInt(offset + 9), // merchant_num
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imge_json
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // merchant_category
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BranchMerchant entity, int offset) {
        entity.setBranch_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBranch_actived(cursor.getShort(offset + 1) != 0);
        entity.setBranch_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBranch_create_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranch_linkman(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBranch_linkman_pic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBranch_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBranch_num(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBranch_phone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMerchant_num(cursor.getInt(offset + 9));
        entity.setImge_json(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMerchant_category(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BranchMerchant entity, long rowId) {
        return entity.getBranch_id();
    }
    
    @Override
    public String getKey(BranchMerchant entity) {
        if(entity != null) {
            return entity.getBranch_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BranchMerchant entity) {
        return entity.getBranch_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
