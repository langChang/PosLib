package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.PolicyPresent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POLICY_PRESENT".
*/
public class PolicyPresentDao extends AbstractDao<PolicyPresent, String> {

    public static final String TABLENAME = "POLICY_PRESENT";

    /**
     * Properties of entity PolicyPresent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Policy_present_no = new Property(0, String.class, "policy_present_no", true, "POLICY_PRESENT_NO");
        public final static Property Item_num = new Property(1, int.class, "item_num", false, "ITEM_NUM");
        public final static Property System_book_code = new Property(2, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Policy_present_date_from = new Property(3, String.class, "policy_present_date_from", false, "POLICY_PRESENT_DATE_FROM");
        public final static Property Policy_present_date_to = new Property(4, String.class, "policy_present_date_to", false, "POLICY_PRESENT_DATE_TO");
        public final static Property Policy_present_time_from = new Property(5, String.class, "policy_present_time_from", false, "POLICY_PRESENT_TIME_FROM");
        public final static Property Policy_present_time_to = new Property(6, String.class, "policy_present_time_to", false, "POLICY_PRESENT_TIME_TO");
        public final static Property Policy_present_applied_branch = new Property(7, String.class, "policy_present_applied_branch", false, "POLICY_PRESENT_APPLIED_BRANCH");
        public final static Property Policy_present_mon_actived = new Property(8, boolean.class, "policy_present_mon_actived", false, "POLICY_PRESENT_MON_ACTIVED");
        public final static Property Policy_present_tues_actived = new Property(9, boolean.class, "policy_present_tues_actived", false, "POLICY_PRESENT_TUES_ACTIVED");
        public final static Property Policy_present_wed_actived = new Property(10, boolean.class, "policy_present_wed_actived", false, "POLICY_PRESENT_WED_ACTIVED");
        public final static Property Policy_present_thurs_actived = new Property(11, boolean.class, "policy_present_thurs_actived", false, "POLICY_PRESENT_THURS_ACTIVED");
        public final static Property Policy_present_friday_actived = new Property(12, boolean.class, "policy_present_friday_actived", false, "POLICY_PRESENT_FRIDAY_ACTIVED");
        public final static Property Policy_present_sat_actived = new Property(13, boolean.class, "policy_present_sat_actived", false, "POLICY_PRESENT_SAT_ACTIVED");
        public final static Property Policy_present_sun_actived = new Property(14, boolean.class, "policy_present_sun_actived", false, "POLICY_PRESENT_SUN_ACTIVED");
        public final static Property Policy_present_creator = new Property(15, String.class, "policy_present_creator", false, "POLICY_PRESENT_CREATOR");
        public final static Property Policy_present_create_time = new Property(16, String.class, "policy_present_create_time", false, "POLICY_PRESENT_CREATE_TIME");
        public final static Property Policy_present_auditor = new Property(17, String.class, "policy_present_auditor", false, "POLICY_PRESENT_AUDITOR");
        public final static Property Policy_present_audit_time = new Property(18, String.class, "policy_present_audit_time", false, "POLICY_PRESENT_AUDIT_TIME");
        public final static Property Policy_present_sale_amount = new Property(19, float.class, "policy_present_sale_amount", false, "POLICY_PRESENT_SALE_AMOUNT");
        public final static Property Branch_num = new Property(20, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Policy_present_item_count = new Property(21, float.class, "policy_present_item_count", false, "POLICY_PRESENT_ITEM_COUNT");
        public final static Property Policy_present_card_only = new Property(22, boolean.class, "policy_present_card_only", false, "POLICY_PRESENT_CARD_ONLY");
        public final static Property Policy_present_card_type = new Property(23, String.class, "policy_present_card_type", false, "POLICY_PRESENT_CARD_TYPE");
        public final static Property Policy_present_last_edit_time = new Property(24, String.class, "policy_present_last_edit_time", false, "POLICY_PRESENT_LAST_EDIT_TIME");
        public final static Property Policy_present_last_editor = new Property(25, String.class, "policy_present_last_editor", false, "POLICY_PRESENT_LAST_EDITOR");
        public final static Property Policy_present_level_ids = new Property(26, String.class, "policy_present_level_ids", false, "POLICY_PRESENT_LEVEL_IDS");
    }

    private DaoSession daoSession;


    public PolicyPresentDao(DaoConfig config) {
        super(config);
    }
    
    public PolicyPresentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POLICY_PRESENT\" (" + //
                "\"POLICY_PRESENT_NO\" TEXT PRIMARY KEY NOT NULL ," + // 0: policy_present_no
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 1: item_num
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 2: system_book_code
                "\"POLICY_PRESENT_DATE_FROM\" TEXT," + // 3: policy_present_date_from
                "\"POLICY_PRESENT_DATE_TO\" TEXT," + // 4: policy_present_date_to
                "\"POLICY_PRESENT_TIME_FROM\" TEXT," + // 5: policy_present_time_from
                "\"POLICY_PRESENT_TIME_TO\" TEXT," + // 6: policy_present_time_to
                "\"POLICY_PRESENT_APPLIED_BRANCH\" TEXT," + // 7: policy_present_applied_branch
                "\"POLICY_PRESENT_MON_ACTIVED\" INTEGER NOT NULL ," + // 8: policy_present_mon_actived
                "\"POLICY_PRESENT_TUES_ACTIVED\" INTEGER NOT NULL ," + // 9: policy_present_tues_actived
                "\"POLICY_PRESENT_WED_ACTIVED\" INTEGER NOT NULL ," + // 10: policy_present_wed_actived
                "\"POLICY_PRESENT_THURS_ACTIVED\" INTEGER NOT NULL ," + // 11: policy_present_thurs_actived
                "\"POLICY_PRESENT_FRIDAY_ACTIVED\" INTEGER NOT NULL ," + // 12: policy_present_friday_actived
                "\"POLICY_PRESENT_SAT_ACTIVED\" INTEGER NOT NULL ," + // 13: policy_present_sat_actived
                "\"POLICY_PRESENT_SUN_ACTIVED\" INTEGER NOT NULL ," + // 14: policy_present_sun_actived
                "\"POLICY_PRESENT_CREATOR\" TEXT," + // 15: policy_present_creator
                "\"POLICY_PRESENT_CREATE_TIME\" TEXT," + // 16: policy_present_create_time
                "\"POLICY_PRESENT_AUDITOR\" TEXT," + // 17: policy_present_auditor
                "\"POLICY_PRESENT_AUDIT_TIME\" TEXT," + // 18: policy_present_audit_time
                "\"POLICY_PRESENT_SALE_AMOUNT\" REAL NOT NULL ," + // 19: policy_present_sale_amount
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 20: branch_num
                "\"POLICY_PRESENT_ITEM_COUNT\" REAL NOT NULL ," + // 21: policy_present_item_count
                "\"POLICY_PRESENT_CARD_ONLY\" INTEGER NOT NULL ," + // 22: policy_present_card_only
                "\"POLICY_PRESENT_CARD_TYPE\" TEXT," + // 23: policy_present_card_type
                "\"POLICY_PRESENT_LAST_EDIT_TIME\" TEXT," + // 24: policy_present_last_edit_time
                "\"POLICY_PRESENT_LAST_EDITOR\" TEXT," + // 25: policy_present_last_editor
                "\"POLICY_PRESENT_LEVEL_IDS\" TEXT);"); // 26: policy_present_level_ids
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POLICY_PRESENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PolicyPresent entity) {
        stmt.clearBindings();
 
        String policy_present_no = entity.getPolicy_present_no();
        if (policy_present_no != null) {
            stmt.bindString(1, policy_present_no);
        }
        stmt.bindLong(2, entity.getItem_num());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(3, system_book_code);
        }
 
        String policy_present_date_from = entity.getPolicy_present_date_from();
        if (policy_present_date_from != null) {
            stmt.bindString(4, policy_present_date_from);
        }
 
        String policy_present_date_to = entity.getPolicy_present_date_to();
        if (policy_present_date_to != null) {
            stmt.bindString(5, policy_present_date_to);
        }
 
        String policy_present_time_from = entity.getPolicy_present_time_from();
        if (policy_present_time_from != null) {
            stmt.bindString(6, policy_present_time_from);
        }
 
        String policy_present_time_to = entity.getPolicy_present_time_to();
        if (policy_present_time_to != null) {
            stmt.bindString(7, policy_present_time_to);
        }
 
        String policy_present_applied_branch = entity.getPolicy_present_applied_branch();
        if (policy_present_applied_branch != null) {
            stmt.bindString(8, policy_present_applied_branch);
        }
        stmt.bindLong(9, entity.getPolicy_present_mon_actived() ? 1L: 0L);
        stmt.bindLong(10, entity.getPolicy_present_tues_actived() ? 1L: 0L);
        stmt.bindLong(11, entity.getPolicy_present_wed_actived() ? 1L: 0L);
        stmt.bindLong(12, entity.getPolicy_present_thurs_actived() ? 1L: 0L);
        stmt.bindLong(13, entity.getPolicy_present_friday_actived() ? 1L: 0L);
        stmt.bindLong(14, entity.getPolicy_present_sat_actived() ? 1L: 0L);
        stmt.bindLong(15, entity.getPolicy_present_sun_actived() ? 1L: 0L);
 
        String policy_present_creator = entity.getPolicy_present_creator();
        if (policy_present_creator != null) {
            stmt.bindString(16, policy_present_creator);
        }
 
        String policy_present_create_time = entity.getPolicy_present_create_time();
        if (policy_present_create_time != null) {
            stmt.bindString(17, policy_present_create_time);
        }
 
        String policy_present_auditor = entity.getPolicy_present_auditor();
        if (policy_present_auditor != null) {
            stmt.bindString(18, policy_present_auditor);
        }
 
        String policy_present_audit_time = entity.getPolicy_present_audit_time();
        if (policy_present_audit_time != null) {
            stmt.bindString(19, policy_present_audit_time);
        }
        stmt.bindDouble(20, entity.getPolicy_present_sale_amount());
        stmt.bindLong(21, entity.getBranch_num());
        stmt.bindDouble(22, entity.getPolicy_present_item_count());
        stmt.bindLong(23, entity.getPolicy_present_card_only() ? 1L: 0L);
 
        String policy_present_card_type = entity.getPolicy_present_card_type();
        if (policy_present_card_type != null) {
            stmt.bindString(24, policy_present_card_type);
        }
 
        String policy_present_last_edit_time = entity.getPolicy_present_last_edit_time();
        if (policy_present_last_edit_time != null) {
            stmt.bindString(25, policy_present_last_edit_time);
        }
 
        String policy_present_last_editor = entity.getPolicy_present_last_editor();
        if (policy_present_last_editor != null) {
            stmt.bindString(26, policy_present_last_editor);
        }
 
        String policy_present_level_ids = entity.getPolicy_present_level_ids();
        if (policy_present_level_ids != null) {
            stmt.bindString(27, policy_present_level_ids);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PolicyPresent entity) {
        stmt.clearBindings();
 
        String policy_present_no = entity.getPolicy_present_no();
        if (policy_present_no != null) {
            stmt.bindString(1, policy_present_no);
        }
        stmt.bindLong(2, entity.getItem_num());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(3, system_book_code);
        }
 
        String policy_present_date_from = entity.getPolicy_present_date_from();
        if (policy_present_date_from != null) {
            stmt.bindString(4, policy_present_date_from);
        }
 
        String policy_present_date_to = entity.getPolicy_present_date_to();
        if (policy_present_date_to != null) {
            stmt.bindString(5, policy_present_date_to);
        }
 
        String policy_present_time_from = entity.getPolicy_present_time_from();
        if (policy_present_time_from != null) {
            stmt.bindString(6, policy_present_time_from);
        }
 
        String policy_present_time_to = entity.getPolicy_present_time_to();
        if (policy_present_time_to != null) {
            stmt.bindString(7, policy_present_time_to);
        }
 
        String policy_present_applied_branch = entity.getPolicy_present_applied_branch();
        if (policy_present_applied_branch != null) {
            stmt.bindString(8, policy_present_applied_branch);
        }
        stmt.bindLong(9, entity.getPolicy_present_mon_actived() ? 1L: 0L);
        stmt.bindLong(10, entity.getPolicy_present_tues_actived() ? 1L: 0L);
        stmt.bindLong(11, entity.getPolicy_present_wed_actived() ? 1L: 0L);
        stmt.bindLong(12, entity.getPolicy_present_thurs_actived() ? 1L: 0L);
        stmt.bindLong(13, entity.getPolicy_present_friday_actived() ? 1L: 0L);
        stmt.bindLong(14, entity.getPolicy_present_sat_actived() ? 1L: 0L);
        stmt.bindLong(15, entity.getPolicy_present_sun_actived() ? 1L: 0L);
 
        String policy_present_creator = entity.getPolicy_present_creator();
        if (policy_present_creator != null) {
            stmt.bindString(16, policy_present_creator);
        }
 
        String policy_present_create_time = entity.getPolicy_present_create_time();
        if (policy_present_create_time != null) {
            stmt.bindString(17, policy_present_create_time);
        }
 
        String policy_present_auditor = entity.getPolicy_present_auditor();
        if (policy_present_auditor != null) {
            stmt.bindString(18, policy_present_auditor);
        }
 
        String policy_present_audit_time = entity.getPolicy_present_audit_time();
        if (policy_present_audit_time != null) {
            stmt.bindString(19, policy_present_audit_time);
        }
        stmt.bindDouble(20, entity.getPolicy_present_sale_amount());
        stmt.bindLong(21, entity.getBranch_num());
        stmt.bindDouble(22, entity.getPolicy_present_item_count());
        stmt.bindLong(23, entity.getPolicy_present_card_only() ? 1L: 0L);
 
        String policy_present_card_type = entity.getPolicy_present_card_type();
        if (policy_present_card_type != null) {
            stmt.bindString(24, policy_present_card_type);
        }
 
        String policy_present_last_edit_time = entity.getPolicy_present_last_edit_time();
        if (policy_present_last_edit_time != null) {
            stmt.bindString(25, policy_present_last_edit_time);
        }
 
        String policy_present_last_editor = entity.getPolicy_present_last_editor();
        if (policy_present_last_editor != null) {
            stmt.bindString(26, policy_present_last_editor);
        }
 
        String policy_present_level_ids = entity.getPolicy_present_level_ids();
        if (policy_present_level_ids != null) {
            stmt.bindString(27, policy_present_level_ids);
        }
    }

    @Override
    protected final void attachEntity(PolicyPresent entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PolicyPresent readEntity(Cursor cursor, int offset) {
        PolicyPresent entity = new PolicyPresent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // policy_present_no
            cursor.getInt(offset + 1), // item_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // system_book_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // policy_present_date_from
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // policy_present_date_to
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // policy_present_time_from
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // policy_present_time_to
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // policy_present_applied_branch
            cursor.getShort(offset + 8) != 0, // policy_present_mon_actived
            cursor.getShort(offset + 9) != 0, // policy_present_tues_actived
            cursor.getShort(offset + 10) != 0, // policy_present_wed_actived
            cursor.getShort(offset + 11) != 0, // policy_present_thurs_actived
            cursor.getShort(offset + 12) != 0, // policy_present_friday_actived
            cursor.getShort(offset + 13) != 0, // policy_present_sat_actived
            cursor.getShort(offset + 14) != 0, // policy_present_sun_actived
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // policy_present_creator
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // policy_present_create_time
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // policy_present_auditor
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // policy_present_audit_time
            cursor.getFloat(offset + 19), // policy_present_sale_amount
            cursor.getInt(offset + 20), // branch_num
            cursor.getFloat(offset + 21), // policy_present_item_count
            cursor.getShort(offset + 22) != 0, // policy_present_card_only
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // policy_present_card_type
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // policy_present_last_edit_time
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // policy_present_last_editor
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // policy_present_level_ids
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PolicyPresent entity, int offset) {
        entity.setPolicy_present_no(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setItem_num(cursor.getInt(offset + 1));
        entity.setSystem_book_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPolicy_present_date_from(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPolicy_present_date_to(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPolicy_present_time_from(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPolicy_present_time_to(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPolicy_present_applied_branch(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPolicy_present_mon_actived(cursor.getShort(offset + 8) != 0);
        entity.setPolicy_present_tues_actived(cursor.getShort(offset + 9) != 0);
        entity.setPolicy_present_wed_actived(cursor.getShort(offset + 10) != 0);
        entity.setPolicy_present_thurs_actived(cursor.getShort(offset + 11) != 0);
        entity.setPolicy_present_friday_actived(cursor.getShort(offset + 12) != 0);
        entity.setPolicy_present_sat_actived(cursor.getShort(offset + 13) != 0);
        entity.setPolicy_present_sun_actived(cursor.getShort(offset + 14) != 0);
        entity.setPolicy_present_creator(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPolicy_present_create_time(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPolicy_present_auditor(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPolicy_present_audit_time(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPolicy_present_sale_amount(cursor.getFloat(offset + 19));
        entity.setBranch_num(cursor.getInt(offset + 20));
        entity.setPolicy_present_item_count(cursor.getFloat(offset + 21));
        entity.setPolicy_present_card_only(cursor.getShort(offset + 22) != 0);
        entity.setPolicy_present_card_type(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPolicy_present_last_edit_time(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPolicy_present_last_editor(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPolicy_present_level_ids(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PolicyPresent entity, long rowId) {
        return entity.getPolicy_present_no();
    }
    
    @Override
    public String getKey(PolicyPresent entity) {
        if(entity != null) {
            return entity.getPolicy_present_no();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PolicyPresent entity) {
        return entity.getPolicy_present_no() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
