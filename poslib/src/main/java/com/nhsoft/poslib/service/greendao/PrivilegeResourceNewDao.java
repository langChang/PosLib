package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.PrivilegeResourceNew;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRIVILEGE_RESOURCE_NEW".
*/
public class PrivilegeResourceNewDao extends AbstractDao<PrivilegeResourceNew, Long> {

    public static final String TABLENAME = "PRIVILEGE_RESOURCE_NEW";

    /**
     * Properties of entity PrivilegeResourceNew.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Privilege_resource_key = new Property(0, Long.class, "privilege_resource_key", true, "PRIVILEGE_RESOURCE_KEY");
        public final static Property Privilege_resource_name = new Property(1, String.class, "privilege_resource_name", false, "PRIVILEGE_RESOURCE_NAME");
        public final static Property Privilege_resource_category = new Property(2, String.class, "privilege_resource_category", false, "PRIVILEGE_RESOURCE_CATEGORY");
        public final static Property Privilege_resource_query = new Property(3, boolean.class, "privilege_resource_query", false, "PRIVILEGE_RESOURCE_QUERY");
        public final static Property Privilege_resource_edit = new Property(4, boolean.class, "privilege_resource_edit", false, "PRIVILEGE_RESOURCE_EDIT");
        public final static Property Privilege_resource_delete = new Property(5, boolean.class, "privilege_resource_delete", false, "PRIVILEGE_RESOURCE_DELETE");
        public final static Property Privilege_resource_audit = new Property(6, boolean.class, "privilege_resource_audit", false, "PRIVILEGE_RESOURCE_AUDIT");
        public final static Property Privilege_resource_invalid = new Property(7, boolean.class, "privilege_resource_invalid", false, "PRIVILEGE_RESOURCE_INVALID");
        public final static Property Privilege_resource_re_audit = new Property(8, boolean.class, "privilege_resource_re_audit", false, "PRIVILEGE_RESOURCE_RE_AUDIT");
        public final static Property Privilege_resource_print = new Property(9, boolean.class, "privilege_resource_print", false, "PRIVILEGE_RESOURCE_PRINT");
        public final static Property Privilege_resource_export = new Property(10, boolean.class, "privilege_resource_export", false, "PRIVILEGE_RESOURCE_EXPORT");
    }


    public PrivilegeResourceNewDao(DaoConfig config) {
        super(config);
    }
    
    public PrivilegeResourceNewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRIVILEGE_RESOURCE_NEW\" (" + //
                "\"PRIVILEGE_RESOURCE_KEY\" INTEGER PRIMARY KEY ," + // 0: privilege_resource_key
                "\"PRIVILEGE_RESOURCE_NAME\" TEXT," + // 1: privilege_resource_name
                "\"PRIVILEGE_RESOURCE_CATEGORY\" TEXT," + // 2: privilege_resource_category
                "\"PRIVILEGE_RESOURCE_QUERY\" INTEGER NOT NULL ," + // 3: privilege_resource_query
                "\"PRIVILEGE_RESOURCE_EDIT\" INTEGER NOT NULL ," + // 4: privilege_resource_edit
                "\"PRIVILEGE_RESOURCE_DELETE\" INTEGER NOT NULL ," + // 5: privilege_resource_delete
                "\"PRIVILEGE_RESOURCE_AUDIT\" INTEGER NOT NULL ," + // 6: privilege_resource_audit
                "\"PRIVILEGE_RESOURCE_INVALID\" INTEGER NOT NULL ," + // 7: privilege_resource_invalid
                "\"PRIVILEGE_RESOURCE_RE_AUDIT\" INTEGER NOT NULL ," + // 8: privilege_resource_re_audit
                "\"PRIVILEGE_RESOURCE_PRINT\" INTEGER NOT NULL ," + // 9: privilege_resource_print
                "\"PRIVILEGE_RESOURCE_EXPORT\" INTEGER NOT NULL );"); // 10: privilege_resource_export
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRIVILEGE_RESOURCE_NEW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrivilegeResourceNew entity) {
        stmt.clearBindings();
 
        Long privilege_resource_key = entity.getPrivilege_resource_key();
        if (privilege_resource_key != null) {
            stmt.bindLong(1, privilege_resource_key);
        }
 
        String privilege_resource_name = entity.getPrivilege_resource_name();
        if (privilege_resource_name != null) {
            stmt.bindString(2, privilege_resource_name);
        }
 
        String privilege_resource_category = entity.getPrivilege_resource_category();
        if (privilege_resource_category != null) {
            stmt.bindString(3, privilege_resource_category);
        }
        stmt.bindLong(4, entity.getPrivilege_resource_query() ? 1L: 0L);
        stmt.bindLong(5, entity.getPrivilege_resource_edit() ? 1L: 0L);
        stmt.bindLong(6, entity.getPrivilege_resource_delete() ? 1L: 0L);
        stmt.bindLong(7, entity.getPrivilege_resource_audit() ? 1L: 0L);
        stmt.bindLong(8, entity.getPrivilege_resource_invalid() ? 1L: 0L);
        stmt.bindLong(9, entity.getPrivilege_resource_re_audit() ? 1L: 0L);
        stmt.bindLong(10, entity.getPrivilege_resource_print() ? 1L: 0L);
        stmt.bindLong(11, entity.getPrivilege_resource_export() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrivilegeResourceNew entity) {
        stmt.clearBindings();
 
        Long privilege_resource_key = entity.getPrivilege_resource_key();
        if (privilege_resource_key != null) {
            stmt.bindLong(1, privilege_resource_key);
        }
 
        String privilege_resource_name = entity.getPrivilege_resource_name();
        if (privilege_resource_name != null) {
            stmt.bindString(2, privilege_resource_name);
        }
 
        String privilege_resource_category = entity.getPrivilege_resource_category();
        if (privilege_resource_category != null) {
            stmt.bindString(3, privilege_resource_category);
        }
        stmt.bindLong(4, entity.getPrivilege_resource_query() ? 1L: 0L);
        stmt.bindLong(5, entity.getPrivilege_resource_edit() ? 1L: 0L);
        stmt.bindLong(6, entity.getPrivilege_resource_delete() ? 1L: 0L);
        stmt.bindLong(7, entity.getPrivilege_resource_audit() ? 1L: 0L);
        stmt.bindLong(8, entity.getPrivilege_resource_invalid() ? 1L: 0L);
        stmt.bindLong(9, entity.getPrivilege_resource_re_audit() ? 1L: 0L);
        stmt.bindLong(10, entity.getPrivilege_resource_print() ? 1L: 0L);
        stmt.bindLong(11, entity.getPrivilege_resource_export() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PrivilegeResourceNew readEntity(Cursor cursor, int offset) {
        PrivilegeResourceNew entity = new PrivilegeResourceNew( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // privilege_resource_key
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // privilege_resource_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // privilege_resource_category
            cursor.getShort(offset + 3) != 0, // privilege_resource_query
            cursor.getShort(offset + 4) != 0, // privilege_resource_edit
            cursor.getShort(offset + 5) != 0, // privilege_resource_delete
            cursor.getShort(offset + 6) != 0, // privilege_resource_audit
            cursor.getShort(offset + 7) != 0, // privilege_resource_invalid
            cursor.getShort(offset + 8) != 0, // privilege_resource_re_audit
            cursor.getShort(offset + 9) != 0, // privilege_resource_print
            cursor.getShort(offset + 10) != 0 // privilege_resource_export
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrivilegeResourceNew entity, int offset) {
        entity.setPrivilege_resource_key(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrivilege_resource_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrivilege_resource_category(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrivilege_resource_query(cursor.getShort(offset + 3) != 0);
        entity.setPrivilege_resource_edit(cursor.getShort(offset + 4) != 0);
        entity.setPrivilege_resource_delete(cursor.getShort(offset + 5) != 0);
        entity.setPrivilege_resource_audit(cursor.getShort(offset + 6) != 0);
        entity.setPrivilege_resource_invalid(cursor.getShort(offset + 7) != 0);
        entity.setPrivilege_resource_re_audit(cursor.getShort(offset + 8) != 0);
        entity.setPrivilege_resource_print(cursor.getShort(offset + 9) != 0);
        entity.setPrivilege_resource_export(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PrivilegeResourceNew entity, long rowId) {
        entity.setPrivilege_resource_key(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PrivilegeResourceNew entity) {
        if(entity != null) {
            return entity.getPrivilege_resource_key();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrivilegeResourceNew entity) {
        return entity.getPrivilege_resource_key() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
