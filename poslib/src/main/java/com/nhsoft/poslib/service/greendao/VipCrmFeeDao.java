package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.VipCrmFee;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIP_CRM_FEE".
*/
public class VipCrmFeeDao extends AbstractDao<VipCrmFee, Long> {

    public static final String TABLENAME = "VIP_CRM_FEE";

    /**
     * Properties of entity VipCrmFee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property ShiftTableNum = new Property(2, String.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property SystemBookCode = new Property(3, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(4, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property PayTypeName = new Property(6, String.class, "payTypeName", false, "PAY_TYPE_NAME");
        public final static Property PayMoney = new Property(7, float.class, "payMoney", false, "PAY_MONEY");
        public final static Property Memo = new Property(8, String.class, "memo", false, "MEMO");
        public final static Property MacAddress = new Property(9, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property VipPhone = new Property(10, String.class, "vipPhone", false, "VIP_PHONE");
        public final static Property Operator = new Property(11, String.class, "operator", false, "OPERATOR");
    }


    public VipCrmFeeDao(DaoConfig config) {
        super(config);
    }
    
    public VipCrmFeeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIP_CRM_FEE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"SHIFT_TABLE_NUM\" TEXT," + // 2: shiftTableNum
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 3: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 4: branchNum
                "\"TYPE\" TEXT," + // 5: type
                "\"PAY_TYPE_NAME\" TEXT," + // 6: payTypeName
                "\"PAY_MONEY\" REAL NOT NULL ," + // 7: payMoney
                "\"MEMO\" TEXT," + // 8: memo
                "\"MAC_ADDRESS\" TEXT," + // 9: macAddress
                "\"VIP_PHONE\" TEXT," + // 10: vipPhone
                "\"OPERATOR\" TEXT);"); // 11: operator
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIP_CRM_FEE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VipCrmFee entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindString(3, shiftTableNum);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(4, systemBookCode);
        }
        stmt.bindLong(5, entity.getBranchNum());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String payTypeName = entity.getPayTypeName();
        if (payTypeName != null) {
            stmt.bindString(7, payTypeName);
        }
        stmt.bindDouble(8, entity.getPayMoney());
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(9, memo);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(10, macAddress);
        }
 
        String vipPhone = entity.getVipPhone();
        if (vipPhone != null) {
            stmt.bindString(11, vipPhone);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(12, operator);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VipCrmFee entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindString(3, shiftTableNum);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(4, systemBookCode);
        }
        stmt.bindLong(5, entity.getBranchNum());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String payTypeName = entity.getPayTypeName();
        if (payTypeName != null) {
            stmt.bindString(7, payTypeName);
        }
        stmt.bindDouble(8, entity.getPayMoney());
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(9, memo);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(10, macAddress);
        }
 
        String vipPhone = entity.getVipPhone();
        if (vipPhone != null) {
            stmt.bindString(11, vipPhone);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(12, operator);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public VipCrmFee readEntity(Cursor cursor, int offset) {
        VipCrmFee entity = new VipCrmFee( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shiftTableNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // systemBookCode
            cursor.getInt(offset + 4), // branchNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // payTypeName
            cursor.getFloat(offset + 7), // payMoney
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // memo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // macAddress
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vipPhone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // operator
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VipCrmFee entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShiftTableNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSystemBookCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranchNum(cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPayTypeName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPayMoney(cursor.getFloat(offset + 7));
        entity.setMemo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMacAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVipPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOperator(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VipCrmFee entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VipCrmFee entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VipCrmFee entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
