package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.ManagementTemplate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MANAGEMENT_TEMPLATE".
*/
public class ManagementTemplateDao extends AbstractDao<ManagementTemplate, Long> {

    public static final String TABLENAME = "MANAGEMENT_TEMPLATE";

    /**
     * Properties of entity ManagementTemplate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Management_template_num = new Property(0, Long.class, "management_template_num", true, "MANAGEMENT_TEMPLATE_NUM");
        public final static Property System_book_code = new Property(1, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Management_template_name = new Property(2, String.class, "management_template_name", false, "MANAGEMENT_TEMPLATE_NAME");
        public final static Property Management_template_last_edit_time = new Property(3, String.class, "management_template_last_edit_time", false, "MANAGEMENT_TEMPLATE_LAST_EDIT_TIME");
    }

    private DaoSession daoSession;


    public ManagementTemplateDao(DaoConfig config) {
        super(config);
    }
    
    public ManagementTemplateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MANAGEMENT_TEMPLATE\" (" + //
                "\"MANAGEMENT_TEMPLATE_NUM\" INTEGER PRIMARY KEY ," + // 0: management_template_num
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: system_book_code
                "\"MANAGEMENT_TEMPLATE_NAME\" TEXT," + // 2: management_template_name
                "\"MANAGEMENT_TEMPLATE_LAST_EDIT_TIME\" TEXT);"); // 3: management_template_last_edit_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MANAGEMENT_TEMPLATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ManagementTemplate entity) {
        stmt.clearBindings();
 
        Long management_template_num = entity.getManagement_template_num();
        if (management_template_num != null) {
            stmt.bindLong(1, management_template_num);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
 
        String management_template_name = entity.getManagement_template_name();
        if (management_template_name != null) {
            stmt.bindString(3, management_template_name);
        }
 
        String management_template_last_edit_time = entity.getManagement_template_last_edit_time();
        if (management_template_last_edit_time != null) {
            stmt.bindString(4, management_template_last_edit_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ManagementTemplate entity) {
        stmt.clearBindings();
 
        Long management_template_num = entity.getManagement_template_num();
        if (management_template_num != null) {
            stmt.bindLong(1, management_template_num);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
 
        String management_template_name = entity.getManagement_template_name();
        if (management_template_name != null) {
            stmt.bindString(3, management_template_name);
        }
 
        String management_template_last_edit_time = entity.getManagement_template_last_edit_time();
        if (management_template_last_edit_time != null) {
            stmt.bindString(4, management_template_last_edit_time);
        }
    }

    @Override
    protected final void attachEntity(ManagementTemplate entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ManagementTemplate readEntity(Cursor cursor, int offset) {
        ManagementTemplate entity = new ManagementTemplate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // management_template_num
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // system_book_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // management_template_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // management_template_last_edit_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ManagementTemplate entity, int offset) {
        entity.setManagement_template_num(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystem_book_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setManagement_template_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setManagement_template_last_edit_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ManagementTemplate entity, long rowId) {
        entity.setManagement_template_num(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ManagementTemplate entity) {
        if(entity != null) {
            return entity.getManagement_template_num();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ManagementTemplate entity) {
        return entity.getManagement_template_num() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
