package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.FmPayment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FM_PAYMENT".
*/
public class FmPaymentDao extends AbstractDao<FmPayment, Long> {

    public static final String TABLENAME = "FM_PAYMENT";

    /**
     * Properties of entity FmPayment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNo = new Property(1, String.class, "orderNo", false, "ORDER_NO");
        public final static Property OrderPaymentNum = new Property(2, int.class, "orderPaymentNum", false, "ORDER_PAYMENT_NUM");
        public final static Property SystemBookCode = new Property(3, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(4, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property ShiftTableNum = new Property(5, int.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property ShiftTableBizday = new Property(6, String.class, "shiftTableBizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property MerchantNum = new Property(7, int.class, "merchantNum", false, "MERCHANT_NUM");
        public final static Property BranchId = new Property(8, long.class, "branchId", false, "BRANCH_ID");
        public final static Property PaymentTime = new Property(9, String.class, "paymentTime", false, "PAYMENT_TIME");
        public final static Property PaymentPayBy = new Property(10, String.class, "paymentPayBy", false, "PAYMENT_PAY_BY");
        public final static Property PaymentRound = new Property(11, float.class, "paymentRound", false, "PAYMENT_ROUND");
        public final static Property PaymentReceive = new Property(12, float.class, "paymentReceive", false, "PAYMENT_RECEIVE");
        public final static Property PaymentMoney = new Property(13, float.class, "paymentMoney", false, "PAYMENT_MONEY");
        public final static Property PaymentChange = new Property(14, float.class, "paymentChange", false, "PAYMENT_CHANGE");
        public final static Property PaymentPaid = new Property(15, float.class, "paymentPaid", false, "PAYMENT_PAID");
        public final static Property PaymentBillNo = new Property(16, String.class, "paymentBillNo", false, "PAYMENT_BILL_NO");
        public final static Property PaymentMemo = new Property(17, String.class, "paymentMemo", false, "PAYMENT_MEMO");
        public final static Property PaymentCustNum = new Property(18, int.class, "paymentCustNum", false, "PAYMENT_CUST_NUM");
    }

    private Query<FmPayment> fmPosOrder_PaymentsQuery;

    public FmPaymentDao(DaoConfig config) {
        super(config);
    }
    
    public FmPaymentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FM_PAYMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_NO\" TEXT," + // 1: orderNo
                "\"ORDER_PAYMENT_NUM\" INTEGER NOT NULL ," + // 2: orderPaymentNum
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 3: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 4: branchNum
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 5: shiftTableNum
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 6: shiftTableBizday
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 7: merchantNum
                "\"BRANCH_ID\" INTEGER NOT NULL ," + // 8: branchId
                "\"PAYMENT_TIME\" TEXT," + // 9: paymentTime
                "\"PAYMENT_PAY_BY\" TEXT," + // 10: paymentPayBy
                "\"PAYMENT_ROUND\" REAL NOT NULL ," + // 11: paymentRound
                "\"PAYMENT_RECEIVE\" REAL NOT NULL ," + // 12: paymentReceive
                "\"PAYMENT_MONEY\" REAL NOT NULL ," + // 13: paymentMoney
                "\"PAYMENT_CHANGE\" REAL NOT NULL ," + // 14: paymentChange
                "\"PAYMENT_PAID\" REAL NOT NULL ," + // 15: paymentPaid
                "\"PAYMENT_BILL_NO\" TEXT," + // 16: paymentBillNo
                "\"PAYMENT_MEMO\" TEXT," + // 17: paymentMemo
                "\"PAYMENT_CUST_NUM\" INTEGER NOT NULL );"); // 18: paymentCustNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FM_PAYMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FmPayment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
        stmt.bindLong(3, entity.getOrderPaymentNum());
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(4, systemBookCode);
        }
        stmt.bindLong(5, entity.getBranchNum());
        stmt.bindLong(6, entity.getShiftTableNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(7, shiftTableBizday);
        }
        stmt.bindLong(8, entity.getMerchantNum());
        stmt.bindLong(9, entity.getBranchId());
 
        String paymentTime = entity.getPaymentTime();
        if (paymentTime != null) {
            stmt.bindString(10, paymentTime);
        }
 
        String paymentPayBy = entity.getPaymentPayBy();
        if (paymentPayBy != null) {
            stmt.bindString(11, paymentPayBy);
        }
        stmt.bindDouble(12, entity.getPaymentRound());
        stmt.bindDouble(13, entity.getPaymentReceive());
        stmt.bindDouble(14, entity.getPaymentMoney());
        stmt.bindDouble(15, entity.getPaymentChange());
        stmt.bindDouble(16, entity.getPaymentPaid());
 
        String paymentBillNo = entity.getPaymentBillNo();
        if (paymentBillNo != null) {
            stmt.bindString(17, paymentBillNo);
        }
 
        String paymentMemo = entity.getPaymentMemo();
        if (paymentMemo != null) {
            stmt.bindString(18, paymentMemo);
        }
        stmt.bindLong(19, entity.getPaymentCustNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FmPayment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
        stmt.bindLong(3, entity.getOrderPaymentNum());
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(4, systemBookCode);
        }
        stmt.bindLong(5, entity.getBranchNum());
        stmt.bindLong(6, entity.getShiftTableNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(7, shiftTableBizday);
        }
        stmt.bindLong(8, entity.getMerchantNum());
        stmt.bindLong(9, entity.getBranchId());
 
        String paymentTime = entity.getPaymentTime();
        if (paymentTime != null) {
            stmt.bindString(10, paymentTime);
        }
 
        String paymentPayBy = entity.getPaymentPayBy();
        if (paymentPayBy != null) {
            stmt.bindString(11, paymentPayBy);
        }
        stmt.bindDouble(12, entity.getPaymentRound());
        stmt.bindDouble(13, entity.getPaymentReceive());
        stmt.bindDouble(14, entity.getPaymentMoney());
        stmt.bindDouble(15, entity.getPaymentChange());
        stmt.bindDouble(16, entity.getPaymentPaid());
 
        String paymentBillNo = entity.getPaymentBillNo();
        if (paymentBillNo != null) {
            stmt.bindString(17, paymentBillNo);
        }
 
        String paymentMemo = entity.getPaymentMemo();
        if (paymentMemo != null) {
            stmt.bindString(18, paymentMemo);
        }
        stmt.bindLong(19, entity.getPaymentCustNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FmPayment readEntity(Cursor cursor, int offset) {
        FmPayment entity = new FmPayment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNo
            cursor.getInt(offset + 2), // orderPaymentNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // systemBookCode
            cursor.getInt(offset + 4), // branchNum
            cursor.getInt(offset + 5), // shiftTableNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shiftTableBizday
            cursor.getInt(offset + 7), // merchantNum
            cursor.getLong(offset + 8), // branchId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // paymentTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // paymentPayBy
            cursor.getFloat(offset + 11), // paymentRound
            cursor.getFloat(offset + 12), // paymentReceive
            cursor.getFloat(offset + 13), // paymentMoney
            cursor.getFloat(offset + 14), // paymentChange
            cursor.getFloat(offset + 15), // paymentPaid
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // paymentBillNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // paymentMemo
            cursor.getInt(offset + 18) // paymentCustNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FmPayment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderPaymentNum(cursor.getInt(offset + 2));
        entity.setSystemBookCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranchNum(cursor.getInt(offset + 4));
        entity.setShiftTableNum(cursor.getInt(offset + 5));
        entity.setShiftTableBizday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMerchantNum(cursor.getInt(offset + 7));
        entity.setBranchId(cursor.getLong(offset + 8));
        entity.setPaymentTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPaymentPayBy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPaymentRound(cursor.getFloat(offset + 11));
        entity.setPaymentReceive(cursor.getFloat(offset + 12));
        entity.setPaymentMoney(cursor.getFloat(offset + 13));
        entity.setPaymentChange(cursor.getFloat(offset + 14));
        entity.setPaymentPaid(cursor.getFloat(offset + 15));
        entity.setPaymentBillNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPaymentMemo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPaymentCustNum(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FmPayment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FmPayment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FmPayment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "payments" to-many relationship of FmPosOrder. */
    public List<FmPayment> _queryFmPosOrder_Payments(String orderNo) {
        synchronized (this) {
            if (fmPosOrder_PaymentsQuery == null) {
                QueryBuilder<FmPayment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderNo.eq(null));
                fmPosOrder_PaymentsQuery = queryBuilder.build();
            }
        }
        Query<FmPayment> query = fmPosOrder_PaymentsQuery.forCurrentThread();
        query.setParameter(0, orderNo);
        return query.list();
    }

}
