package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.ShiftTablePayment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHIFT_TABLE_PAYMENT".
*/
public class ShiftTablePaymentDao extends AbstractDao<ShiftTablePayment, Long> {

    public static final String TABLENAME = "SHIFT_TABLE_PAYMENT";

    /**
     * Properties of entity ShiftTablePayment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property System_book_code = new Property(1, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Branch_num = new Property(2, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Shift_table_num = new Property(3, int.class, "shift_table_num", false, "SHIFT_TABLE_NUM");
        public final static Property Shift_table_bizday = new Property(4, String.class, "shift_table_bizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property Shift_table_payment_num = new Property(5, int.class, "shift_table_payment_num", false, "SHIFT_TABLE_PAYMENT_NUM");
        public final static Property Shift_table_payment_type = new Property(6, String.class, "shift_table_payment_type", false, "SHIFT_TABLE_PAYMENT_TYPE");
        public final static Property Shift_table_payment_money = new Property(7, float.class, "shift_table_payment_money", false, "SHIFT_TABLE_PAYMENT_MONEY");
        public final static Property ShiftTablePaymentSyncFlag = new Property(8, boolean.class, "shiftTablePaymentSyncFlag", false, "SHIFT_TABLE_PAYMENT_SYNC_FLAG");
        public final static Property Shift_table_payment_bank_name = new Property(9, String.class, "shift_table_payment_bank_name", false, "SHIFT_TABLE_PAYMENT_BANK_NAME");
        public final static Property Shift_table_payment_time = new Property(10, String.class, "shift_table_payment_time", false, "SHIFT_TABLE_PAYMENT_TIME");
        public final static Property Shift_table_payment_bank_bill_no = new Property(11, String.class, "shift_table_payment_bank_bill_no", false, "SHIFT_TABLE_PAYMENT_BANK_BILL_NO");
        public final static Property Shift_table_payment_ori_money = new Property(12, float.class, "shift_table_payment_ori_money", false, "SHIFT_TABLE_PAYMENT_ORI_MONEY");
    }


    public ShiftTablePaymentDao(DaoConfig config) {
        super(config);
    }
    
    public ShiftTablePaymentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHIFT_TABLE_PAYMENT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: system_book_code
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 2: branch_num
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 3: shift_table_num
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 4: shift_table_bizday
                "\"SHIFT_TABLE_PAYMENT_NUM\" INTEGER NOT NULL ," + // 5: shift_table_payment_num
                "\"SHIFT_TABLE_PAYMENT_TYPE\" TEXT," + // 6: shift_table_payment_type
                "\"SHIFT_TABLE_PAYMENT_MONEY\" REAL NOT NULL ," + // 7: shift_table_payment_money
                "\"SHIFT_TABLE_PAYMENT_SYNC_FLAG\" INTEGER NOT NULL ," + // 8: shiftTablePaymentSyncFlag
                "\"SHIFT_TABLE_PAYMENT_BANK_NAME\" TEXT," + // 9: shift_table_payment_bank_name
                "\"SHIFT_TABLE_PAYMENT_TIME\" TEXT," + // 10: shift_table_payment_time
                "\"SHIFT_TABLE_PAYMENT_BANK_BILL_NO\" TEXT," + // 11: shift_table_payment_bank_bill_no
                "\"SHIFT_TABLE_PAYMENT_ORI_MONEY\" REAL NOT NULL );"); // 12: shift_table_payment_ori_money
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHIFT_TABLE_PAYMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShiftTablePayment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
        stmt.bindLong(3, entity.getBranch_num());
        stmt.bindLong(4, entity.getShift_table_num());
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(5, shift_table_bizday);
        }
        stmt.bindLong(6, entity.getShift_table_payment_num());
 
        String shift_table_payment_type = entity.getShift_table_payment_type();
        if (shift_table_payment_type != null) {
            stmt.bindString(7, shift_table_payment_type);
        }
        stmt.bindDouble(8, entity.getShift_table_payment_money());
        stmt.bindLong(9, entity.getShiftTablePaymentSyncFlag() ? 1L: 0L);
 
        String shift_table_payment_bank_name = entity.getShift_table_payment_bank_name();
        if (shift_table_payment_bank_name != null) {
            stmt.bindString(10, shift_table_payment_bank_name);
        }
 
        String shift_table_payment_time = entity.getShift_table_payment_time();
        if (shift_table_payment_time != null) {
            stmt.bindString(11, shift_table_payment_time);
        }
 
        String shift_table_payment_bank_bill_no = entity.getShift_table_payment_bank_bill_no();
        if (shift_table_payment_bank_bill_no != null) {
            stmt.bindString(12, shift_table_payment_bank_bill_no);
        }
        stmt.bindDouble(13, entity.getShift_table_payment_ori_money());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShiftTablePayment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
        stmt.bindLong(3, entity.getBranch_num());
        stmt.bindLong(4, entity.getShift_table_num());
 
        String shift_table_bizday = entity.getShift_table_bizday();
        if (shift_table_bizday != null) {
            stmt.bindString(5, shift_table_bizday);
        }
        stmt.bindLong(6, entity.getShift_table_payment_num());
 
        String shift_table_payment_type = entity.getShift_table_payment_type();
        if (shift_table_payment_type != null) {
            stmt.bindString(7, shift_table_payment_type);
        }
        stmt.bindDouble(8, entity.getShift_table_payment_money());
        stmt.bindLong(9, entity.getShiftTablePaymentSyncFlag() ? 1L: 0L);
 
        String shift_table_payment_bank_name = entity.getShift_table_payment_bank_name();
        if (shift_table_payment_bank_name != null) {
            stmt.bindString(10, shift_table_payment_bank_name);
        }
 
        String shift_table_payment_time = entity.getShift_table_payment_time();
        if (shift_table_payment_time != null) {
            stmt.bindString(11, shift_table_payment_time);
        }
 
        String shift_table_payment_bank_bill_no = entity.getShift_table_payment_bank_bill_no();
        if (shift_table_payment_bank_bill_no != null) {
            stmt.bindString(12, shift_table_payment_bank_bill_no);
        }
        stmt.bindDouble(13, entity.getShift_table_payment_ori_money());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShiftTablePayment readEntity(Cursor cursor, int offset) {
        ShiftTablePayment entity = new ShiftTablePayment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // system_book_code
            cursor.getInt(offset + 2), // branch_num
            cursor.getInt(offset + 3), // shift_table_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shift_table_bizday
            cursor.getInt(offset + 5), // shift_table_payment_num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shift_table_payment_type
            cursor.getFloat(offset + 7), // shift_table_payment_money
            cursor.getShort(offset + 8) != 0, // shiftTablePaymentSyncFlag
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shift_table_payment_bank_name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // shift_table_payment_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // shift_table_payment_bank_bill_no
            cursor.getFloat(offset + 12) // shift_table_payment_ori_money
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShiftTablePayment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystem_book_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranch_num(cursor.getInt(offset + 2));
        entity.setShift_table_num(cursor.getInt(offset + 3));
        entity.setShift_table_bizday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShift_table_payment_num(cursor.getInt(offset + 5));
        entity.setShift_table_payment_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShift_table_payment_money(cursor.getFloat(offset + 7));
        entity.setShiftTablePaymentSyncFlag(cursor.getShort(offset + 8) != 0);
        entity.setShift_table_payment_bank_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShift_table_payment_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShift_table_payment_bank_bill_no(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShift_table_payment_ori_money(cursor.getFloat(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShiftTablePayment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShiftTablePayment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShiftTablePayment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
