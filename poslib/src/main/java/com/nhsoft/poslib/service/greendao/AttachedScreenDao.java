package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.AttachedScreen;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTACHED_SCREEN".
*/
public class AttachedScreenDao extends AbstractDao<AttachedScreen, String> {

    public static final String TABLENAME = "ATTACHED_SCREEN";

    /**
     * Properties of entity AttachedScreen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property System_image_id = new Property(0, String.class, "system_image_id", true, "SYSTEM_IMAGE_ID");
        public final static Property System_book_code = new Property(1, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property System_image_type = new Property(2, String.class, "system_image_type", false, "SYSTEM_IMAGE_TYPE");
        public final static Property System_image_order = new Property(3, int.class, "system_image_order", false, "SYSTEM_IMAGE_ORDER");
        public final static Property System_image_url = new Property(4, String.class, "system_image_url", false, "SYSTEM_IMAGE_URL");
        public final static Property System_image_width = new Property(5, int.class, "system_image_width", false, "SYSTEM_IMAGE_WIDTH");
        public final static Property System_image_height = new Property(6, int.class, "system_image_height", false, "SYSTEM_IMAGE_HEIGHT");
    }


    public AttachedScreenDao(DaoConfig config) {
        super(config);
    }
    
    public AttachedScreenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTACHED_SCREEN\" (" + //
                "\"SYSTEM_IMAGE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: system_image_id
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: system_book_code
                "\"SYSTEM_IMAGE_TYPE\" TEXT," + // 2: system_image_type
                "\"SYSTEM_IMAGE_ORDER\" INTEGER NOT NULL ," + // 3: system_image_order
                "\"SYSTEM_IMAGE_URL\" TEXT," + // 4: system_image_url
                "\"SYSTEM_IMAGE_WIDTH\" INTEGER NOT NULL ," + // 5: system_image_width
                "\"SYSTEM_IMAGE_HEIGHT\" INTEGER NOT NULL );"); // 6: system_image_height
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTACHED_SCREEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttachedScreen entity) {
        stmt.clearBindings();
 
        String system_image_id = entity.getSystem_image_id();
        if (system_image_id != null) {
            stmt.bindString(1, system_image_id);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
 
        String system_image_type = entity.getSystem_image_type();
        if (system_image_type != null) {
            stmt.bindString(3, system_image_type);
        }
        stmt.bindLong(4, entity.getSystem_image_order());
 
        String system_image_url = entity.getSystem_image_url();
        if (system_image_url != null) {
            stmt.bindString(5, system_image_url);
        }
        stmt.bindLong(6, entity.getSystem_image_width());
        stmt.bindLong(7, entity.getSystem_image_height());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttachedScreen entity) {
        stmt.clearBindings();
 
        String system_image_id = entity.getSystem_image_id();
        if (system_image_id != null) {
            stmt.bindString(1, system_image_id);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
 
        String system_image_type = entity.getSystem_image_type();
        if (system_image_type != null) {
            stmt.bindString(3, system_image_type);
        }
        stmt.bindLong(4, entity.getSystem_image_order());
 
        String system_image_url = entity.getSystem_image_url();
        if (system_image_url != null) {
            stmt.bindString(5, system_image_url);
        }
        stmt.bindLong(6, entity.getSystem_image_width());
        stmt.bindLong(7, entity.getSystem_image_height());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AttachedScreen readEntity(Cursor cursor, int offset) {
        AttachedScreen entity = new AttachedScreen( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // system_image_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // system_book_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // system_image_type
            cursor.getInt(offset + 3), // system_image_order
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // system_image_url
            cursor.getInt(offset + 5), // system_image_width
            cursor.getInt(offset + 6) // system_image_height
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttachedScreen entity, int offset) {
        entity.setSystem_image_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSystem_book_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSystem_image_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSystem_image_order(cursor.getInt(offset + 3));
        entity.setSystem_image_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSystem_image_width(cursor.getInt(offset + 5));
        entity.setSystem_image_height(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AttachedScreen entity, long rowId) {
        return entity.getSystem_image_id();
    }
    
    @Override
    public String getKey(AttachedScreen entity) {
        if(entity != null) {
            return entity.getSystem_image_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttachedScreen entity) {
        return entity.getSystem_image_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
