package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.VipIcInit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIP_IC_INIT".
*/
public class VipIcInitDao extends AbstractDao<VipIcInit, String> {

    public static final String TABLENAME = "VIP_IC_INIT";

    /**
     * Properties of entity VipIcInit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CardUserNum = new Property(0, String.class, "cardUserNum", true, "CARDUSERNUM");
        public final static Property ShiftTableBizDay = new Property(1, String.class, "shiftTableBizDay", false, "SHIFT_TABLE_BIZ_DAY");
        public final static Property PrintNum = new Property(2, String.class, "printNum", false, "PRINT_NUM");
        public final static Property OperateTime = new Property(3, String.class, "operateTime", false, "OPERATE_TIME");
        public final static Property Operator = new Property(4, String.class, "operator", false, "OPERATOR");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property Mome = new Property(6, String.class, "mome", false, "MOME");
        public final static Property SystemBookCode = new Property(7, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(8, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property ShiftTableNum = new Property(9, String.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
    }


    public VipIcInitDao(DaoConfig config) {
        super(config);
    }
    
    public VipIcInitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIP_IC_INIT\" (" + //
                "\"CARDUSERNUM\" TEXT PRIMARY KEY NOT NULL ," + // 0: cardUserNum
                "\"SHIFT_TABLE_BIZ_DAY\" TEXT," + // 1: shiftTableBizDay
                "\"PRINT_NUM\" TEXT," + // 2: printNum
                "\"OPERATE_TIME\" TEXT," + // 3: operateTime
                "\"OPERATOR\" TEXT," + // 4: operator
                "\"STATUS\" TEXT," + // 5: status
                "\"MOME\" TEXT," + // 6: mome
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 7: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 8: branchNum
                "\"SHIFT_TABLE_NUM\" TEXT);"); // 9: shiftTableNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIP_IC_INIT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VipIcInit entity) {
        stmt.clearBindings();
 
        String cardUserNum = entity.getCardUserNum();
        if (cardUserNum != null) {
            stmt.bindString(1, cardUserNum);
        }
 
        String shiftTableBizDay = entity.getShiftTableBizDay();
        if (shiftTableBizDay != null) {
            stmt.bindString(2, shiftTableBizDay);
        }
 
        String printNum = entity.getPrintNum();
        if (printNum != null) {
            stmt.bindString(3, printNum);
        }
 
        String operateTime = entity.getOperateTime();
        if (operateTime != null) {
            stmt.bindString(4, operateTime);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(5, operator);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String mome = entity.getMome();
        if (mome != null) {
            stmt.bindString(7, mome);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(8, systemBookCode);
        }
        stmt.bindLong(9, entity.getBranchNum());
 
        String shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindString(10, shiftTableNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VipIcInit entity) {
        stmt.clearBindings();
 
        String cardUserNum = entity.getCardUserNum();
        if (cardUserNum != null) {
            stmt.bindString(1, cardUserNum);
        }
 
        String shiftTableBizDay = entity.getShiftTableBizDay();
        if (shiftTableBizDay != null) {
            stmt.bindString(2, shiftTableBizDay);
        }
 
        String printNum = entity.getPrintNum();
        if (printNum != null) {
            stmt.bindString(3, printNum);
        }
 
        String operateTime = entity.getOperateTime();
        if (operateTime != null) {
            stmt.bindString(4, operateTime);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(5, operator);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String mome = entity.getMome();
        if (mome != null) {
            stmt.bindString(7, mome);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(8, systemBookCode);
        }
        stmt.bindLong(9, entity.getBranchNum());
 
        String shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindString(10, shiftTableNum);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VipIcInit readEntity(Cursor cursor, int offset) {
        VipIcInit entity = new VipIcInit( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cardUserNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shiftTableBizDay
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // printNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // operateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // operator
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mome
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // systemBookCode
            cursor.getInt(offset + 8), // branchNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // shiftTableNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VipIcInit entity, int offset) {
        entity.setCardUserNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setShiftTableBizDay(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrintNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOperateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOperator(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMome(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSystemBookCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBranchNum(cursor.getInt(offset + 8));
        entity.setShiftTableNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VipIcInit entity, long rowId) {
        return entity.getCardUserNum();
    }
    
    @Override
    public String getKey(VipIcInit entity) {
        if(entity != null) {
            return entity.getCardUserNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VipIcInit entity) {
        return entity.getCardUserNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
