package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.order.PosOrderKitDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS_ORDER_KIT_DETAIL".
*/
public class PosOrderKitDetailDao extends AbstractDao<PosOrderKitDetail, Long> {

    public static final String TABLENAME = "POS_ORDER_KIT_DETAIL";

    /**
     * Properties of entity PosOrderKitDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNo = new Property(1, String.class, "orderNo", false, "ORDER_NO");
        public final static Property OrderDetailNum = new Property(2, Integer.class, "orderDetailNum", false, "ORDER_DETAIL_NUM");
        public final static Property OrderKitDetailNum = new Property(3, Integer.class, "orderKitDetailNum", false, "ORDER_KIT_DETAIL_NUM");
        public final static Property ItemNum = new Property(4, Long.class, "itemNum", false, "ITEM_NUM");
        public final static Property OrderKitDetailItemName = new Property(5, String.class, "orderKitDetailItemName", false, "ORDER_KIT_DETAIL_ITEM_NAME");
        public final static Property OrderKitDetailDepartment = new Property(6, String.class, "orderKitDetailDepartment", false, "ORDER_KIT_DETAIL_DEPARTMENT");
        public final static Property OrderKitDetailStdPrice = new Property(7, float.class, "orderKitDetailStdPrice", false, "ORDER_KIT_DETAIL_STD_PRICE");
        public final static Property OrderKitDetailPrice = new Property(8, float.class, "orderKitDetailPrice", false, "ORDER_KIT_DETAIL_PRICE");
        public final static Property OrderKitDetailAmount = new Property(9, float.class, "orderKitDetailAmount", false, "ORDER_KIT_DETAIL_AMOUNT");
        public final static Property OrderKitDetailMoney = new Property(10, float.class, "orderKitDetailMoney", false, "ORDER_KIT_DETAIL_MONEY");
        public final static Property OrderKitDetailAppendMoney = new Property(11, float.class, "orderKitDetailAppendMoney", false, "ORDER_KIT_DETAIL_APPEND_MONEY");
        public final static Property OrderKitDetailDiscount = new Property(12, float.class, "orderKitDetailDiscount", false, "ORDER_KIT_DETAIL_DISCOUNT");
        public final static Property OrderKitDetailTax = new Property(13, float.class, "orderKitDetailTax", false, "ORDER_KIT_DETAIL_TAX");
        public final static Property OrderKitDetailPaymentMoney = new Property(14, float.class, "orderKitDetailPaymentMoney", false, "ORDER_KIT_DETAIL_PAYMENT_MONEY");
        public final static Property OrderKitDetailItemMatrixNum = new Property(15, Integer.class, "orderKitDetailItemMatrixNum", false, "ORDER_KIT_DETAIL_ITEM_MATRIX_NUM");
        public final static Property OrderKitDetailItemSerialNumber = new Property(16, String.class, "orderKitDetailItemSerialNumber", false, "ORDER_KIT_DETAIL_ITEM_SERIAL_NUMBER");
        public final static Property OrderKitDetailMemo = new Property(17, String.class, "orderKitDetailMemo", false, "ORDER_KIT_DETAIL_MEMO");
        public final static Property OrderKitDetailCost = new Property(18, float.class, "orderKitDetailCost", false, "ORDER_KIT_DETAIL_COST");
        public final static Property OrderKitDetailGrossProfit = new Property(19, float.class, "orderKitDetailGrossProfit", false, "ORDER_KIT_DETAIL_GROSS_PROFIT");
        public final static Property OrderKitDetailProducingDate = new Property(20, java.util.Date.class, "orderKitDetailProducingDate", false, "ORDER_KIT_DETAIL_PRODUCING_DATE");
        public final static Property OrderKitDetailLotNumber = new Property(21, String.class, "orderKitDetailLotNumber", false, "ORDER_KIT_DETAIL_LOT_NUMBER");
        public final static Property OrderKitDetailBookCode = new Property(22, String.class, "orderKitDetailBookCode", false, "ORDER_KIT_DETAIL_BOOK_CODE");
        public final static Property OrderKitDetailBranchNum = new Property(23, Integer.class, "orderKitDetailBranchNum", false, "ORDER_KIT_DETAIL_BRANCH_NUM");
        public final static Property OrderKitDetailBizday = new Property(24, String.class, "orderKitDetailBizday", false, "ORDER_KIT_DETAIL_BIZDAY");
        public final static Property OrderKitDetailOrderState = new Property(25, int.class, "orderKitDetailOrderState", false, "ORDER_KIT_DETAIL_ORDER_STATE");
        public final static Property OrderKitDetailStateCode = new Property(26, Integer.class, "orderKitDetailStateCode", false, "ORDER_KIT_DETAIL_STATE_CODE");
        public final static Property OrderSource = new Property(27, String.class, "orderSource", false, "ORDER_SOURCE");
        public final static Property SupplierNum = new Property(28, Integer.class, "supplierNum", false, "SUPPLIER_NUM");
        public final static Property SystemBookCode = new Property(29, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(30, Integer.class, "branchNum", false, "BRANCH_NUM");
        public final static Property ShiftTableNum = new Property(31, Integer.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property OrderKitDetailShareDiscount = new Property(32, Float.class, "orderKitDetailShareDiscount", false, "ORDER_KIT_DETAIL_SHARE_DISCOUNT");
    }


    public PosOrderKitDetailDao(DaoConfig config) {
        super(config);
    }
    
    public PosOrderKitDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS_ORDER_KIT_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_NO\" TEXT," + // 1: orderNo
                "\"ORDER_DETAIL_NUM\" INTEGER," + // 2: orderDetailNum
                "\"ORDER_KIT_DETAIL_NUM\" INTEGER," + // 3: orderKitDetailNum
                "\"ITEM_NUM\" INTEGER," + // 4: itemNum
                "\"ORDER_KIT_DETAIL_ITEM_NAME\" TEXT," + // 5: orderKitDetailItemName
                "\"ORDER_KIT_DETAIL_DEPARTMENT\" TEXT," + // 6: orderKitDetailDepartment
                "\"ORDER_KIT_DETAIL_STD_PRICE\" REAL NOT NULL ," + // 7: orderKitDetailStdPrice
                "\"ORDER_KIT_DETAIL_PRICE\" REAL NOT NULL ," + // 8: orderKitDetailPrice
                "\"ORDER_KIT_DETAIL_AMOUNT\" REAL NOT NULL ," + // 9: orderKitDetailAmount
                "\"ORDER_KIT_DETAIL_MONEY\" REAL NOT NULL ," + // 10: orderKitDetailMoney
                "\"ORDER_KIT_DETAIL_APPEND_MONEY\" REAL NOT NULL ," + // 11: orderKitDetailAppendMoney
                "\"ORDER_KIT_DETAIL_DISCOUNT\" REAL NOT NULL ," + // 12: orderKitDetailDiscount
                "\"ORDER_KIT_DETAIL_TAX\" REAL NOT NULL ," + // 13: orderKitDetailTax
                "\"ORDER_KIT_DETAIL_PAYMENT_MONEY\" REAL NOT NULL ," + // 14: orderKitDetailPaymentMoney
                "\"ORDER_KIT_DETAIL_ITEM_MATRIX_NUM\" INTEGER," + // 15: orderKitDetailItemMatrixNum
                "\"ORDER_KIT_DETAIL_ITEM_SERIAL_NUMBER\" TEXT," + // 16: orderKitDetailItemSerialNumber
                "\"ORDER_KIT_DETAIL_MEMO\" TEXT," + // 17: orderKitDetailMemo
                "\"ORDER_KIT_DETAIL_COST\" REAL NOT NULL ," + // 18: orderKitDetailCost
                "\"ORDER_KIT_DETAIL_GROSS_PROFIT\" REAL NOT NULL ," + // 19: orderKitDetailGrossProfit
                "\"ORDER_KIT_DETAIL_PRODUCING_DATE\" INTEGER," + // 20: orderKitDetailProducingDate
                "\"ORDER_KIT_DETAIL_LOT_NUMBER\" TEXT," + // 21: orderKitDetailLotNumber
                "\"ORDER_KIT_DETAIL_BOOK_CODE\" TEXT," + // 22: orderKitDetailBookCode
                "\"ORDER_KIT_DETAIL_BRANCH_NUM\" INTEGER," + // 23: orderKitDetailBranchNum
                "\"ORDER_KIT_DETAIL_BIZDAY\" TEXT," + // 24: orderKitDetailBizday
                "\"ORDER_KIT_DETAIL_ORDER_STATE\" INTEGER NOT NULL ," + // 25: orderKitDetailOrderState
                "\"ORDER_KIT_DETAIL_STATE_CODE\" INTEGER," + // 26: orderKitDetailStateCode
                "\"ORDER_SOURCE\" TEXT," + // 27: orderSource
                "\"SUPPLIER_NUM\" INTEGER," + // 28: supplierNum
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 29: systemBookCode
                "\"BRANCH_NUM\" INTEGER," + // 30: branchNum
                "\"SHIFT_TABLE_NUM\" INTEGER," + // 31: shiftTableNum
                "\"ORDER_KIT_DETAIL_SHARE_DISCOUNT\" REAL);"); // 32: orderKitDetailShareDiscount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS_ORDER_KIT_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PosOrderKitDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
 
        Integer orderDetailNum = entity.getOrderDetailNum();
        if (orderDetailNum != null) {
            stmt.bindLong(3, orderDetailNum);
        }
 
        Integer orderKitDetailNum = entity.getOrderKitDetailNum();
        if (orderKitDetailNum != null) {
            stmt.bindLong(4, orderKitDetailNum);
        }
 
        Long itemNum = entity.getItemNum();
        if (itemNum != null) {
            stmt.bindLong(5, itemNum);
        }
 
        String orderKitDetailItemName = entity.getOrderKitDetailItemName();
        if (orderKitDetailItemName != null) {
            stmt.bindString(6, orderKitDetailItemName);
        }
 
        String orderKitDetailDepartment = entity.getOrderKitDetailDepartment();
        if (orderKitDetailDepartment != null) {
            stmt.bindString(7, orderKitDetailDepartment);
        }
        stmt.bindDouble(8, entity.getOrderKitDetailStdPrice());
        stmt.bindDouble(9, entity.getOrderKitDetailPrice());
        stmt.bindDouble(10, entity.getOrderKitDetailAmount());
        stmt.bindDouble(11, entity.getOrderKitDetailMoney());
        stmt.bindDouble(12, entity.getOrderKitDetailAppendMoney());
        stmt.bindDouble(13, entity.getOrderKitDetailDiscount());
        stmt.bindDouble(14, entity.getOrderKitDetailTax());
        stmt.bindDouble(15, entity.getOrderKitDetailPaymentMoney());
 
        Integer orderKitDetailItemMatrixNum = entity.getOrderKitDetailItemMatrixNum();
        if (orderKitDetailItemMatrixNum != null) {
            stmt.bindLong(16, orderKitDetailItemMatrixNum);
        }
 
        String orderKitDetailItemSerialNumber = entity.getOrderKitDetailItemSerialNumber();
        if (orderKitDetailItemSerialNumber != null) {
            stmt.bindString(17, orderKitDetailItemSerialNumber);
        }
 
        String orderKitDetailMemo = entity.getOrderKitDetailMemo();
        if (orderKitDetailMemo != null) {
            stmt.bindString(18, orderKitDetailMemo);
        }
        stmt.bindDouble(19, entity.getOrderKitDetailCost());
        stmt.bindDouble(20, entity.getOrderKitDetailGrossProfit());
 
        java.util.Date orderKitDetailProducingDate = entity.getOrderKitDetailProducingDate();
        if (orderKitDetailProducingDate != null) {
            stmt.bindLong(21, orderKitDetailProducingDate.getTime());
        }
 
        String orderKitDetailLotNumber = entity.getOrderKitDetailLotNumber();
        if (orderKitDetailLotNumber != null) {
            stmt.bindString(22, orderKitDetailLotNumber);
        }
 
        String orderKitDetailBookCode = entity.getOrderKitDetailBookCode();
        if (orderKitDetailBookCode != null) {
            stmt.bindString(23, orderKitDetailBookCode);
        }
 
        Integer orderKitDetailBranchNum = entity.getOrderKitDetailBranchNum();
        if (orderKitDetailBranchNum != null) {
            stmt.bindLong(24, orderKitDetailBranchNum);
        }
 
        String orderKitDetailBizday = entity.getOrderKitDetailBizday();
        if (orderKitDetailBizday != null) {
            stmt.bindString(25, orderKitDetailBizday);
        }
        stmt.bindLong(26, entity.getOrderKitDetailOrderState());
 
        Integer orderKitDetailStateCode = entity.getOrderKitDetailStateCode();
        if (orderKitDetailStateCode != null) {
            stmt.bindLong(27, orderKitDetailStateCode);
        }
 
        String orderSource = entity.getOrderSource();
        if (orderSource != null) {
            stmt.bindString(28, orderSource);
        }
 
        Integer supplierNum = entity.getSupplierNum();
        if (supplierNum != null) {
            stmt.bindLong(29, supplierNum);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(30, systemBookCode);
        }
 
        Integer branchNum = entity.getBranchNum();
        if (branchNum != null) {
            stmt.bindLong(31, branchNum);
        }
 
        Integer shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindLong(32, shiftTableNum);
        }
 
        Float orderKitDetailShareDiscount = entity.getOrderKitDetailShareDiscount();
        if (orderKitDetailShareDiscount != null) {
            stmt.bindDouble(33, orderKitDetailShareDiscount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PosOrderKitDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
 
        Integer orderDetailNum = entity.getOrderDetailNum();
        if (orderDetailNum != null) {
            stmt.bindLong(3, orderDetailNum);
        }
 
        Integer orderKitDetailNum = entity.getOrderKitDetailNum();
        if (orderKitDetailNum != null) {
            stmt.bindLong(4, orderKitDetailNum);
        }
 
        Long itemNum = entity.getItemNum();
        if (itemNum != null) {
            stmt.bindLong(5, itemNum);
        }
 
        String orderKitDetailItemName = entity.getOrderKitDetailItemName();
        if (orderKitDetailItemName != null) {
            stmt.bindString(6, orderKitDetailItemName);
        }
 
        String orderKitDetailDepartment = entity.getOrderKitDetailDepartment();
        if (orderKitDetailDepartment != null) {
            stmt.bindString(7, orderKitDetailDepartment);
        }
        stmt.bindDouble(8, entity.getOrderKitDetailStdPrice());
        stmt.bindDouble(9, entity.getOrderKitDetailPrice());
        stmt.bindDouble(10, entity.getOrderKitDetailAmount());
        stmt.bindDouble(11, entity.getOrderKitDetailMoney());
        stmt.bindDouble(12, entity.getOrderKitDetailAppendMoney());
        stmt.bindDouble(13, entity.getOrderKitDetailDiscount());
        stmt.bindDouble(14, entity.getOrderKitDetailTax());
        stmt.bindDouble(15, entity.getOrderKitDetailPaymentMoney());
 
        Integer orderKitDetailItemMatrixNum = entity.getOrderKitDetailItemMatrixNum();
        if (orderKitDetailItemMatrixNum != null) {
            stmt.bindLong(16, orderKitDetailItemMatrixNum);
        }
 
        String orderKitDetailItemSerialNumber = entity.getOrderKitDetailItemSerialNumber();
        if (orderKitDetailItemSerialNumber != null) {
            stmt.bindString(17, orderKitDetailItemSerialNumber);
        }
 
        String orderKitDetailMemo = entity.getOrderKitDetailMemo();
        if (orderKitDetailMemo != null) {
            stmt.bindString(18, orderKitDetailMemo);
        }
        stmt.bindDouble(19, entity.getOrderKitDetailCost());
        stmt.bindDouble(20, entity.getOrderKitDetailGrossProfit());
 
        java.util.Date orderKitDetailProducingDate = entity.getOrderKitDetailProducingDate();
        if (orderKitDetailProducingDate != null) {
            stmt.bindLong(21, orderKitDetailProducingDate.getTime());
        }
 
        String orderKitDetailLotNumber = entity.getOrderKitDetailLotNumber();
        if (orderKitDetailLotNumber != null) {
            stmt.bindString(22, orderKitDetailLotNumber);
        }
 
        String orderKitDetailBookCode = entity.getOrderKitDetailBookCode();
        if (orderKitDetailBookCode != null) {
            stmt.bindString(23, orderKitDetailBookCode);
        }
 
        Integer orderKitDetailBranchNum = entity.getOrderKitDetailBranchNum();
        if (orderKitDetailBranchNum != null) {
            stmt.bindLong(24, orderKitDetailBranchNum);
        }
 
        String orderKitDetailBizday = entity.getOrderKitDetailBizday();
        if (orderKitDetailBizday != null) {
            stmt.bindString(25, orderKitDetailBizday);
        }
        stmt.bindLong(26, entity.getOrderKitDetailOrderState());
 
        Integer orderKitDetailStateCode = entity.getOrderKitDetailStateCode();
        if (orderKitDetailStateCode != null) {
            stmt.bindLong(27, orderKitDetailStateCode);
        }
 
        String orderSource = entity.getOrderSource();
        if (orderSource != null) {
            stmt.bindString(28, orderSource);
        }
 
        Integer supplierNum = entity.getSupplierNum();
        if (supplierNum != null) {
            stmt.bindLong(29, supplierNum);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(30, systemBookCode);
        }
 
        Integer branchNum = entity.getBranchNum();
        if (branchNum != null) {
            stmt.bindLong(31, branchNum);
        }
 
        Integer shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindLong(32, shiftTableNum);
        }
 
        Float orderKitDetailShareDiscount = entity.getOrderKitDetailShareDiscount();
        if (orderKitDetailShareDiscount != null) {
            stmt.bindDouble(33, orderKitDetailShareDiscount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PosOrderKitDetail readEntity(Cursor cursor, int offset) {
        PosOrderKitDetail entity = new PosOrderKitDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNo
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // orderDetailNum
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // orderKitDetailNum
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // itemNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orderKitDetailItemName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderKitDetailDepartment
            cursor.getFloat(offset + 7), // orderKitDetailStdPrice
            cursor.getFloat(offset + 8), // orderKitDetailPrice
            cursor.getFloat(offset + 9), // orderKitDetailAmount
            cursor.getFloat(offset + 10), // orderKitDetailMoney
            cursor.getFloat(offset + 11), // orderKitDetailAppendMoney
            cursor.getFloat(offset + 12), // orderKitDetailDiscount
            cursor.getFloat(offset + 13), // orderKitDetailTax
            cursor.getFloat(offset + 14), // orderKitDetailPaymentMoney
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // orderKitDetailItemMatrixNum
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // orderKitDetailItemSerialNumber
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // orderKitDetailMemo
            cursor.getFloat(offset + 18), // orderKitDetailCost
            cursor.getFloat(offset + 19), // orderKitDetailGrossProfit
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // orderKitDetailProducingDate
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // orderKitDetailLotNumber
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // orderKitDetailBookCode
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // orderKitDetailBranchNum
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // orderKitDetailBizday
            cursor.getInt(offset + 25), // orderKitDetailOrderState
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // orderKitDetailStateCode
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // orderSource
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // supplierNum
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // systemBookCode
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // branchNum
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // shiftTableNum
            cursor.isNull(offset + 32) ? null : cursor.getFloat(offset + 32) // orderKitDetailShareDiscount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PosOrderKitDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderDetailNum(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setOrderKitDetailNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setItemNum(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setOrderKitDetailItemName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderKitDetailDepartment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderKitDetailStdPrice(cursor.getFloat(offset + 7));
        entity.setOrderKitDetailPrice(cursor.getFloat(offset + 8));
        entity.setOrderKitDetailAmount(cursor.getFloat(offset + 9));
        entity.setOrderKitDetailMoney(cursor.getFloat(offset + 10));
        entity.setOrderKitDetailAppendMoney(cursor.getFloat(offset + 11));
        entity.setOrderKitDetailDiscount(cursor.getFloat(offset + 12));
        entity.setOrderKitDetailTax(cursor.getFloat(offset + 13));
        entity.setOrderKitDetailPaymentMoney(cursor.getFloat(offset + 14));
        entity.setOrderKitDetailItemMatrixNum(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setOrderKitDetailItemSerialNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOrderKitDetailMemo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrderKitDetailCost(cursor.getFloat(offset + 18));
        entity.setOrderKitDetailGrossProfit(cursor.getFloat(offset + 19));
        entity.setOrderKitDetailProducingDate(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setOrderKitDetailLotNumber(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setOrderKitDetailBookCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOrderKitDetailBranchNum(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setOrderKitDetailBizday(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOrderKitDetailOrderState(cursor.getInt(offset + 25));
        entity.setOrderKitDetailStateCode(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setOrderSource(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSupplierNum(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setSystemBookCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setBranchNum(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setShiftTableNum(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setOrderKitDetailShareDiscount(cursor.isNull(offset + 32) ? null : cursor.getFloat(offset + 32));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PosOrderKitDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PosOrderKitDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PosOrderKitDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
