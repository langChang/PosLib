package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.PolicyQuantityDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POLICY_QUANTITY_DETAIL".
*/
public class PolicyQuantityDetailDao extends AbstractDao<PolicyQuantityDetail, Long> {

    public static final String TABLENAME = "POLICY_QUANTITY_DETAIL";

    /**
     * Properties of entity PolicyQuantityDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Promotion_quantity_no = new Property(1, String.class, "promotion_quantity_no", false, "PROMOTION_QUANTITY_NO");
        public final static Property Promotion_quantity_detail_num = new Property(2, int.class, "promotion_quantity_detail_num", false, "PROMOTION_QUANTITY_DETAIL_NUM");
        public final static Property Item_num = new Property(3, long.class, "item_num", false, "ITEM_NUM");
        public final static Property Promotion_quantity_detail_std_price = new Property(4, float.class, "promotion_quantity_detail_std_price", false, "PROMOTION_QUANTITY_DETAIL_STD_PRICE");
        public final static Property Promotion_quantity_detail_special_price = new Property(5, float.class, "promotion_quantity_detail_special_price", false, "PROMOTION_QUANTITY_DETAIL_SPECIAL_PRICE");
        public final static Property Promotion_quantity_detail_min_amount = new Property(6, float.class, "promotion_quantity_detail_min_amount", false, "PROMOTION_QUANTITY_DETAIL_MIN_AMOUNT");
        public final static Property Promotion_quantity_detail_cost = new Property(7, float.class, "promotion_quantity_detail_cost", false, "PROMOTION_QUANTITY_DETAIL_COST");
    }

    private Query<PolicyQuantityDetail> policyQuantity_Policy_promotion_quantity_detailsQuery;

    public PolicyQuantityDetailDao(DaoConfig config) {
        super(config);
    }
    
    public PolicyQuantityDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POLICY_QUANTITY_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROMOTION_QUANTITY_NO\" TEXT," + // 1: promotion_quantity_no
                "\"PROMOTION_QUANTITY_DETAIL_NUM\" INTEGER NOT NULL ," + // 2: promotion_quantity_detail_num
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 3: item_num
                "\"PROMOTION_QUANTITY_DETAIL_STD_PRICE\" REAL NOT NULL ," + // 4: promotion_quantity_detail_std_price
                "\"PROMOTION_QUANTITY_DETAIL_SPECIAL_PRICE\" REAL NOT NULL ," + // 5: promotion_quantity_detail_special_price
                "\"PROMOTION_QUANTITY_DETAIL_MIN_AMOUNT\" REAL NOT NULL ," + // 6: promotion_quantity_detail_min_amount
                "\"PROMOTION_QUANTITY_DETAIL_COST\" REAL NOT NULL );"); // 7: promotion_quantity_detail_cost
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POLICY_QUANTITY_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PolicyQuantityDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String promotion_quantity_no = entity.getPromotion_quantity_no();
        if (promotion_quantity_no != null) {
            stmt.bindString(2, promotion_quantity_no);
        }
        stmt.bindLong(3, entity.getPromotion_quantity_detail_num());
        stmt.bindLong(4, entity.getItem_num());
        stmt.bindDouble(5, entity.getPromotion_quantity_detail_std_price());
        stmt.bindDouble(6, entity.getPromotion_quantity_detail_special_price());
        stmt.bindDouble(7, entity.getPromotion_quantity_detail_min_amount());
        stmt.bindDouble(8, entity.getPromotion_quantity_detail_cost());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PolicyQuantityDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String promotion_quantity_no = entity.getPromotion_quantity_no();
        if (promotion_quantity_no != null) {
            stmt.bindString(2, promotion_quantity_no);
        }
        stmt.bindLong(3, entity.getPromotion_quantity_detail_num());
        stmt.bindLong(4, entity.getItem_num());
        stmt.bindDouble(5, entity.getPromotion_quantity_detail_std_price());
        stmt.bindDouble(6, entity.getPromotion_quantity_detail_special_price());
        stmt.bindDouble(7, entity.getPromotion_quantity_detail_min_amount());
        stmt.bindDouble(8, entity.getPromotion_quantity_detail_cost());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PolicyQuantityDetail readEntity(Cursor cursor, int offset) {
        PolicyQuantityDetail entity = new PolicyQuantityDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // promotion_quantity_no
            cursor.getInt(offset + 2), // promotion_quantity_detail_num
            cursor.getLong(offset + 3), // item_num
            cursor.getFloat(offset + 4), // promotion_quantity_detail_std_price
            cursor.getFloat(offset + 5), // promotion_quantity_detail_special_price
            cursor.getFloat(offset + 6), // promotion_quantity_detail_min_amount
            cursor.getFloat(offset + 7) // promotion_quantity_detail_cost
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PolicyQuantityDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPromotion_quantity_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPromotion_quantity_detail_num(cursor.getInt(offset + 2));
        entity.setItem_num(cursor.getLong(offset + 3));
        entity.setPromotion_quantity_detail_std_price(cursor.getFloat(offset + 4));
        entity.setPromotion_quantity_detail_special_price(cursor.getFloat(offset + 5));
        entity.setPromotion_quantity_detail_min_amount(cursor.getFloat(offset + 6));
        entity.setPromotion_quantity_detail_cost(cursor.getFloat(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PolicyQuantityDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PolicyQuantityDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PolicyQuantityDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "policy_promotion_quantity_details" to-many relationship of PolicyQuantity. */
    public List<PolicyQuantityDetail> _queryPolicyQuantity_Policy_promotion_quantity_details(String promotion_quantity_no) {
        synchronized (this) {
            if (policyQuantity_Policy_promotion_quantity_detailsQuery == null) {
                QueryBuilder<PolicyQuantityDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Promotion_quantity_no.eq(null));
                policyQuantity_Policy_promotion_quantity_detailsQuery = queryBuilder.build();
            }
        }
        Query<PolicyQuantityDetail> query = policyQuantity_Policy_promotion_quantity_detailsQuery.forCurrentThread();
        query.setParameter(0, promotion_quantity_no);
        return query.list();
    }

}
