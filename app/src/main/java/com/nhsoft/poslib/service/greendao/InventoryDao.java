package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.Inventory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTORY".
*/
public class InventoryDao extends AbstractDao<Inventory, Long> {

    public static final String TABLENAME = "INVENTORY";

    /**
     * Properties of entity Inventory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Storehouse_num = new Property(1, Long.class, "storehouse_num", false, "STOREHOUSE_NUM");
        public final static Property Item_num = new Property(2, Long.class, "item_num", false, "ITEM_NUM");
        public final static Property Inventory_amount = new Property(3, float.class, "inventory_amount", false, "INVENTORY_AMOUNT");
        public final static Property Inventory_money = new Property(4, float.class, "inventory_money", false, "INVENTORY_MONEY");
        public final static Property Inventory_assist_amount = new Property(5, float.class, "inventory_assist_amount", false, "INVENTORY_ASSIST_AMOUNT");
    }


    public InventoryDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STOREHOUSE_NUM\" INTEGER," + // 1: storehouse_num
                "\"ITEM_NUM\" INTEGER," + // 2: item_num
                "\"INVENTORY_AMOUNT\" REAL NOT NULL ," + // 3: inventory_amount
                "\"INVENTORY_MONEY\" REAL NOT NULL ," + // 4: inventory_money
                "\"INVENTORY_ASSIST_AMOUNT\" REAL NOT NULL );"); // 5: inventory_assist_amount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Inventory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long storehouse_num = entity.getStorehouse_num();
        if (storehouse_num != null) {
            stmt.bindLong(2, storehouse_num);
        }
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(3, item_num);
        }
        stmt.bindDouble(4, entity.getInventory_amount());
        stmt.bindDouble(5, entity.getInventory_money());
        stmt.bindDouble(6, entity.getInventory_assist_amount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Inventory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long storehouse_num = entity.getStorehouse_num();
        if (storehouse_num != null) {
            stmt.bindLong(2, storehouse_num);
        }
 
        Long item_num = entity.getItem_num();
        if (item_num != null) {
            stmt.bindLong(3, item_num);
        }
        stmt.bindDouble(4, entity.getInventory_amount());
        stmt.bindDouble(5, entity.getInventory_money());
        stmt.bindDouble(6, entity.getInventory_assist_amount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Inventory readEntity(Cursor cursor, int offset) {
        Inventory entity = new Inventory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // storehouse_num
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // item_num
            cursor.getFloat(offset + 3), // inventory_amount
            cursor.getFloat(offset + 4), // inventory_money
            cursor.getFloat(offset + 5) // inventory_assist_amount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Inventory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStorehouse_num(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setItem_num(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setInventory_amount(cursor.getFloat(offset + 3));
        entity.setInventory_money(cursor.getFloat(offset + 4));
        entity.setInventory_assist_amount(cursor.getFloat(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Inventory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Inventory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Inventory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
