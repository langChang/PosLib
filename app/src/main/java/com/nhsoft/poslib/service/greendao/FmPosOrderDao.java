package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.FmPosOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FM_POS_ORDER".
*/
public class FmPosOrderDao extends AbstractDao<FmPosOrder, String> {

    public static final String TABLENAME = "FM_POS_ORDER";

    /**
     * Properties of entity FmPosOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderNo = new Property(0, String.class, "orderNo", true, "ORDER_NO");
        public final static Property SystemBookCode = new Property(1, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(2, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property MerchantNum = new Property(3, int.class, "merchantNum", false, "MERCHANT_NUM");
        public final static Property BranchId = new Property(4, long.class, "branchId", false, "BRANCH_ID");
        public final static Property ShiftTableNum = new Property(5, int.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property ShiftTableBizday = new Property(6, String.class, "shiftTableBizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property OrderOperator = new Property(7, String.class, "orderOperator", false, "ORDER_OPERATOR");
        public final static Property OrderOperateTime = new Property(8, String.class, "orderOperateTime", false, "ORDER_OPERATE_TIME");
        public final static Property OrderDiscountMoney = new Property(9, float.class, "orderDiscountMoney", false, "ORDER_DISCOUNT_MONEY");
        public final static Property OrderTotalMoney = new Property(10, float.class, "orderTotalMoney", false, "ORDER_TOTAL_MONEY");
        public final static Property OrderPaymentMoney = new Property(11, float.class, "orderPaymentMoney", false, "ORDER_PAYMENT_MONEY");
        public final static Property OrderRound = new Property(12, float.class, "orderRound", false, "ORDER_ROUND");
        public final static Property OrderChange = new Property(13, float.class, "orderChange", false, "ORDER_CHANGE");
        public final static Property OrderMachine = new Property(14, String.class, "orderMachine", false, "ORDER_MACHINE");
        public final static Property OrderStateCode = new Property(15, int.class, "orderStateCode", false, "ORDER_STATE_CODE");
        public final static Property OrderStateName = new Property(16, String.class, "orderStateName", false, "ORDER_STATE_NAME");
        public final static Property OrderMemo = new Property(17, String.class, "orderMemo", false, "ORDER_MEMO");
        public final static Property OrderRefBillno = new Property(18, String.class, "orderRefBillno", false, "ORDER_REF_BILLNO");
        public final static Property OrderMgrDiscountMoney = new Property(19, float.class, "orderMgrDiscountMoney", false, "ORDER_MGR_DISCOUNT_MONEY");
        public final static Property OrderCouponTotalMoney = new Property(20, float.class, "orderCouponTotalMoney", false, "ORDER_COUPON_TOTAL_MONEY");
        public final static Property OrderCardUserNum = new Property(21, int.class, "orderCardUserNum", false, "ORDER_CARD_USER_NUM");
        public final static Property OrderPromotionDiscountMoney = new Property(22, float.class, "orderPromotionDiscountMoney", false, "ORDER_PROMOTION_DISCOUNT_MONEY");
        public final static Property OrderDetailItemCount = new Property(23, int.class, "orderDetailItemCount", false, "ORDER_DETAIL_ITEM_COUNT");
        public final static Property OrderPayNo = new Property(24, String.class, "orderPayNo", false, "ORDER_PAY_NO");
        public final static Property OrderBalance = new Property(25, float.class, "orderBalance", false, "ORDER_BALANCE");
        public final static Property OrderUploadState = new Property(26, Boolean.class, "orderUploadState", false, "ORDER_UPLOAD_STATE");
    }

    private DaoSession daoSession;


    public FmPosOrderDao(DaoConfig config) {
        super(config);
    }
    
    public FmPosOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FM_POS_ORDER\" (" + //
                "\"ORDER_NO\" TEXT PRIMARY KEY NOT NULL ," + // 0: orderNo
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 2: branchNum
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 3: merchantNum
                "\"BRANCH_ID\" INTEGER NOT NULL ," + // 4: branchId
                "\"SHIFT_TABLE_NUM\" INTEGER NOT NULL ," + // 5: shiftTableNum
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 6: shiftTableBizday
                "\"ORDER_OPERATOR\" TEXT," + // 7: orderOperator
                "\"ORDER_OPERATE_TIME\" TEXT," + // 8: orderOperateTime
                "\"ORDER_DISCOUNT_MONEY\" REAL NOT NULL ," + // 9: orderDiscountMoney
                "\"ORDER_TOTAL_MONEY\" REAL NOT NULL ," + // 10: orderTotalMoney
                "\"ORDER_PAYMENT_MONEY\" REAL NOT NULL ," + // 11: orderPaymentMoney
                "\"ORDER_ROUND\" REAL NOT NULL ," + // 12: orderRound
                "\"ORDER_CHANGE\" REAL NOT NULL ," + // 13: orderChange
                "\"ORDER_MACHINE\" TEXT," + // 14: orderMachine
                "\"ORDER_STATE_CODE\" INTEGER NOT NULL ," + // 15: orderStateCode
                "\"ORDER_STATE_NAME\" TEXT," + // 16: orderStateName
                "\"ORDER_MEMO\" TEXT," + // 17: orderMemo
                "\"ORDER_REF_BILLNO\" TEXT," + // 18: orderRefBillno
                "\"ORDER_MGR_DISCOUNT_MONEY\" REAL NOT NULL ," + // 19: orderMgrDiscountMoney
                "\"ORDER_COUPON_TOTAL_MONEY\" REAL NOT NULL ," + // 20: orderCouponTotalMoney
                "\"ORDER_CARD_USER_NUM\" INTEGER NOT NULL ," + // 21: orderCardUserNum
                "\"ORDER_PROMOTION_DISCOUNT_MONEY\" REAL NOT NULL ," + // 22: orderPromotionDiscountMoney
                "\"ORDER_DETAIL_ITEM_COUNT\" INTEGER NOT NULL ," + // 23: orderDetailItemCount
                "\"ORDER_PAY_NO\" TEXT," + // 24: orderPayNo
                "\"ORDER_BALANCE\" REAL NOT NULL ," + // 25: orderBalance
                "\"ORDER_UPLOAD_STATE\" INTEGER);"); // 26: orderUploadState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FM_POS_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FmPosOrder entity) {
        stmt.clearBindings();
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(1, orderNo);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(2, systemBookCode);
        }
        stmt.bindLong(3, entity.getBranchNum());
        stmt.bindLong(4, entity.getMerchantNum());
        stmt.bindLong(5, entity.getBranchId());
        stmt.bindLong(6, entity.getShiftTableNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(7, shiftTableBizday);
        }
 
        String orderOperator = entity.getOrderOperator();
        if (orderOperator != null) {
            stmt.bindString(8, orderOperator);
        }
 
        String orderOperateTime = entity.getOrderOperateTime();
        if (orderOperateTime != null) {
            stmt.bindString(9, orderOperateTime);
        }
        stmt.bindDouble(10, entity.getOrderDiscountMoney());
        stmt.bindDouble(11, entity.getOrderTotalMoney());
        stmt.bindDouble(12, entity.getOrderPaymentMoney());
        stmt.bindDouble(13, entity.getOrderRound());
        stmt.bindDouble(14, entity.getOrderChange());
 
        String orderMachine = entity.getOrderMachine();
        if (orderMachine != null) {
            stmt.bindString(15, orderMachine);
        }
        stmt.bindLong(16, entity.getOrderStateCode());
 
        String orderStateName = entity.getOrderStateName();
        if (orderStateName != null) {
            stmt.bindString(17, orderStateName);
        }
 
        String orderMemo = entity.getOrderMemo();
        if (orderMemo != null) {
            stmt.bindString(18, orderMemo);
        }
 
        String orderRefBillno = entity.getOrderRefBillno();
        if (orderRefBillno != null) {
            stmt.bindString(19, orderRefBillno);
        }
        stmt.bindDouble(20, entity.getOrderMgrDiscountMoney());
        stmt.bindDouble(21, entity.getOrderCouponTotalMoney());
        stmt.bindLong(22, entity.getOrderCardUserNum());
        stmt.bindDouble(23, entity.getOrderPromotionDiscountMoney());
        stmt.bindLong(24, entity.getOrderDetailItemCount());
 
        String orderPayNo = entity.getOrderPayNo();
        if (orderPayNo != null) {
            stmt.bindString(25, orderPayNo);
        }
        stmt.bindDouble(26, entity.getOrderBalance());
 
        Boolean orderUploadState = entity.getOrderUploadState();
        if (orderUploadState != null) {
            stmt.bindLong(27, orderUploadState ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FmPosOrder entity) {
        stmt.clearBindings();
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(1, orderNo);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(2, systemBookCode);
        }
        stmt.bindLong(3, entity.getBranchNum());
        stmt.bindLong(4, entity.getMerchantNum());
        stmt.bindLong(5, entity.getBranchId());
        stmt.bindLong(6, entity.getShiftTableNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(7, shiftTableBizday);
        }
 
        String orderOperator = entity.getOrderOperator();
        if (orderOperator != null) {
            stmt.bindString(8, orderOperator);
        }
 
        String orderOperateTime = entity.getOrderOperateTime();
        if (orderOperateTime != null) {
            stmt.bindString(9, orderOperateTime);
        }
        stmt.bindDouble(10, entity.getOrderDiscountMoney());
        stmt.bindDouble(11, entity.getOrderTotalMoney());
        stmt.bindDouble(12, entity.getOrderPaymentMoney());
        stmt.bindDouble(13, entity.getOrderRound());
        stmt.bindDouble(14, entity.getOrderChange());
 
        String orderMachine = entity.getOrderMachine();
        if (orderMachine != null) {
            stmt.bindString(15, orderMachine);
        }
        stmt.bindLong(16, entity.getOrderStateCode());
 
        String orderStateName = entity.getOrderStateName();
        if (orderStateName != null) {
            stmt.bindString(17, orderStateName);
        }
 
        String orderMemo = entity.getOrderMemo();
        if (orderMemo != null) {
            stmt.bindString(18, orderMemo);
        }
 
        String orderRefBillno = entity.getOrderRefBillno();
        if (orderRefBillno != null) {
            stmt.bindString(19, orderRefBillno);
        }
        stmt.bindDouble(20, entity.getOrderMgrDiscountMoney());
        stmt.bindDouble(21, entity.getOrderCouponTotalMoney());
        stmt.bindLong(22, entity.getOrderCardUserNum());
        stmt.bindDouble(23, entity.getOrderPromotionDiscountMoney());
        stmt.bindLong(24, entity.getOrderDetailItemCount());
 
        String orderPayNo = entity.getOrderPayNo();
        if (orderPayNo != null) {
            stmt.bindString(25, orderPayNo);
        }
        stmt.bindDouble(26, entity.getOrderBalance());
 
        Boolean orderUploadState = entity.getOrderUploadState();
        if (orderUploadState != null) {
            stmt.bindLong(27, orderUploadState ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(FmPosOrder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FmPosOrder readEntity(Cursor cursor, int offset) {
        FmPosOrder entity = new FmPosOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // systemBookCode
            cursor.getInt(offset + 2), // branchNum
            cursor.getInt(offset + 3), // merchantNum
            cursor.getLong(offset + 4), // branchId
            cursor.getInt(offset + 5), // shiftTableNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shiftTableBizday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // orderOperator
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // orderOperateTime
            cursor.getFloat(offset + 9), // orderDiscountMoney
            cursor.getFloat(offset + 10), // orderTotalMoney
            cursor.getFloat(offset + 11), // orderPaymentMoney
            cursor.getFloat(offset + 12), // orderRound
            cursor.getFloat(offset + 13), // orderChange
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // orderMachine
            cursor.getInt(offset + 15), // orderStateCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // orderStateName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // orderMemo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // orderRefBillno
            cursor.getFloat(offset + 19), // orderMgrDiscountMoney
            cursor.getFloat(offset + 20), // orderCouponTotalMoney
            cursor.getInt(offset + 21), // orderCardUserNum
            cursor.getFloat(offset + 22), // orderPromotionDiscountMoney
            cursor.getInt(offset + 23), // orderDetailItemCount
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // orderPayNo
            cursor.getFloat(offset + 25), // orderBalance
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0 // orderUploadState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FmPosOrder entity, int offset) {
        entity.setOrderNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSystemBookCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranchNum(cursor.getInt(offset + 2));
        entity.setMerchantNum(cursor.getInt(offset + 3));
        entity.setBranchId(cursor.getLong(offset + 4));
        entity.setShiftTableNum(cursor.getInt(offset + 5));
        entity.setShiftTableBizday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderOperator(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderOperateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrderDiscountMoney(cursor.getFloat(offset + 9));
        entity.setOrderTotalMoney(cursor.getFloat(offset + 10));
        entity.setOrderPaymentMoney(cursor.getFloat(offset + 11));
        entity.setOrderRound(cursor.getFloat(offset + 12));
        entity.setOrderChange(cursor.getFloat(offset + 13));
        entity.setOrderMachine(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrderStateCode(cursor.getInt(offset + 15));
        entity.setOrderStateName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOrderMemo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrderRefBillno(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOrderMgrDiscountMoney(cursor.getFloat(offset + 19));
        entity.setOrderCouponTotalMoney(cursor.getFloat(offset + 20));
        entity.setOrderCardUserNum(cursor.getInt(offset + 21));
        entity.setOrderPromotionDiscountMoney(cursor.getFloat(offset + 22));
        entity.setOrderDetailItemCount(cursor.getInt(offset + 23));
        entity.setOrderPayNo(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOrderBalance(cursor.getFloat(offset + 25));
        entity.setOrderUploadState(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(FmPosOrder entity, long rowId) {
        return entity.getOrderNo();
    }
    
    @Override
    public String getKey(FmPosOrder entity) {
        if(entity != null) {
            return entity.getOrderNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FmPosOrder entity) {
        return entity.getOrderNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
