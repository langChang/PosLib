package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.Login;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN".
*/
public class LoginDao extends AbstractDao<Login, Long> {

    public static final String TABLENAME = "LOGIN";

    /**
     * Properties of entity Login.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property System_book_code = new Property(1, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property System_book_name = new Property(2, String.class, "system_book_name", false, "SYSTEM_BOOK_NAME");
        public final static Property Branch_num = new Property(3, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Branch_name = new Property(4, String.class, "branch_name", false, "BRANCH_NAME");
        public final static Property User_psw = new Property(5, String.class, "user_psw", false, "USER_PSW");
        public final static Property Branch_product = new Property(6, String.class, "branch_product", false, "BRANCH_PRODUCT");
        public final static Property Merchant_num = new Property(7, Integer.class, "merchant_num", false, "MERCHANT_NUM");
        public final static Property Branch_module = new Property(8, String.class, "branch_module", false, "BRANCH_MODULE");
        public final static Property Branch_id = new Property(9, String.class, "branch_id", false, "BRANCH_ID");
    }


    public LoginDao(DaoConfig config) {
        super(config);
    }
    
    public LoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: system_book_code
                "\"SYSTEM_BOOK_NAME\" TEXT," + // 2: system_book_name
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 3: branch_num
                "\"BRANCH_NAME\" TEXT," + // 4: branch_name
                "\"USER_PSW\" TEXT," + // 5: user_psw
                "\"BRANCH_PRODUCT\" TEXT," + // 6: branch_product
                "\"MERCHANT_NUM\" INTEGER," + // 7: merchant_num
                "\"BRANCH_MODULE\" TEXT," + // 8: branch_module
                "\"BRANCH_ID\" TEXT);"); // 9: branch_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Login entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
 
        String system_book_name = entity.getSystem_book_name();
        if (system_book_name != null) {
            stmt.bindString(3, system_book_name);
        }
        stmt.bindLong(4, entity.getBranch_num());
 
        String branch_name = entity.getBranch_name();
        if (branch_name != null) {
            stmt.bindString(5, branch_name);
        }
 
        String user_psw = entity.getUser_psw();
        if (user_psw != null) {
            stmt.bindString(6, user_psw);
        }
 
        String branch_product = entity.getBranch_product();
        if (branch_product != null) {
            stmt.bindString(7, branch_product);
        }
 
        Integer merchant_num = entity.getMerchant_num();
        if (merchant_num != null) {
            stmt.bindLong(8, merchant_num);
        }
 
        String branch_module = entity.getBranch_module();
        if (branch_module != null) {
            stmt.bindString(9, branch_module);
        }
 
        String branch_id = entity.getBranch_id();
        if (branch_id != null) {
            stmt.bindString(10, branch_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Login entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(2, system_book_code);
        }
 
        String system_book_name = entity.getSystem_book_name();
        if (system_book_name != null) {
            stmt.bindString(3, system_book_name);
        }
        stmt.bindLong(4, entity.getBranch_num());
 
        String branch_name = entity.getBranch_name();
        if (branch_name != null) {
            stmt.bindString(5, branch_name);
        }
 
        String user_psw = entity.getUser_psw();
        if (user_psw != null) {
            stmt.bindString(6, user_psw);
        }
 
        String branch_product = entity.getBranch_product();
        if (branch_product != null) {
            stmt.bindString(7, branch_product);
        }
 
        Integer merchant_num = entity.getMerchant_num();
        if (merchant_num != null) {
            stmt.bindLong(8, merchant_num);
        }
 
        String branch_module = entity.getBranch_module();
        if (branch_module != null) {
            stmt.bindString(9, branch_module);
        }
 
        String branch_id = entity.getBranch_id();
        if (branch_id != null) {
            stmt.bindString(10, branch_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Login readEntity(Cursor cursor, int offset) {
        Login entity = new Login( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // system_book_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // system_book_name
            cursor.getInt(offset + 3), // branch_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // branch_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_psw
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // branch_product
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // merchant_num
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // branch_module
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // branch_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Login entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystem_book_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSystem_book_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBranch_num(cursor.getInt(offset + 3));
        entity.setBranch_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_psw(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBranch_product(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMerchant_num(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBranch_module(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBranch_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Login entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Login entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Login entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
