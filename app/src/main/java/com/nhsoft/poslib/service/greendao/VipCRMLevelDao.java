package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.VipCRMLevel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIP_CRMLEVEL".
*/
public class VipCRMLevelDao extends AbstractDao<VipCRMLevel, Long> {

    public static final String TABLENAME = "VIP_CRMLEVEL";

    /**
     * Properties of entity VipCRMLevel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdAuto = new Property(0, Long.class, "idAuto", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Rank = new Property(2, int.class, "rank", false, "RANK");
    }

    private DaoSession daoSession;


    public VipCRMLevelDao(DaoConfig config) {
        super(config);
    }
    
    public VipCRMLevelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIP_CRMLEVEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idAuto
                "\"NAME\" TEXT," + // 1: name
                "\"RANK\" INTEGER NOT NULL );"); // 2: rank
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIP_CRMLEVEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VipCRMLevel entity) {
        stmt.clearBindings();
 
        Long idAuto = entity.getIdAuto();
        if (idAuto != null) {
            stmt.bindLong(1, idAuto);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getRank());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VipCRMLevel entity) {
        stmt.clearBindings();
 
        Long idAuto = entity.getIdAuto();
        if (idAuto != null) {
            stmt.bindLong(1, idAuto);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getRank());
    }

    @Override
    protected final void attachEntity(VipCRMLevel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VipCRMLevel readEntity(Cursor cursor, int offset) {
        VipCRMLevel entity = new VipCRMLevel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idAuto
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2) // rank
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VipCRMLevel entity, int offset) {
        entity.setIdAuto(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRank(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VipCRMLevel entity, long rowId) {
        entity.setIdAuto(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VipCRMLevel entity) {
        if(entity != null) {
            return entity.getIdAuto();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VipCRMLevel entity) {
        return entity.getIdAuto() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
