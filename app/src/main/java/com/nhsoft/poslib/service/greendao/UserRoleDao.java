package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.UserRole;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ROLE".
*/
public class UserRoleDao extends AbstractDao<UserRole, Long> {

    public static final String TABLENAME = "USER_ROLE";

    /**
     * Properties of entity UserRole.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property System_role_num = new Property(1, Long.class, "system_role_num", false, "SYSTEM_ROLE_NUM");
        public final static Property App_user_num = new Property(2, Long.class, "app_user_num", false, "APP_USER_NUM");
        public final static Property System_book_code = new Property(3, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
    }

    private Query<UserRole> appUser_User_role_listQuery;

    public UserRoleDao(DaoConfig config) {
        super(config);
    }
    
    public UserRoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ROLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYSTEM_ROLE_NUM\" INTEGER," + // 1: system_role_num
                "\"APP_USER_NUM\" INTEGER," + // 2: app_user_num
                "\"SYSTEM_BOOK_CODE\" TEXT);"); // 3: system_book_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ROLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserRole entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long system_role_num = entity.getSystem_role_num();
        if (system_role_num != null) {
            stmt.bindLong(2, system_role_num);
        }
 
        Long app_user_num = entity.getApp_user_num();
        if (app_user_num != null) {
            stmt.bindLong(3, app_user_num);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(4, system_book_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserRole entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long system_role_num = entity.getSystem_role_num();
        if (system_role_num != null) {
            stmt.bindLong(2, system_role_num);
        }
 
        Long app_user_num = entity.getApp_user_num();
        if (app_user_num != null) {
            stmt.bindLong(3, app_user_num);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(4, system_book_code);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserRole readEntity(Cursor cursor, int offset) {
        UserRole entity = new UserRole( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // system_role_num
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // app_user_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // system_book_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserRole entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystem_role_num(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setApp_user_num(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSystem_book_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserRole entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserRole entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserRole entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "user_role_list" to-many relationship of AppUser. */
    public List<UserRole> _queryAppUser_User_role_list(Long app_user_num) {
        synchronized (this) {
            if (appUser_User_role_listQuery == null) {
                QueryBuilder<UserRole> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.App_user_num.eq(null));
                appUser_User_role_listQuery = queryBuilder.build();
            }
        }
        Query<UserRole> query = appUser_User_role_listQuery.forCurrentThread();
        query.setParameter(0, app_user_num);
        return query.list();
    }

}
