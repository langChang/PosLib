package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.AccountBank;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_BANK".
*/
public class AccountBankDao extends AbstractDao<AccountBank, Long> {

    public static final String TABLENAME = "ACCOUNT_BANK";

    /**
     * Properties of entity AccountBank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Account_bank_num = new Property(0, Long.class, "account_bank_num", true, "ACCOUNT_BANK_NUM");
        public final static Property Account_bank_name = new Property(1, String.class, "account_bank_name", false, "ACCOUNT_BANK_NAME");
        public final static Property Account_bank_balance = new Property(2, double.class, "account_bank_balance", false, "ACCOUNT_BANK_BALANCE");
        public final static Property Account_bank_cash_flag = new Property(3, boolean.class, "account_bank_cash_flag", false, "ACCOUNT_BANK_CASH_FLAG");
        public final static Property Account_bank_no = new Property(4, String.class, "account_bank_no", false, "ACCOUNT_BANK_NO");
        public final static Property Account_bank_branch_num = new Property(5, int.class, "account_bank_branch_num", false, "ACCOUNT_BANK_BRANCH_NUM");
        public final static Property Account_bank_enabled = new Property(6, boolean.class, "account_bank_enabled", false, "ACCOUNT_BANK_ENABLED");
        public final static Property Account_bank_bank = new Property(7, String.class, "account_bank_bank", false, "ACCOUNT_BANK_BANK");
        public final static Property Account_bank_bank_user = new Property(8, String.class, "account_bank_bank_user", false, "ACCOUNT_BANK_BANK_USER");
        public final static Property Account_bank_opened = new Property(9, boolean.class, "account_bank_opened", false, "ACCOUNT_BANK_OPENED");
    }


    public AccountBankDao(DaoConfig config) {
        super(config);
    }
    
    public AccountBankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_BANK\" (" + //
                "\"ACCOUNT_BANK_NUM\" INTEGER PRIMARY KEY ," + // 0: account_bank_num
                "\"ACCOUNT_BANK_NAME\" TEXT," + // 1: account_bank_name
                "\"ACCOUNT_BANK_BALANCE\" REAL NOT NULL ," + // 2: account_bank_balance
                "\"ACCOUNT_BANK_CASH_FLAG\" INTEGER NOT NULL ," + // 3: account_bank_cash_flag
                "\"ACCOUNT_BANK_NO\" TEXT," + // 4: account_bank_no
                "\"ACCOUNT_BANK_BRANCH_NUM\" INTEGER NOT NULL ," + // 5: account_bank_branch_num
                "\"ACCOUNT_BANK_ENABLED\" INTEGER NOT NULL ," + // 6: account_bank_enabled
                "\"ACCOUNT_BANK_BANK\" TEXT," + // 7: account_bank_bank
                "\"ACCOUNT_BANK_BANK_USER\" TEXT," + // 8: account_bank_bank_user
                "\"ACCOUNT_BANK_OPENED\" INTEGER NOT NULL );"); // 9: account_bank_opened
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_BANK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountBank entity) {
        stmt.clearBindings();
 
        Long account_bank_num = entity.getAccount_bank_num();
        if (account_bank_num != null) {
            stmt.bindLong(1, account_bank_num);
        }
 
        String account_bank_name = entity.getAccount_bank_name();
        if (account_bank_name != null) {
            stmt.bindString(2, account_bank_name);
        }
        stmt.bindDouble(3, entity.getAccount_bank_balance());
        stmt.bindLong(4, entity.getAccount_bank_cash_flag() ? 1L: 0L);
 
        String account_bank_no = entity.getAccount_bank_no();
        if (account_bank_no != null) {
            stmt.bindString(5, account_bank_no);
        }
        stmt.bindLong(6, entity.getAccount_bank_branch_num());
        stmt.bindLong(7, entity.getAccount_bank_enabled() ? 1L: 0L);
 
        String account_bank_bank = entity.getAccount_bank_bank();
        if (account_bank_bank != null) {
            stmt.bindString(8, account_bank_bank);
        }
 
        String account_bank_bank_user = entity.getAccount_bank_bank_user();
        if (account_bank_bank_user != null) {
            stmt.bindString(9, account_bank_bank_user);
        }
        stmt.bindLong(10, entity.getAccount_bank_opened() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountBank entity) {
        stmt.clearBindings();
 
        Long account_bank_num = entity.getAccount_bank_num();
        if (account_bank_num != null) {
            stmt.bindLong(1, account_bank_num);
        }
 
        String account_bank_name = entity.getAccount_bank_name();
        if (account_bank_name != null) {
            stmt.bindString(2, account_bank_name);
        }
        stmt.bindDouble(3, entity.getAccount_bank_balance());
        stmt.bindLong(4, entity.getAccount_bank_cash_flag() ? 1L: 0L);
 
        String account_bank_no = entity.getAccount_bank_no();
        if (account_bank_no != null) {
            stmt.bindString(5, account_bank_no);
        }
        stmt.bindLong(6, entity.getAccount_bank_branch_num());
        stmt.bindLong(7, entity.getAccount_bank_enabled() ? 1L: 0L);
 
        String account_bank_bank = entity.getAccount_bank_bank();
        if (account_bank_bank != null) {
            stmt.bindString(8, account_bank_bank);
        }
 
        String account_bank_bank_user = entity.getAccount_bank_bank_user();
        if (account_bank_bank_user != null) {
            stmt.bindString(9, account_bank_bank_user);
        }
        stmt.bindLong(10, entity.getAccount_bank_opened() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountBank readEntity(Cursor cursor, int offset) {
        AccountBank entity = new AccountBank( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // account_bank_num
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account_bank_name
            cursor.getDouble(offset + 2), // account_bank_balance
            cursor.getShort(offset + 3) != 0, // account_bank_cash_flag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // account_bank_no
            cursor.getInt(offset + 5), // account_bank_branch_num
            cursor.getShort(offset + 6) != 0, // account_bank_enabled
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // account_bank_bank
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // account_bank_bank_user
            cursor.getShort(offset + 9) != 0 // account_bank_opened
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountBank entity, int offset) {
        entity.setAccount_bank_num(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount_bank_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccount_bank_balance(cursor.getDouble(offset + 2));
        entity.setAccount_bank_cash_flag(cursor.getShort(offset + 3) != 0);
        entity.setAccount_bank_no(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccount_bank_branch_num(cursor.getInt(offset + 5));
        entity.setAccount_bank_enabled(cursor.getShort(offset + 6) != 0);
        entity.setAccount_bank_bank(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAccount_bank_bank_user(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAccount_bank_opened(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountBank entity, long rowId) {
        entity.setAccount_bank_num(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountBank entity) {
        if(entity != null) {
            return entity.getAccount_bank_num();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountBank entity) {
        return entity.getAccount_bank_num() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
