package com.nhsoft.poslib.service.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.PrivilegeResourceNew;

import com.nhsoft.poslib.entity.RolePrivilegeNew;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROLE_PRIVILEGE_NEW".
*/
public class RolePrivilegeNewDao extends AbstractDao<RolePrivilegeNew, Long> {

    public static final String TABLENAME = "ROLE_PRIVILEGE_NEW";

    /**
     * Properties of entity RolePrivilegeNew.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property System_role_num = new Property(1, Long.class, "system_role_num", false, "SYSTEM_ROLE_NUM");
        public final static Property Privilege_resource_key = new Property(2, Long.class, "privilege_resource_key", false, "PRIVILEGE_RESOURCE_KEY");
        public final static Property System_book_code = new Property(3, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
        public final static Property Role_query = new Property(4, boolean.class, "role_query", false, "ROLE_QUERY");
        public final static Property Role_edit = new Property(5, boolean.class, "role_edit", false, "ROLE_EDIT");
        public final static Property Role_delete = new Property(6, boolean.class, "role_delete", false, "ROLE_DELETE");
        public final static Property Role_audit = new Property(7, boolean.class, "role_audit", false, "ROLE_AUDIT");
        public final static Property Role_invalid = new Property(8, boolean.class, "role_invalid", false, "ROLE_INVALID");
        public final static Property Role_change_price = new Property(9, boolean.class, "role_change_price", false, "ROLE_CHANGE_PRICE");
        public final static Property Role_print = new Property(10, boolean.class, "role_print", false, "ROLE_PRINT");
        public final static Property Role_export = new Property(11, boolean.class, "role_export", false, "ROLE_EXPORT");
        public final static Property Role_re_audit = new Property(12, boolean.class, "role_re_audit", false, "ROLE_RE_AUDIT");
    }

    private DaoSession daoSession;

    private Query<RolePrivilegeNew> systemRole_Role_privilege_newsQuery;

    public RolePrivilegeNewDao(DaoConfig config) {
        super(config);
    }
    
    public RolePrivilegeNewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROLE_PRIVILEGE_NEW\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYSTEM_ROLE_NUM\" INTEGER," + // 1: system_role_num
                "\"PRIVILEGE_RESOURCE_KEY\" INTEGER," + // 2: privilege_resource_key
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 3: system_book_code
                "\"ROLE_QUERY\" INTEGER NOT NULL ," + // 4: role_query
                "\"ROLE_EDIT\" INTEGER NOT NULL ," + // 5: role_edit
                "\"ROLE_DELETE\" INTEGER NOT NULL ," + // 6: role_delete
                "\"ROLE_AUDIT\" INTEGER NOT NULL ," + // 7: role_audit
                "\"ROLE_INVALID\" INTEGER NOT NULL ," + // 8: role_invalid
                "\"ROLE_CHANGE_PRICE\" INTEGER NOT NULL ," + // 9: role_change_price
                "\"ROLE_PRINT\" INTEGER NOT NULL ," + // 10: role_print
                "\"ROLE_EXPORT\" INTEGER NOT NULL ," + // 11: role_export
                "\"ROLE_RE_AUDIT\" INTEGER NOT NULL );"); // 12: role_re_audit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROLE_PRIVILEGE_NEW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RolePrivilegeNew entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long system_role_num = entity.getSystem_role_num();
        if (system_role_num != null) {
            stmt.bindLong(2, system_role_num);
        }
 
        Long privilege_resource_key = entity.getPrivilege_resource_key();
        if (privilege_resource_key != null) {
            stmt.bindLong(3, privilege_resource_key);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(4, system_book_code);
        }
        stmt.bindLong(5, entity.getRole_query() ? 1L: 0L);
        stmt.bindLong(6, entity.getRole_edit() ? 1L: 0L);
        stmt.bindLong(7, entity.getRole_delete() ? 1L: 0L);
        stmt.bindLong(8, entity.getRole_audit() ? 1L: 0L);
        stmt.bindLong(9, entity.getRole_invalid() ? 1L: 0L);
        stmt.bindLong(10, entity.getRole_change_price() ? 1L: 0L);
        stmt.bindLong(11, entity.getRole_print() ? 1L: 0L);
        stmt.bindLong(12, entity.getRole_export() ? 1L: 0L);
        stmt.bindLong(13, entity.getRole_re_audit() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RolePrivilegeNew entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long system_role_num = entity.getSystem_role_num();
        if (system_role_num != null) {
            stmt.bindLong(2, system_role_num);
        }
 
        Long privilege_resource_key = entity.getPrivilege_resource_key();
        if (privilege_resource_key != null) {
            stmt.bindLong(3, privilege_resource_key);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(4, system_book_code);
        }
        stmt.bindLong(5, entity.getRole_query() ? 1L: 0L);
        stmt.bindLong(6, entity.getRole_edit() ? 1L: 0L);
        stmt.bindLong(7, entity.getRole_delete() ? 1L: 0L);
        stmt.bindLong(8, entity.getRole_audit() ? 1L: 0L);
        stmt.bindLong(9, entity.getRole_invalid() ? 1L: 0L);
        stmt.bindLong(10, entity.getRole_change_price() ? 1L: 0L);
        stmt.bindLong(11, entity.getRole_print() ? 1L: 0L);
        stmt.bindLong(12, entity.getRole_export() ? 1L: 0L);
        stmt.bindLong(13, entity.getRole_re_audit() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(RolePrivilegeNew entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RolePrivilegeNew readEntity(Cursor cursor, int offset) {
        RolePrivilegeNew entity = new RolePrivilegeNew( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // system_role_num
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // privilege_resource_key
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // system_book_code
            cursor.getShort(offset + 4) != 0, // role_query
            cursor.getShort(offset + 5) != 0, // role_edit
            cursor.getShort(offset + 6) != 0, // role_delete
            cursor.getShort(offset + 7) != 0, // role_audit
            cursor.getShort(offset + 8) != 0, // role_invalid
            cursor.getShort(offset + 9) != 0, // role_change_price
            cursor.getShort(offset + 10) != 0, // role_print
            cursor.getShort(offset + 11) != 0, // role_export
            cursor.getShort(offset + 12) != 0 // role_re_audit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RolePrivilegeNew entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystem_role_num(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPrivilege_resource_key(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSystem_book_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRole_query(cursor.getShort(offset + 4) != 0);
        entity.setRole_edit(cursor.getShort(offset + 5) != 0);
        entity.setRole_delete(cursor.getShort(offset + 6) != 0);
        entity.setRole_audit(cursor.getShort(offset + 7) != 0);
        entity.setRole_invalid(cursor.getShort(offset + 8) != 0);
        entity.setRole_change_price(cursor.getShort(offset + 9) != 0);
        entity.setRole_print(cursor.getShort(offset + 10) != 0);
        entity.setRole_export(cursor.getShort(offset + 11) != 0);
        entity.setRole_re_audit(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RolePrivilegeNew entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RolePrivilegeNew entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RolePrivilegeNew entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "role_privilege_news" to-many relationship of SystemRole. */
    public List<RolePrivilegeNew> _querySystemRole_Role_privilege_news(Long system_role_num) {
        synchronized (this) {
            if (systemRole_Role_privilege_newsQuery == null) {
                QueryBuilder<RolePrivilegeNew> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.System_role_num.eq(null));
                systemRole_Role_privilege_newsQuery = queryBuilder.build();
            }
        }
        Query<RolePrivilegeNew> query = systemRole_Role_privilege_newsQuery.forCurrentThread();
        query.setParameter(0, system_role_num);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPrivilegeResourceNewDao().getAllColumns());
            builder.append(" FROM ROLE_PRIVILEGE_NEW T");
            builder.append(" LEFT JOIN PRIVILEGE_RESOURCE_NEW T0 ON T.\"PRIVILEGE_RESOURCE_KEY\"=T0.\"PRIVILEGE_RESOURCE_KEY\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RolePrivilegeNew loadCurrentDeep(Cursor cursor, boolean lock) {
        RolePrivilegeNew entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PrivilegeResourceNew privilege_resource_new = loadCurrentOther(daoSession.getPrivilegeResourceNewDao(), cursor, offset);
        entity.setPrivilege_resource_new(privilege_resource_new);

        return entity;    
    }

    public RolePrivilegeNew loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RolePrivilegeNew> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RolePrivilegeNew> list = new ArrayList<RolePrivilegeNew>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RolePrivilegeNew> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RolePrivilegeNew> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
