package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.ManagementTemplateDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MANAGEMENT_TEMPLATE_DETAIL".
*/
public class ManagementTemplateDetailDao extends AbstractDao<ManagementTemplateDetail, Long> {

    public static final String TABLENAME = "MANAGEMENT_TEMPLATE_DETAIL";

    /**
     * Properties of entity ManagementTemplateDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Item_num = new Property(1, int.class, "item_num", false, "ITEM_NUM");
        public final static Property Management_template_num = new Property(2, Long.class, "management_template_num", false, "MANAGEMENT_TEMPLATE_NUM");
    }

    private Query<ManagementTemplateDetail> managementTemplate_Management_template_detailsQuery;

    public ManagementTemplateDetailDao(DaoConfig config) {
        super(config);
    }
    
    public ManagementTemplateDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MANAGEMENT_TEMPLATE_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 1: item_num
                "\"MANAGEMENT_TEMPLATE_NUM\" INTEGER);"); // 2: management_template_num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MANAGEMENT_TEMPLATE_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ManagementTemplateDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getItem_num());
 
        Long management_template_num = entity.getManagement_template_num();
        if (management_template_num != null) {
            stmt.bindLong(3, management_template_num);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ManagementTemplateDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getItem_num());
 
        Long management_template_num = entity.getManagement_template_num();
        if (management_template_num != null) {
            stmt.bindLong(3, management_template_num);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ManagementTemplateDetail readEntity(Cursor cursor, int offset) {
        ManagementTemplateDetail entity = new ManagementTemplateDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // item_num
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // management_template_num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ManagementTemplateDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_num(cursor.getInt(offset + 1));
        entity.setManagement_template_num(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ManagementTemplateDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ManagementTemplateDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ManagementTemplateDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "management_template_details" to-many relationship of ManagementTemplate. */
    public List<ManagementTemplateDetail> _queryManagementTemplate_Management_template_details(Long management_template_num) {
        synchronized (this) {
            if (managementTemplate_Management_template_detailsQuery == null) {
                QueryBuilder<ManagementTemplateDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Management_template_num.eq(null));
                managementTemplate_Management_template_detailsQuery = queryBuilder.build();
            }
        }
        Query<ManagementTemplateDetail> query = managementTemplate_Management_template_detailsQuery.forCurrentThread();
        query.setParameter(0, management_template_num);
        return query.list();
    }

}
