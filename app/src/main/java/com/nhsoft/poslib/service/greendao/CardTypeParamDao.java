package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.CardTypeParam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_TYPE_PARAM".
*/
public class CardTypeParamDao extends AbstractDao<CardTypeParam, Long> {

    public static final String TABLENAME = "CARD_TYPE_PARAM";

    /**
     * Properties of entity CardTypeParam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Birth_discount = new Property(1, float.class, "birth_discount", false, "BIRTH_DISCOUNT");
        public final static Property Card_min_balance = new Property(2, float.class, "card_min_balance", false, "CARD_MIN_BALANCE");
        public final static Property Card_pay_discount = new Property(3, float.class, "card_pay_discount", false, "CARD_PAY_DISCOUNT");
        public final static Property Card_pay_discount_level = new Property(4, float.class, "card_pay_discount_level", false, "CARD_PAY_DISCOUNT_LEVEL");
        public final static Property Card_user_type_image_id = new Property(5, String.class, "card_user_type_image_id", false, "CARD_USER_TYPE_IMAGE_ID");
        public final static Property Card_user_type_image_path = new Property(6, String.class, "card_user_type_image_path", false, "CARD_USER_TYPE_IMAGE_PATH");
        public final static Property Deposit_basic = new Property(7, float.class, "deposit_basic", false, "DEPOSIT_BASIC");
        public final static Property Disable_pay_discount = new Property(8, boolean.class, "disable_pay_discount", false, "DISABLE_PAY_DISCOUNT");
        public final static Property Discount_without_coupon = new Property(9, boolean.class, "discount_without_coupon", false, "DISCOUNT_WITHOUT_COUPON");
        public final static Property Settlement_discount = new Property(10, float.class, "settlement_discount", false, "SETTLEMENT_DISCOUNT");
        public final static Property Type_code = new Property(11, String.class, "type_code", false, "TYPE_CODE");
        public final static Property Type_consume_rate = new Property(12, float.class, "type_consume_rate", false, "TYPE_CONSUME_RATE");
        public final static Property Type_default_days = new Property(13, float.class, "type_default_days", false, "TYPE_DEFAULT_DAYS");
        public final static Property Type_default_permanent = new Property(14, boolean.class, "type_default_permanent", false, "TYPE_DEFAULT_PERMANENT");
        public final static Property Type_deposit_rate = new Property(15, float.class, "type_deposit_rate", false, "TYPE_DEPOSIT_RATE");
        public final static Property Type_discount = new Property(16, float.class, "type_discount", false, "TYPE_DISCOUNT");
        public final static Property Type_name = new Property(17, String.class, "type_name", false, "TYPE_NAME");
        public final static Property Type_price_level = new Property(18, int.class, "type_price_level", false, "TYPE_PRICE_LEVEL");
        public final static Property Type_printed_color = new Property(19, String.class, "type_printed_color", false, "TYPE_PRINTED_COLOR");
        public final static Property Type_support_deposit = new Property(20, boolean.class, "type_support_deposit", false, "TYPE_SUPPORT_DEPOSIT");
        public final static Property Type_support_online_loss = new Property(21, boolean.class, "type_support_online_loss", false, "TYPE_SUPPORT_ONLINE_LOSS");
        public final static Property Type_support_point = new Property(22, boolean.class, "type_support_point", false, "TYPE_SUPPORT_POINT");
        public final static Property Type_valid = new Property(23, boolean.class, "type_valid", false, "TYPE_VALID");
        public final static Property Use_in_enroll_shop = new Property(24, boolean.class, "use_in_enroll_shop", false, "USE_IN_ENROLL_SHOP");
        public final static Property Rule_id = new Property(25, Long.class, "rule_id", false, "RULE_ID");
    }


    public CardTypeParamDao(DaoConfig config) {
        super(config);
    }
    
    public CardTypeParamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_TYPE_PARAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BIRTH_DISCOUNT\" REAL NOT NULL ," + // 1: birth_discount
                "\"CARD_MIN_BALANCE\" REAL NOT NULL ," + // 2: card_min_balance
                "\"CARD_PAY_DISCOUNT\" REAL NOT NULL ," + // 3: card_pay_discount
                "\"CARD_PAY_DISCOUNT_LEVEL\" REAL NOT NULL ," + // 4: card_pay_discount_level
                "\"CARD_USER_TYPE_IMAGE_ID\" TEXT," + // 5: card_user_type_image_id
                "\"CARD_USER_TYPE_IMAGE_PATH\" TEXT," + // 6: card_user_type_image_path
                "\"DEPOSIT_BASIC\" REAL NOT NULL ," + // 7: deposit_basic
                "\"DISABLE_PAY_DISCOUNT\" INTEGER NOT NULL ," + // 8: disable_pay_discount
                "\"DISCOUNT_WITHOUT_COUPON\" INTEGER NOT NULL ," + // 9: discount_without_coupon
                "\"SETTLEMENT_DISCOUNT\" REAL NOT NULL ," + // 10: settlement_discount
                "\"TYPE_CODE\" TEXT," + // 11: type_code
                "\"TYPE_CONSUME_RATE\" REAL NOT NULL ," + // 12: type_consume_rate
                "\"TYPE_DEFAULT_DAYS\" REAL NOT NULL ," + // 13: type_default_days
                "\"TYPE_DEFAULT_PERMANENT\" INTEGER NOT NULL ," + // 14: type_default_permanent
                "\"TYPE_DEPOSIT_RATE\" REAL NOT NULL ," + // 15: type_deposit_rate
                "\"TYPE_DISCOUNT\" REAL NOT NULL ," + // 16: type_discount
                "\"TYPE_NAME\" TEXT," + // 17: type_name
                "\"TYPE_PRICE_LEVEL\" INTEGER NOT NULL ," + // 18: type_price_level
                "\"TYPE_PRINTED_COLOR\" TEXT," + // 19: type_printed_color
                "\"TYPE_SUPPORT_DEPOSIT\" INTEGER NOT NULL ," + // 20: type_support_deposit
                "\"TYPE_SUPPORT_ONLINE_LOSS\" INTEGER NOT NULL ," + // 21: type_support_online_loss
                "\"TYPE_SUPPORT_POINT\" INTEGER NOT NULL ," + // 22: type_support_point
                "\"TYPE_VALID\" INTEGER NOT NULL ," + // 23: type_valid
                "\"USE_IN_ENROLL_SHOP\" INTEGER NOT NULL ," + // 24: use_in_enroll_shop
                "\"RULE_ID\" INTEGER);"); // 25: rule_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_TYPE_PARAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardTypeParam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getBirth_discount());
        stmt.bindDouble(3, entity.getCard_min_balance());
        stmt.bindDouble(4, entity.getCard_pay_discount());
        stmt.bindDouble(5, entity.getCard_pay_discount_level());
 
        String card_user_type_image_id = entity.getCard_user_type_image_id();
        if (card_user_type_image_id != null) {
            stmt.bindString(6, card_user_type_image_id);
        }
 
        String card_user_type_image_path = entity.getCard_user_type_image_path();
        if (card_user_type_image_path != null) {
            stmt.bindString(7, card_user_type_image_path);
        }
        stmt.bindDouble(8, entity.getDeposit_basic());
        stmt.bindLong(9, entity.getDisable_pay_discount() ? 1L: 0L);
        stmt.bindLong(10, entity.getDiscount_without_coupon() ? 1L: 0L);
        stmt.bindDouble(11, entity.getSettlement_discount());
 
        String type_code = entity.getType_code();
        if (type_code != null) {
            stmt.bindString(12, type_code);
        }
        stmt.bindDouble(13, entity.getType_consume_rate());
        stmt.bindDouble(14, entity.getType_default_days());
        stmt.bindLong(15, entity.getType_default_permanent() ? 1L: 0L);
        stmt.bindDouble(16, entity.getType_deposit_rate());
        stmt.bindDouble(17, entity.getType_discount());
 
        String type_name = entity.getType_name();
        if (type_name != null) {
            stmt.bindString(18, type_name);
        }
        stmt.bindLong(19, entity.getType_price_level());
 
        String type_printed_color = entity.getType_printed_color();
        if (type_printed_color != null) {
            stmt.bindString(20, type_printed_color);
        }
        stmt.bindLong(21, entity.getType_support_deposit() ? 1L: 0L);
        stmt.bindLong(22, entity.getType_support_online_loss() ? 1L: 0L);
        stmt.bindLong(23, entity.getType_support_point() ? 1L: 0L);
        stmt.bindLong(24, entity.getType_valid() ? 1L: 0L);
        stmt.bindLong(25, entity.getUse_in_enroll_shop() ? 1L: 0L);
 
        Long rule_id = entity.getRule_id();
        if (rule_id != null) {
            stmt.bindLong(26, rule_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardTypeParam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getBirth_discount());
        stmt.bindDouble(3, entity.getCard_min_balance());
        stmt.bindDouble(4, entity.getCard_pay_discount());
        stmt.bindDouble(5, entity.getCard_pay_discount_level());
 
        String card_user_type_image_id = entity.getCard_user_type_image_id();
        if (card_user_type_image_id != null) {
            stmt.bindString(6, card_user_type_image_id);
        }
 
        String card_user_type_image_path = entity.getCard_user_type_image_path();
        if (card_user_type_image_path != null) {
            stmt.bindString(7, card_user_type_image_path);
        }
        stmt.bindDouble(8, entity.getDeposit_basic());
        stmt.bindLong(9, entity.getDisable_pay_discount() ? 1L: 0L);
        stmt.bindLong(10, entity.getDiscount_without_coupon() ? 1L: 0L);
        stmt.bindDouble(11, entity.getSettlement_discount());
 
        String type_code = entity.getType_code();
        if (type_code != null) {
            stmt.bindString(12, type_code);
        }
        stmt.bindDouble(13, entity.getType_consume_rate());
        stmt.bindDouble(14, entity.getType_default_days());
        stmt.bindLong(15, entity.getType_default_permanent() ? 1L: 0L);
        stmt.bindDouble(16, entity.getType_deposit_rate());
        stmt.bindDouble(17, entity.getType_discount());
 
        String type_name = entity.getType_name();
        if (type_name != null) {
            stmt.bindString(18, type_name);
        }
        stmt.bindLong(19, entity.getType_price_level());
 
        String type_printed_color = entity.getType_printed_color();
        if (type_printed_color != null) {
            stmt.bindString(20, type_printed_color);
        }
        stmt.bindLong(21, entity.getType_support_deposit() ? 1L: 0L);
        stmt.bindLong(22, entity.getType_support_online_loss() ? 1L: 0L);
        stmt.bindLong(23, entity.getType_support_point() ? 1L: 0L);
        stmt.bindLong(24, entity.getType_valid() ? 1L: 0L);
        stmt.bindLong(25, entity.getUse_in_enroll_shop() ? 1L: 0L);
 
        Long rule_id = entity.getRule_id();
        if (rule_id != null) {
            stmt.bindLong(26, rule_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardTypeParam readEntity(Cursor cursor, int offset) {
        CardTypeParam entity = new CardTypeParam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getFloat(offset + 1), // birth_discount
            cursor.getFloat(offset + 2), // card_min_balance
            cursor.getFloat(offset + 3), // card_pay_discount
            cursor.getFloat(offset + 4), // card_pay_discount_level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // card_user_type_image_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // card_user_type_image_path
            cursor.getFloat(offset + 7), // deposit_basic
            cursor.getShort(offset + 8) != 0, // disable_pay_discount
            cursor.getShort(offset + 9) != 0, // discount_without_coupon
            cursor.getFloat(offset + 10), // settlement_discount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type_code
            cursor.getFloat(offset + 12), // type_consume_rate
            cursor.getFloat(offset + 13), // type_default_days
            cursor.getShort(offset + 14) != 0, // type_default_permanent
            cursor.getFloat(offset + 15), // type_deposit_rate
            cursor.getFloat(offset + 16), // type_discount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // type_name
            cursor.getInt(offset + 18), // type_price_level
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // type_printed_color
            cursor.getShort(offset + 20) != 0, // type_support_deposit
            cursor.getShort(offset + 21) != 0, // type_support_online_loss
            cursor.getShort(offset + 22) != 0, // type_support_point
            cursor.getShort(offset + 23) != 0, // type_valid
            cursor.getShort(offset + 24) != 0, // use_in_enroll_shop
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25) // rule_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardTypeParam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBirth_discount(cursor.getFloat(offset + 1));
        entity.setCard_min_balance(cursor.getFloat(offset + 2));
        entity.setCard_pay_discount(cursor.getFloat(offset + 3));
        entity.setCard_pay_discount_level(cursor.getFloat(offset + 4));
        entity.setCard_user_type_image_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCard_user_type_image_path(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeposit_basic(cursor.getFloat(offset + 7));
        entity.setDisable_pay_discount(cursor.getShort(offset + 8) != 0);
        entity.setDiscount_without_coupon(cursor.getShort(offset + 9) != 0);
        entity.setSettlement_discount(cursor.getFloat(offset + 10));
        entity.setType_code(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType_consume_rate(cursor.getFloat(offset + 12));
        entity.setType_default_days(cursor.getFloat(offset + 13));
        entity.setType_default_permanent(cursor.getShort(offset + 14) != 0);
        entity.setType_deposit_rate(cursor.getFloat(offset + 15));
        entity.setType_discount(cursor.getFloat(offset + 16));
        entity.setType_name(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setType_price_level(cursor.getInt(offset + 18));
        entity.setType_printed_color(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setType_support_deposit(cursor.getShort(offset + 20) != 0);
        entity.setType_support_online_loss(cursor.getShort(offset + 21) != 0);
        entity.setType_support_point(cursor.getShort(offset + 22) != 0);
        entity.setType_valid(cursor.getShort(offset + 23) != 0);
        entity.setUse_in_enroll_shop(cursor.getShort(offset + 24) != 0);
        entity.setRule_id(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardTypeParam entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardTypeParam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CardTypeParam entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
