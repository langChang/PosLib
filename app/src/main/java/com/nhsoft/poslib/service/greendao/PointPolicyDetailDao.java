package com.nhsoft.poslib.service.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nhsoft.poslib.entity.PointPolicyDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT_POLICY_DETAIL".
*/
public class PointPolicyDetailDao extends AbstractDao<PointPolicyDetail, Long> {

    public static final String TABLENAME = "POINT_POLICY_DETAIL";

    /**
     * Properties of entity PointPolicyDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Point_policy_id = new Property(1, String.class, "point_policy_id", false, "POINT_POLICY_ID");
        public final static Property Item_num = new Property(2, int.class, "item_num", false, "ITEM_NUM");
        public final static Property Policy_promotion_detail_std_price = new Property(3, float.class, "policy_promotion_detail_std_price", false, "POLICY_PROMOTION_DETAIL_STD_PRICE");
        public final static Property Policy_promotion_detail_special_price = new Property(4, float.class, "policy_promotion_detail_special_price", false, "POLICY_PROMOTION_DETAIL_SPECIAL_PRICE");
    }

    private Query<PointPolicyDetail> pointPolicy_Point_policy_detailsQuery;

    public PointPolicyDetailDao(DaoConfig config) {
        super(config);
    }
    
    public PointPolicyDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT_POLICY_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POINT_POLICY_ID\" TEXT," + // 1: point_policy_id
                "\"ITEM_NUM\" INTEGER NOT NULL ," + // 2: item_num
                "\"POLICY_PROMOTION_DETAIL_STD_PRICE\" REAL NOT NULL ," + // 3: policy_promotion_detail_std_price
                "\"POLICY_PROMOTION_DETAIL_SPECIAL_PRICE\" REAL NOT NULL );"); // 4: policy_promotion_detail_special_price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT_POLICY_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PointPolicyDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String point_policy_id = entity.getPoint_policy_id();
        if (point_policy_id != null) {
            stmt.bindString(2, point_policy_id);
        }
        stmt.bindLong(3, entity.getItem_num());
        stmt.bindDouble(4, entity.getPolicy_promotion_detail_std_price());
        stmt.bindDouble(5, entity.getPolicy_promotion_detail_special_price());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PointPolicyDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String point_policy_id = entity.getPoint_policy_id();
        if (point_policy_id != null) {
            stmt.bindString(2, point_policy_id);
        }
        stmt.bindLong(3, entity.getItem_num());
        stmt.bindDouble(4, entity.getPolicy_promotion_detail_std_price());
        stmt.bindDouble(5, entity.getPolicy_promotion_detail_special_price());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PointPolicyDetail readEntity(Cursor cursor, int offset) {
        PointPolicyDetail entity = new PointPolicyDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // point_policy_id
            cursor.getInt(offset + 2), // item_num
            cursor.getFloat(offset + 3), // policy_promotion_detail_std_price
            cursor.getFloat(offset + 4) // policy_promotion_detail_special_price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PointPolicyDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoint_policy_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItem_num(cursor.getInt(offset + 2));
        entity.setPolicy_promotion_detail_std_price(cursor.getFloat(offset + 3));
        entity.setPolicy_promotion_detail_special_price(cursor.getFloat(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PointPolicyDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PointPolicyDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PointPolicyDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "point_policy_details" to-many relationship of PointPolicy. */
    public List<PointPolicyDetail> _queryPointPolicy_Point_policy_details(String point_policy_id) {
        synchronized (this) {
            if (pointPolicy_Point_policy_detailsQuery == null) {
                QueryBuilder<PointPolicyDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Point_policy_id.eq(null));
                pointPolicy_Point_policy_detailsQuery = queryBuilder.build();
            }
        }
        Query<PointPolicyDetail> query = pointPolicy_Point_policy_detailsQuery.forCurrentThread();
        query.setParameter(0, point_policy_id);
        return query.list();
    }

}
