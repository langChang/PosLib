package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.MeasureUnit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE_UNIT".
*/
public class MeasureUnitDao extends AbstractDao<MeasureUnit, String> {

    public static final String TABLENAME = "MEASURE_UNIT";

    /**
     * Properties of entity MeasureUnit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Group_name = new Property(0, String.class, "group_name", true, "GROUP_NAME");
    }

    private DaoSession daoSession;


    public MeasureUnitDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureUnitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE_UNIT\" (" + //
                "\"GROUP_NAME\" TEXT PRIMARY KEY NOT NULL );"); // 0: group_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE_UNIT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeasureUnit entity) {
        stmt.clearBindings();
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(1, group_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeasureUnit entity) {
        stmt.clearBindings();
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(1, group_name);
        }
    }

    @Override
    protected final void attachEntity(MeasureUnit entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MeasureUnit readEntity(Cursor cursor, int offset) {
        MeasureUnit entity = new MeasureUnit( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // group_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeasureUnit entity, int offset) {
        entity.setGroup_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MeasureUnit entity, long rowId) {
        return entity.getGroup_name();
    }
    
    @Override
    public String getKey(MeasureUnit entity) {
        if(entity != null) {
            return entity.getGroup_name();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeasureUnit entity) {
        return entity.getGroup_name() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
