package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.KeyGeneratorBizday;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEY_GENERATOR_BIZDAY".
*/
public class KeyGeneratorBizdayDao extends AbstractDao<KeyGeneratorBizday, Long> {

    public static final String TABLENAME = "KEY_GENERATOR_BIZDAY";

    /**
     * Properties of entity KeyGeneratorBizday.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SystemBookCode = new Property(1, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(2, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property ShiftTableBizday = new Property(3, String.class, "shiftTableBizday", false, "SHIFT_TABLE_BIZDAY");
        public final static Property KeyItem = new Property(4, String.class, "keyItem", false, "KEY_ITEM");
        public final static Property KeyValue = new Property(5, int.class, "keyValue", false, "KEY_VALUE");
    }


    public KeyGeneratorBizdayDao(DaoConfig config) {
        super(config);
    }
    
    public KeyGeneratorBizdayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEY_GENERATOR_BIZDAY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 2: branchNum
                "\"SHIFT_TABLE_BIZDAY\" TEXT," + // 3: shiftTableBizday
                "\"KEY_ITEM\" TEXT," + // 4: keyItem
                "\"KEY_VALUE\" INTEGER NOT NULL );"); // 5: keyValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEY_GENERATOR_BIZDAY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KeyGeneratorBizday entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(2, systemBookCode);
        }
        stmt.bindLong(3, entity.getBranchNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(4, shiftTableBizday);
        }
 
        String keyItem = entity.getKeyItem();
        if (keyItem != null) {
            stmt.bindString(5, keyItem);
        }
        stmt.bindLong(6, entity.getKeyValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KeyGeneratorBizday entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(2, systemBookCode);
        }
        stmt.bindLong(3, entity.getBranchNum());
 
        String shiftTableBizday = entity.getShiftTableBizday();
        if (shiftTableBizday != null) {
            stmt.bindString(4, shiftTableBizday);
        }
 
        String keyItem = entity.getKeyItem();
        if (keyItem != null) {
            stmt.bindString(5, keyItem);
        }
        stmt.bindLong(6, entity.getKeyValue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KeyGeneratorBizday readEntity(Cursor cursor, int offset) {
        KeyGeneratorBizday entity = new KeyGeneratorBizday( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // systemBookCode
            cursor.getInt(offset + 2), // branchNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shiftTableBizday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // keyItem
            cursor.getInt(offset + 5) // keyValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KeyGeneratorBizday entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystemBookCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranchNum(cursor.getInt(offset + 2));
        entity.setShiftTableBizday(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKeyItem(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKeyValue(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KeyGeneratorBizday entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KeyGeneratorBizday entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KeyGeneratorBizday entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
