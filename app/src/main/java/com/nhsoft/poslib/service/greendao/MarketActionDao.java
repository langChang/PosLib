package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.MarketAction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARKET_ACTION".
*/
public class MarketActionDao extends AbstractDao<MarketAction, String> {

    public static final String TABLENAME = "MARKET_ACTION";

    /**
     * Properties of entity MarketAction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Action_id = new Property(0, String.class, "action_id", true, "ACTION_ID");
        public final static Property Branch_num = new Property(1, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Action_name = new Property(2, String.class, "action_name", false, "ACTION_NAME");
        public final static Property Action_create_time = new Property(3, String.class, "action_create_time", false, "ACTION_CREATE_TIME");
        public final static Property Action_creator = new Property(4, String.class, "action_creator", false, "ACTION_CREATOR");
        public final static Property Action_audit_time = new Property(5, String.class, "action_audit_time", false, "ACTION_AUDIT_TIME");
        public final static Property Action_auditor = new Property(6, String.class, "action_auditor", false, "ACTION_AUDITOR");
        public final static Property Action_type = new Property(7, String.class, "action_type", false, "ACTION_TYPE");
        public final static Property Action_sms_template = new Property(8, String.class, "action_sms_template", false, "ACTION_SMS_TEMPLATE");
        public final static Property Action_date_from = new Property(9, String.class, "action_date_from", false, "ACTION_DATE_FROM");
        public final static Property Action_date_to = new Property(10, String.class, "action_date_to", false, "ACTION_DATE_TO");
        public final static Property Action_param = new Property(11, String.class, "action_param", false, "ACTION_PARAM");
        public final static Property Action_time_from = new Property(12, String.class, "action_time_from", false, "ACTION_TIME_FROM");
        public final static Property Action_time_to = new Property(13, String.class, "action_time_to", false, "ACTION_TIME_TO");
        public final static Property Only_card_use = new Property(14, Boolean.class, "only_card_use", false, "ONLY_CARD_USE");
        public final static Property Only_use_once = new Property(15, Boolean.class, "only_use_once", false, "ONLY_USE_ONCE");
    }

    private DaoSession daoSession;


    public MarketActionDao(DaoConfig config) {
        super(config);
    }
    
    public MarketActionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARKET_ACTION\" (" + //
                "\"ACTION_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: action_id
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 1: branch_num
                "\"ACTION_NAME\" TEXT," + // 2: action_name
                "\"ACTION_CREATE_TIME\" TEXT," + // 3: action_create_time
                "\"ACTION_CREATOR\" TEXT," + // 4: action_creator
                "\"ACTION_AUDIT_TIME\" TEXT," + // 5: action_audit_time
                "\"ACTION_AUDITOR\" TEXT," + // 6: action_auditor
                "\"ACTION_TYPE\" TEXT," + // 7: action_type
                "\"ACTION_SMS_TEMPLATE\" TEXT," + // 8: action_sms_template
                "\"ACTION_DATE_FROM\" TEXT," + // 9: action_date_from
                "\"ACTION_DATE_TO\" TEXT," + // 10: action_date_to
                "\"ACTION_PARAM\" TEXT," + // 11: action_param
                "\"ACTION_TIME_FROM\" TEXT," + // 12: action_time_from
                "\"ACTION_TIME_TO\" TEXT," + // 13: action_time_to
                "\"ONLY_CARD_USE\" INTEGER," + // 14: only_card_use
                "\"ONLY_USE_ONCE\" INTEGER);"); // 15: only_use_once
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARKET_ACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarketAction entity) {
        stmt.clearBindings();
 
        String action_id = entity.getAction_id();
        if (action_id != null) {
            stmt.bindString(1, action_id);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String action_name = entity.getAction_name();
        if (action_name != null) {
            stmt.bindString(3, action_name);
        }
 
        String action_create_time = entity.getAction_create_time();
        if (action_create_time != null) {
            stmt.bindString(4, action_create_time);
        }
 
        String action_creator = entity.getAction_creator();
        if (action_creator != null) {
            stmt.bindString(5, action_creator);
        }
 
        String action_audit_time = entity.getAction_audit_time();
        if (action_audit_time != null) {
            stmt.bindString(6, action_audit_time);
        }
 
        String action_auditor = entity.getAction_auditor();
        if (action_auditor != null) {
            stmt.bindString(7, action_auditor);
        }
 
        String action_type = entity.getAction_type();
        if (action_type != null) {
            stmt.bindString(8, action_type);
        }
 
        String action_sms_template = entity.getAction_sms_template();
        if (action_sms_template != null) {
            stmt.bindString(9, action_sms_template);
        }
 
        String action_date_from = entity.getAction_date_from();
        if (action_date_from != null) {
            stmt.bindString(10, action_date_from);
        }
 
        String action_date_to = entity.getAction_date_to();
        if (action_date_to != null) {
            stmt.bindString(11, action_date_to);
        }
 
        String action_param = entity.getAction_param();
        if (action_param != null) {
            stmt.bindString(12, action_param);
        }
 
        String action_time_from = entity.getAction_time_from();
        if (action_time_from != null) {
            stmt.bindString(13, action_time_from);
        }
 
        String action_time_to = entity.getAction_time_to();
        if (action_time_to != null) {
            stmt.bindString(14, action_time_to);
        }
 
        Boolean only_card_use = entity.getOnly_card_use();
        if (only_card_use != null) {
            stmt.bindLong(15, only_card_use ? 1L: 0L);
        }
 
        Boolean only_use_once = entity.getOnly_use_once();
        if (only_use_once != null) {
            stmt.bindLong(16, only_use_once ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarketAction entity) {
        stmt.clearBindings();
 
        String action_id = entity.getAction_id();
        if (action_id != null) {
            stmt.bindString(1, action_id);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String action_name = entity.getAction_name();
        if (action_name != null) {
            stmt.bindString(3, action_name);
        }
 
        String action_create_time = entity.getAction_create_time();
        if (action_create_time != null) {
            stmt.bindString(4, action_create_time);
        }
 
        String action_creator = entity.getAction_creator();
        if (action_creator != null) {
            stmt.bindString(5, action_creator);
        }
 
        String action_audit_time = entity.getAction_audit_time();
        if (action_audit_time != null) {
            stmt.bindString(6, action_audit_time);
        }
 
        String action_auditor = entity.getAction_auditor();
        if (action_auditor != null) {
            stmt.bindString(7, action_auditor);
        }
 
        String action_type = entity.getAction_type();
        if (action_type != null) {
            stmt.bindString(8, action_type);
        }
 
        String action_sms_template = entity.getAction_sms_template();
        if (action_sms_template != null) {
            stmt.bindString(9, action_sms_template);
        }
 
        String action_date_from = entity.getAction_date_from();
        if (action_date_from != null) {
            stmt.bindString(10, action_date_from);
        }
 
        String action_date_to = entity.getAction_date_to();
        if (action_date_to != null) {
            stmt.bindString(11, action_date_to);
        }
 
        String action_param = entity.getAction_param();
        if (action_param != null) {
            stmt.bindString(12, action_param);
        }
 
        String action_time_from = entity.getAction_time_from();
        if (action_time_from != null) {
            stmt.bindString(13, action_time_from);
        }
 
        String action_time_to = entity.getAction_time_to();
        if (action_time_to != null) {
            stmt.bindString(14, action_time_to);
        }
 
        Boolean only_card_use = entity.getOnly_card_use();
        if (only_card_use != null) {
            stmt.bindLong(15, only_card_use ? 1L: 0L);
        }
 
        Boolean only_use_once = entity.getOnly_use_once();
        if (only_use_once != null) {
            stmt.bindLong(16, only_use_once ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(MarketAction entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MarketAction readEntity(Cursor cursor, int offset) {
        MarketAction entity = new MarketAction( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // action_id
            cursor.getInt(offset + 1), // branch_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // action_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // action_create_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // action_creator
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // action_audit_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // action_auditor
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // action_type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // action_sms_template
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // action_date_from
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // action_date_to
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // action_param
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // action_time_from
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // action_time_to
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // only_card_use
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // only_use_once
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarketAction entity, int offset) {
        entity.setAction_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBranch_num(cursor.getInt(offset + 1));
        entity.setAction_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAction_create_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAction_creator(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAction_audit_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAction_auditor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAction_type(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAction_sms_template(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAction_date_from(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAction_date_to(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAction_param(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAction_time_from(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAction_time_to(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOnly_card_use(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setOnly_use_once(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(MarketAction entity, long rowId) {
        return entity.getAction_id();
    }
    
    @Override
    public String getKey(MarketAction entity) {
        if(entity != null) {
            return entity.getAction_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MarketAction entity) {
        return entity.getAction_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
