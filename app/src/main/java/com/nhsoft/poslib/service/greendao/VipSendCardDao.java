package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.VipSendCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIP_SEND_CARD".
*/
public class VipSendCardDao extends AbstractDao<VipSendCard, Long> {

    public static final String TABLENAME = "VIP_SEND_CARD";

    /**
     * Properties of entity VipSendCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property SystemBookCode = new Property(1, String.class, "systemBookCode", false, "SYSTEM_BOOK_CODE");
        public final static Property BranchNum = new Property(2, int.class, "branchNum", false, "BRANCH_NUM");
        public final static Property ShiftTableNum = new Property(3, String.class, "shiftTableNum", false, "SHIFT_TABLE_NUM");
        public final static Property Money = new Property(4, float.class, "money", false, "MONEY");
        public final static Property ShiftTableBizDay = new Property(5, String.class, "shiftTableBizDay", false, "SHIFT_TABLE_BIZ_DAY");
        public final static Property PrintNum = new Property(6, String.class, "printNum", false, "PRINT_NUM");
        public final static Property OperateTime = new Property(7, String.class, "operateTime", false, "OPERATE_TIME");
        public final static Property Operator = new Property(8, String.class, "operator", false, "OPERATOR");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
    }


    public VipSendCardDao(DaoConfig config) {
        super(config);
    }
    
    public VipSendCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIP_SEND_CARD\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYSTEM_BOOK_CODE\" TEXT," + // 1: systemBookCode
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 2: branchNum
                "\"SHIFT_TABLE_NUM\" TEXT," + // 3: shiftTableNum
                "\"MONEY\" REAL NOT NULL ," + // 4: money
                "\"SHIFT_TABLE_BIZ_DAY\" TEXT," + // 5: shiftTableBizDay
                "\"PRINT_NUM\" TEXT," + // 6: printNum
                "\"OPERATE_TIME\" TEXT," + // 7: operateTime
                "\"OPERATOR\" TEXT," + // 8: operator
                "\"STATUS\" TEXT);"); // 9: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIP_SEND_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VipSendCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(2, systemBookCode);
        }
        stmt.bindLong(3, entity.getBranchNum());
 
        String shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindString(4, shiftTableNum);
        }
        stmt.bindDouble(5, entity.getMoney());
 
        String shiftTableBizDay = entity.getShiftTableBizDay();
        if (shiftTableBizDay != null) {
            stmt.bindString(6, shiftTableBizDay);
        }
 
        String printNum = entity.getPrintNum();
        if (printNum != null) {
            stmt.bindString(7, printNum);
        }
 
        String operateTime = entity.getOperateTime();
        if (operateTime != null) {
            stmt.bindString(8, operateTime);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(9, operator);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VipSendCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String systemBookCode = entity.getSystemBookCode();
        if (systemBookCode != null) {
            stmt.bindString(2, systemBookCode);
        }
        stmt.bindLong(3, entity.getBranchNum());
 
        String shiftTableNum = entity.getShiftTableNum();
        if (shiftTableNum != null) {
            stmt.bindString(4, shiftTableNum);
        }
        stmt.bindDouble(5, entity.getMoney());
 
        String shiftTableBizDay = entity.getShiftTableBizDay();
        if (shiftTableBizDay != null) {
            stmt.bindString(6, shiftTableBizDay);
        }
 
        String printNum = entity.getPrintNum();
        if (printNum != null) {
            stmt.bindString(7, printNum);
        }
 
        String operateTime = entity.getOperateTime();
        if (operateTime != null) {
            stmt.bindString(8, operateTime);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(9, operator);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VipSendCard readEntity(Cursor cursor, int offset) {
        VipSendCard entity = new VipSendCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // systemBookCode
            cursor.getInt(offset + 2), // branchNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shiftTableNum
            cursor.getFloat(offset + 4), // money
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shiftTableBizDay
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // printNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // operateTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // operator
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VipSendCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystemBookCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBranchNum(cursor.getInt(offset + 2));
        entity.setShiftTableNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMoney(cursor.getFloat(offset + 4));
        entity.setShiftTableBizDay(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrintNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOperateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOperator(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VipSendCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VipSendCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VipSendCard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
