package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.nongmao.Stall;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STALL".
*/
public class StallDao extends AbstractDao<Stall, Long> {

    public static final String TABLENAME = "STALL";

    /**
     * Properties of entity Stall.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Branch_num = new Property(1, String.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Stall_category = new Property(2, String.class, "stall_category", false, "STALL_CATEGORY");
        public final static Property Stall_code = new Property(3, String.class, "stall_code", false, "STALL_CODE");
        public final static Property Stall_del_tag = new Property(4, boolean.class, "stall_del_tag", false, "STALL_DEL_TAG");
        public final static Property Stall_memo = new Property(5, String.class, "stall_memo", false, "STALL_MEMO");
        public final static Property Stall_name = new Property(6, String.class, "stall_name", false, "STALL_NAME");
        public final static Property Stall_num = new Property(7, int.class, "stall_num", false, "STALL_NUM");
        public final static Property Storehouse_num = new Property(8, int.class, "storehouse_num", false, "STOREHOUSE_NUM");
        public final static Property System_book_code = new Property(9, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
    }


    public StallDao(DaoConfig config) {
        super(config);
    }
    
    public StallDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STALL\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BRANCH_NUM\" TEXT," + // 1: branch_num
                "\"STALL_CATEGORY\" TEXT," + // 2: stall_category
                "\"STALL_CODE\" TEXT," + // 3: stall_code
                "\"STALL_DEL_TAG\" INTEGER NOT NULL ," + // 4: stall_del_tag
                "\"STALL_MEMO\" TEXT," + // 5: stall_memo
                "\"STALL_NAME\" TEXT," + // 6: stall_name
                "\"STALL_NUM\" INTEGER NOT NULL ," + // 7: stall_num
                "\"STOREHOUSE_NUM\" INTEGER NOT NULL ," + // 8: storehouse_num
                "\"SYSTEM_BOOK_CODE\" TEXT);"); // 9: system_book_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STALL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Stall entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String branch_num = entity.getBranch_num();
        if (branch_num != null) {
            stmt.bindString(2, branch_num);
        }
 
        String stall_category = entity.getStall_category();
        if (stall_category != null) {
            stmt.bindString(3, stall_category);
        }
 
        String stall_code = entity.getStall_code();
        if (stall_code != null) {
            stmt.bindString(4, stall_code);
        }
        stmt.bindLong(5, entity.getStall_del_tag() ? 1L: 0L);
 
        String stall_memo = entity.getStall_memo();
        if (stall_memo != null) {
            stmt.bindString(6, stall_memo);
        }
 
        String stall_name = entity.getStall_name();
        if (stall_name != null) {
            stmt.bindString(7, stall_name);
        }
        stmt.bindLong(8, entity.getStall_num());
        stmt.bindLong(9, entity.getStorehouse_num());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(10, system_book_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Stall entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String branch_num = entity.getBranch_num();
        if (branch_num != null) {
            stmt.bindString(2, branch_num);
        }
 
        String stall_category = entity.getStall_category();
        if (stall_category != null) {
            stmt.bindString(3, stall_category);
        }
 
        String stall_code = entity.getStall_code();
        if (stall_code != null) {
            stmt.bindString(4, stall_code);
        }
        stmt.bindLong(5, entity.getStall_del_tag() ? 1L: 0L);
 
        String stall_memo = entity.getStall_memo();
        if (stall_memo != null) {
            stmt.bindString(6, stall_memo);
        }
 
        String stall_name = entity.getStall_name();
        if (stall_name != null) {
            stmt.bindString(7, stall_name);
        }
        stmt.bindLong(8, entity.getStall_num());
        stmt.bindLong(9, entity.getStorehouse_num());
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(10, system_book_code);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Stall readEntity(Cursor cursor, int offset) {
        Stall entity = new Stall( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // branch_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stall_category
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stall_code
            cursor.getShort(offset + 4) != 0, // stall_del_tag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // stall_memo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // stall_name
            cursor.getInt(offset + 7), // stall_num
            cursor.getInt(offset + 8), // storehouse_num
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // system_book_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Stall entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBranch_num(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStall_category(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStall_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStall_del_tag(cursor.getShort(offset + 4) != 0);
        entity.setStall_memo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStall_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStall_num(cursor.getInt(offset + 7));
        entity.setStorehouse_num(cursor.getInt(offset + 8));
        entity.setSystem_book_code(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Stall entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Stall entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Stall entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
