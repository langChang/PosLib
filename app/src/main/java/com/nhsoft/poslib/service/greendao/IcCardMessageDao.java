package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.IcCardMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IC_CARD_MESSAGE".
*/
public class IcCardMessageDao extends AbstractDao<IcCardMessage, Long> {

    public static final String TABLENAME = "IC_CARD_MESSAGE";

    /**
     * Properties of entity IcCardMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Branch_iC = new Property(1, boolean.class, "branch_iC", false, "BRANCH_I_C");
        public final static Property Branch_iD = new Property(2, boolean.class, "branch_iD", false, "BRANCH_I_D");
        public final static Property Reader_a = new Property(3, String.class, "reader_a", false, "READER_A");
        public final static Property Reader_b = new Property(4, String.class, "reader_b", false, "READER_B");
        public final static Property Reader_c = new Property(5, String.class, "reader_c", false, "READER_C");
    }


    public IcCardMessageDao(DaoConfig config) {
        super(config);
    }
    
    public IcCardMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IC_CARD_MESSAGE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BRANCH_I_C\" INTEGER NOT NULL ," + // 1: branch_iC
                "\"BRANCH_I_D\" INTEGER NOT NULL ," + // 2: branch_iD
                "\"READER_A\" TEXT," + // 3: reader_a
                "\"READER_B\" TEXT," + // 4: reader_b
                "\"READER_C\" TEXT);"); // 5: reader_c
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IC_CARD_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IcCardMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBranch_iC() ? 1L: 0L);
        stmt.bindLong(3, entity.getBranch_iD() ? 1L: 0L);
 
        String reader_a = entity.getReader_a();
        if (reader_a != null) {
            stmt.bindString(4, reader_a);
        }
 
        String reader_b = entity.getReader_b();
        if (reader_b != null) {
            stmt.bindString(5, reader_b);
        }
 
        String reader_c = entity.getReader_c();
        if (reader_c != null) {
            stmt.bindString(6, reader_c);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IcCardMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBranch_iC() ? 1L: 0L);
        stmt.bindLong(3, entity.getBranch_iD() ? 1L: 0L);
 
        String reader_a = entity.getReader_a();
        if (reader_a != null) {
            stmt.bindString(4, reader_a);
        }
 
        String reader_b = entity.getReader_b();
        if (reader_b != null) {
            stmt.bindString(5, reader_b);
        }
 
        String reader_c = entity.getReader_c();
        if (reader_c != null) {
            stmt.bindString(6, reader_c);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IcCardMessage readEntity(Cursor cursor, int offset) {
        IcCardMessage entity = new IcCardMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // branch_iC
            cursor.getShort(offset + 2) != 0, // branch_iD
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reader_a
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reader_b
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // reader_c
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IcCardMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBranch_iC(cursor.getShort(offset + 1) != 0);
        entity.setBranch_iD(cursor.getShort(offset + 2) != 0);
        entity.setReader_a(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReader_b(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReader_c(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IcCardMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IcCardMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IcCardMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
