package com.nhsoft.poslib.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nhsoft.poslib.entity.nongmao.Merchant;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MERCHANT".
*/
public class MerchantDao extends AbstractDao<Merchant, Long> {

    public static final String TABLENAME = "MERCHANT";

    /**
     * Properties of entity Merchant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Branch_num = new Property(1, int.class, "branch_num", false, "BRANCH_NUM");
        public final static Property Merchant_address = new Property(2, String.class, "merchant_address", false, "MERCHANT_ADDRESS");
        public final static Property Merchant_card_no = new Property(3, String.class, "merchant_card_no", false, "MERCHANT_CARD_NO");
        public final static Property Merchant_category = new Property(4, String.class, "merchant_category", false, "MERCHANT_CATEGORY");
        public final static Property Merchant_code = new Property(5, String.class, "merchant_code", false, "MERCHANT_CODE");
        public final static Property Merchant_del_tag = new Property(6, boolean.class, "merchant_del_tag", false, "MERCHANT_DEL_TAG");
        public final static Property Merchant_license_no = new Property(7, String.class, "merchant_license_no", false, "MERCHANT_LICENSE_NO");
        public final static Property Merchant_linkman = new Property(8, String.class, "merchant_linkman", false, "MERCHANT_LINKMAN");
        public final static Property Merchant_memo = new Property(9, String.class, "merchant_memo", false, "MERCHANT_MEMO");
        public final static Property Merchant_name = new Property(10, String.class, "merchant_name", false, "MERCHANT_NAME");
        public final static Property Merchant_num = new Property(11, int.class, "merchant_num", false, "MERCHANT_NUM");
        public final static Property Merchant_phone = new Property(12, String.class, "merchant_phone", false, "MERCHANT_PHONE");
        public final static Property Merchant_status = new Property(13, int.class, "merchant_status", false, "MERCHANT_STATUS");
        public final static Property Merchant_tax_no = new Property(14, String.class, "merchant_tax_no", false, "MERCHANT_TAX_NO");
        public final static Property System_book_code = new Property(15, String.class, "system_book_code", false, "SYSTEM_BOOK_CODE");
    }


    public MerchantDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MERCHANT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BRANCH_NUM\" INTEGER NOT NULL ," + // 1: branch_num
                "\"MERCHANT_ADDRESS\" TEXT," + // 2: merchant_address
                "\"MERCHANT_CARD_NO\" TEXT," + // 3: merchant_card_no
                "\"MERCHANT_CATEGORY\" TEXT," + // 4: merchant_category
                "\"MERCHANT_CODE\" TEXT," + // 5: merchant_code
                "\"MERCHANT_DEL_TAG\" INTEGER NOT NULL ," + // 6: merchant_del_tag
                "\"MERCHANT_LICENSE_NO\" TEXT," + // 7: merchant_license_no
                "\"MERCHANT_LINKMAN\" TEXT," + // 8: merchant_linkman
                "\"MERCHANT_MEMO\" TEXT," + // 9: merchant_memo
                "\"MERCHANT_NAME\" TEXT," + // 10: merchant_name
                "\"MERCHANT_NUM\" INTEGER NOT NULL ," + // 11: merchant_num
                "\"MERCHANT_PHONE\" TEXT," + // 12: merchant_phone
                "\"MERCHANT_STATUS\" INTEGER NOT NULL ," + // 13: merchant_status
                "\"MERCHANT_TAX_NO\" TEXT," + // 14: merchant_tax_no
                "\"SYSTEM_BOOK_CODE\" TEXT);"); // 15: system_book_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MERCHANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Merchant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String merchant_address = entity.getMerchant_address();
        if (merchant_address != null) {
            stmt.bindString(3, merchant_address);
        }
 
        String merchant_card_no = entity.getMerchant_card_no();
        if (merchant_card_no != null) {
            stmt.bindString(4, merchant_card_no);
        }
 
        String merchant_category = entity.getMerchant_category();
        if (merchant_category != null) {
            stmt.bindString(5, merchant_category);
        }
 
        String merchant_code = entity.getMerchant_code();
        if (merchant_code != null) {
            stmt.bindString(6, merchant_code);
        }
        stmt.bindLong(7, entity.getMerchant_del_tag() ? 1L: 0L);
 
        String merchant_license_no = entity.getMerchant_license_no();
        if (merchant_license_no != null) {
            stmt.bindString(8, merchant_license_no);
        }
 
        String merchant_linkman = entity.getMerchant_linkman();
        if (merchant_linkman != null) {
            stmt.bindString(9, merchant_linkman);
        }
 
        String merchant_memo = entity.getMerchant_memo();
        if (merchant_memo != null) {
            stmt.bindString(10, merchant_memo);
        }
 
        String merchant_name = entity.getMerchant_name();
        if (merchant_name != null) {
            stmt.bindString(11, merchant_name);
        }
        stmt.bindLong(12, entity.getMerchant_num());
 
        String merchant_phone = entity.getMerchant_phone();
        if (merchant_phone != null) {
            stmt.bindString(13, merchant_phone);
        }
        stmt.bindLong(14, entity.getMerchant_status());
 
        String merchant_tax_no = entity.getMerchant_tax_no();
        if (merchant_tax_no != null) {
            stmt.bindString(15, merchant_tax_no);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(16, system_book_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Merchant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBranch_num());
 
        String merchant_address = entity.getMerchant_address();
        if (merchant_address != null) {
            stmt.bindString(3, merchant_address);
        }
 
        String merchant_card_no = entity.getMerchant_card_no();
        if (merchant_card_no != null) {
            stmt.bindString(4, merchant_card_no);
        }
 
        String merchant_category = entity.getMerchant_category();
        if (merchant_category != null) {
            stmt.bindString(5, merchant_category);
        }
 
        String merchant_code = entity.getMerchant_code();
        if (merchant_code != null) {
            stmt.bindString(6, merchant_code);
        }
        stmt.bindLong(7, entity.getMerchant_del_tag() ? 1L: 0L);
 
        String merchant_license_no = entity.getMerchant_license_no();
        if (merchant_license_no != null) {
            stmt.bindString(8, merchant_license_no);
        }
 
        String merchant_linkman = entity.getMerchant_linkman();
        if (merchant_linkman != null) {
            stmt.bindString(9, merchant_linkman);
        }
 
        String merchant_memo = entity.getMerchant_memo();
        if (merchant_memo != null) {
            stmt.bindString(10, merchant_memo);
        }
 
        String merchant_name = entity.getMerchant_name();
        if (merchant_name != null) {
            stmt.bindString(11, merchant_name);
        }
        stmt.bindLong(12, entity.getMerchant_num());
 
        String merchant_phone = entity.getMerchant_phone();
        if (merchant_phone != null) {
            stmt.bindString(13, merchant_phone);
        }
        stmt.bindLong(14, entity.getMerchant_status());
 
        String merchant_tax_no = entity.getMerchant_tax_no();
        if (merchant_tax_no != null) {
            stmt.bindString(15, merchant_tax_no);
        }
 
        String system_book_code = entity.getSystem_book_code();
        if (system_book_code != null) {
            stmt.bindString(16, system_book_code);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Merchant readEntity(Cursor cursor, int offset) {
        Merchant entity = new Merchant( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // branch_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // merchant_address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // merchant_card_no
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // merchant_category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // merchant_code
            cursor.getShort(offset + 6) != 0, // merchant_del_tag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // merchant_license_no
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // merchant_linkman
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // merchant_memo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // merchant_name
            cursor.getInt(offset + 11), // merchant_num
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // merchant_phone
            cursor.getInt(offset + 13), // merchant_status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // merchant_tax_no
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // system_book_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Merchant entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBranch_num(cursor.getInt(offset + 1));
        entity.setMerchant_address(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMerchant_card_no(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMerchant_category(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMerchant_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMerchant_del_tag(cursor.getShort(offset + 6) != 0);
        entity.setMerchant_license_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMerchant_linkman(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMerchant_memo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMerchant_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMerchant_num(cursor.getInt(offset + 11));
        entity.setMerchant_phone(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMerchant_status(cursor.getInt(offset + 13));
        entity.setMerchant_tax_no(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSystem_book_code(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Merchant entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Merchant entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Merchant entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
